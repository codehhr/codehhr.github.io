<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo butterfly 的标签功能</title>
    <url>/2021/07/18/blog/blog-hexo-butterfly-tag-plugins/</url>
    <content><![CDATA[<blockquote>
<h3 id="https-butterfly-js-org-posts-4aa8abbe-Note-Bootstrap-Callout"><a href="#https-butterfly-js-org-posts-4aa8abbe-Note-Bootstrap-Callout" class="headerlink" title="https://butterfly.js.org/posts/4aa8abbe/#Note-Bootstrap-Callout"></a><a href="https://butterfly.js.org/posts/4aa8abbe/#Note-Bootstrap-Callout">https://butterfly.js.org/posts/4aa8abbe/#Note-Bootstrap-Callout</a></h3></blockquote>
<h1 id="Note-Bootstrap-Callout"><a href="#Note-Bootstrap-Callout" class="headerlink" title="Note (Bootstrap Callout)"></a>Note (Bootstrap Callout)</h1><div class="note info flat"><p>标签外挂是 <code>Hexo</code> 独有的功能 , 并不是标准的 <code>Markdown</code> 格式<br>以下的写法 , 只适用于 <code>Butterfly</code> 主题 , 用在其它主题上不会有效果 , 甚至可能会报错 , 使用前请留意<br>外挂虽然能为主题带来一些额外的功能和 <code>UI</code> 方面的强化 , 但是 , 标籤外挂也有明显的限制 , 使用时请留意</p>
</div>

<div class="note warning flat"><p>标籤外挂虽然能为主题带来一些额外的功能和 UI 方面的强化 , 但是 , 标籤外挂也有明显的限制 , 使用时请留意</p>
</div>

<div class="tabs" id="note"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#note-1">通应设置</button></li><li class="tab"><button type="button" data-href="#note-2">用法 1</button></li><li class="tab"><button type="button" data-href="#note-3">用法 2 ( 自定义 icon )</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><p>修改 <code>主题配置文件</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># Note tag style values:</span></span><br><span class="line">  <span class="comment">#  - simple    bs-callout old alert style. Default.</span></span><br><span class="line">  <span class="comment">#  - modern    bs-callout new (v2-v3) alert style.</span></span><br><span class="line">  <span class="comment">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class="line">  <span class="comment">#  - disabled  disable all CSS styles import of note tag.</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">simple</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">border_radius:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line">  <span class="comment"># Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line">  <span class="attr">light_bg_offset:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p><code>icons</code> 和 <code>light_bg_offset</code> 只对方法一生效<br><code>Note</code> 标签外挂有两种用法</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>名称</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td><code>class</code></td>
<td>【可选】标识，不同的标识有不同的配色 ( <code>default</code> / <code>primary</code> / <code>success</code> / <code>info</code> / <code>warning</code> / <code>danger</code> )</td>
</tr>
<tr>
<td><code>no-icon</code></td>
<td>【可选】<code>不显示icon</code></td>
</tr>
<tr>
<td><code>style</code></td>
<td>【可选】可以覆盖配置中的 <code>style</code> ( <code>simple</code>/<code>modern</code>/<code>flat</code>/<code>disabled</code> )</td>
</tr>
</tbody></table>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">&#123;% note simple %&#125;</span><br><span class="line">默认 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;</span><br><span class="line">default 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;</span><br><span class="line">primary 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;</span><br><span class="line">success 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;</span><br><span class="line">info 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;</span><br><span class="line">warning 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;</span><br><span class="line">danger 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<h2 id="simple"><a href="#simple" class="headerlink" title="simple"></a>simple</h2><div class="note simple"><p>默认 提示块标籤</p>
</div>

<div class="note default simple"><p>default 提示块标籤</p>
</div>

<div class="note primary simple"><p>primary 提示块标籤</p>
</div>

<div class="note success simple"><p>success 提示块标籤</p>
</div>

<div class="note info simple"><p>info 提示块标籤</p>
</div>

<div class="note warning simple"><p>warning 提示块标籤</p>
</div>

<div class="note danger simple"><p>danger 提示块标籤</p>
</div>

<h2 id="modern"><a href="#modern" class="headerlink" title="modern"></a>modern</h2><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">&#123;% note modern %&#125;</span><br><span class="line">默认 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default modern %&#125;</span><br><span class="line">default 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary modern %&#125;</span><br><span class="line">primary 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success modern %&#125;</span><br><span class="line">success 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info modern %&#125;</span><br><span class="line">info 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning modern %&#125;</span><br><span class="line">warning 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger modern %&#125;</span><br><span class="line">danger 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<div class="note modern"><p>默认 提示块标籤</p>
</div>

<div class="note default modern"><p>default 提示块标籤</p>
</div>

<div class="note primary modern"><p>primary 提示块标籤</p>
</div>

<div class="note success modern"><p>success 提示块标籤</p>
</div>

<div class="note info modern"><p>info 提示块标籤</p>
</div>

<div class="note warning modern"><p>warning 提示块标籤</p>
</div>

<div class="note danger modern"><p>danger 提示块标籤</p>
</div>

<h2 id="flat"><a href="#flat" class="headerlink" title="flat"></a>flat</h2><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">&#123;% note flat %&#125;</span><br><span class="line">默认 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default flat %&#125;</span><br><span class="line">default 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary flat %&#125;</span><br><span class="line">primary 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success flat %&#125;</span><br><span class="line">success 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info flat %&#125;</span><br><span class="line">info 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning flat %&#125;</span><br><span class="line">warning 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger flat %&#125;</span><br><span class="line">danger 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<div class="note flat"><p>默认 提示块标籤</p>
</div>

<div class="note default flat"><p>default 提示块标籤</p>
</div>

<div class="note primary flat"><p>primary 提示块标籤</p>
</div>

<div class="note success flat"><p>success 提示块标籤</p>
</div>

<div class="note info flat"><p>info 提示块标籤</p>
</div>

<div class="note warning flat"><p>warning 提示块标籤</p>
</div>

<div class="note danger flat"><p>danger 提示块标籤</p>
</div>

<h2 id="disabled"><a href="#disabled" class="headerlink" title="disabled"></a>disabled</h2><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">&#123;% note disabled %&#125;</span><br><span class="line">默认 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default disabled %&#125;</span><br><span class="line">default 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary disabled %&#125;</span><br><span class="line">primary 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success disabled %&#125;</span><br><span class="line">success 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info disabled %&#125;</span><br><span class="line">info 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning disabled %&#125;</span><br><span class="line">warning 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger disabled %&#125;</span><br><span class="line">danger 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<div class="note disabled"><p>默认 提示块标籤</p>
</div>

<div class="note default disabled"><p>default 提示块标籤</p>
</div>

<div class="note primary disabled"><p>primary 提示块标籤</p>
</div>

<div class="note success disabled"><p>success 提示块标籤</p>
</div>

<div class="note info disabled"><p>info 提示块标籤</p>
</div>

<div class="note warning disabled"><p>warning 提示块标籤</p>
</div>

<div class="note danger disabled"><p>danger 提示块标籤</p>
</div>

<h2 id="no-icon"><a href="#no-icon" class="headerlink" title="no-icon"></a>no-icon</h2><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;</span><br><span class="line">默认 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default no-icon %&#125;</span><br><span class="line">default 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125;</span><br><span class="line">primary 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success no-icon %&#125;</span><br><span class="line">success 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon %&#125;</span><br><span class="line">info 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning no-icon %&#125;</span><br><span class="line">warning 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger no-icon %&#125;</span><br><span class="line">danger 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<div class="note no-icon flat"><p>默认 提示块标籤</p>
</div>

<div class="note default no-icon flat"><p>default 提示块标籤</p>
</div>

<div class="note primary no-icon flat"><p>primary 提示块标籤</p>
</div>

<div class="note success no-icon flat"><p>success 提示块标籤</p>
</div>

<div class="note info no-icon flat"><p>info 提示块标籤</p>
</div>

<div class="note warning no-icon flat"><p>warning 提示块标籤</p>
</div>

<div class="note danger no-icon flat"><p>danger 提示块标籤</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-3"><blockquote>
<p>3.2.0 以上版本支</p>
</blockquote>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>名称</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td><code>color</code></td>
<td>【可选】颜色 ( <code>default</code> / <code>blue</code> / <code>pink</code> / <code>red</code> / <code>purple</code> / <code>orange</code> / <code>green</code> )</td>
</tr>
<tr>
<td><code>icon</code></td>
<td>【可选】可配置自定义 <code>icon</code> (只支持 <code>fontawesome</code> 图标, 也可以配置 <code>no-icon</code> )</td>
</tr>
<tr>
<td><code>style</code></td>
<td>【可选】可以覆盖配置中的 <code>style</code> ( <code>simple</code>/<code>modern</code>/<code>flat</code>/<code>disabled</code> )</td>
</tr>
</tbody></table>
<h2 id="simple"><a href="#simple" class="headerlink" title="simple"></a>simple</h2><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;</span><br><span class="line">2021 年快到了....</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; simple %&#125;</span><br><span class="line">小心开车 安全至上</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; simple%&#125;</span><br><span class="line">这是三片呢？还是四片？</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; simple %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; simple %&#125;</span><br><span class="line">剪刀石头布</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; simple %&#125;</span><br><span class="line">前端最讨厌的浏览器</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<div class="note icon simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p>
</div>
<div class="note blue icon simple"><i class="note-icon fas fa-bullhorn"></i><p>2021 年快到了….</p>
</div>
<div class="note pink icon simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p>
</div>
<div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p>
</div>
<div class="note orange icon simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p>
</div>
<div class="note purple icon simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p>
</div>
<div class="note green icon simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p>
</div>

<h2 id="modern"><a href="#modern" class="headerlink" title="modern"></a>modern</h2><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; modern %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;</span><br><span class="line">2021 年快到了....</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; modern %&#125;</span><br><span class="line">小心开车 安全至上</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; modern%&#125;</span><br><span class="line">这是三片呢？还是四片？</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; modern %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; modern %&#125;</span><br><span class="line">剪刀石头布</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; modern %&#125;</span><br><span class="line">前端最讨厌的浏览器</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<h2 id="flat"><a href="#flat" class="headerlink" title="flat"></a>flat</h2><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;</span><br><span class="line">2021 年快到了....</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;</span><br><span class="line">小心开车 安全至上</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;</span><br><span class="line">这是三片呢？还是四片？</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;</span><br><span class="line">剪刀石头布</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;</span><br><span class="line">前端最讨厌的浏览器</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<div class="note icon flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p>
</div>
<div class="note blue icon flat"><i class="note-icon fas fa-bullhorn"></i><p>2021 年快到了….</p>
</div>
<div class="note pink icon flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p>
</div>
<div class="note red icon flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p>
</div>
<div class="note orange icon flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p>
</div>
<div class="note purple icon flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p>
</div>
<div class="note green icon flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p>
</div>

<h2 id="disabled"><a href="#disabled" class="headerlink" title="disabled"></a>disabled</h2><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; disabled %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; disabled %&#125;</span><br><span class="line">2021 年快到了....</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; disabled %&#125;</span><br><span class="line">小心开车 安全至上</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; disabled %&#125;</span><br><span class="line">这是三片呢？还是四片？</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; disabled %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; disabled %&#125;</span><br><span class="line">剪刀石头布</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; disabled %&#125;</span><br><span class="line">前端最讨厌的浏览器</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<div class="note icon disabled"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p>
</div>
<div class="note blue icon disabled"><i class="note-icon fas fa-bullhorn"></i><p>2021 年快到了….</p>
</div>
<div class="note pink icon disabled"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p>
</div>
<div class="note red icon disabled"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p>
</div>
<div class="note orange icon disabled"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p>
</div>
<div class="note purple icon disabled"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p>
</div>
<div class="note green icon disabled"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p>
</div>

<h2 id="no-icon"><a href="#no-icon" class="headerlink" title="no-icon"></a>no-icon</h2><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue no-icon %&#125;</span><br><span class="line">2021 年快到了....</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink no-icon %&#125;</span><br><span class="line">小心开车 安全至上</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red no-icon %&#125;</span><br><span class="line">这是三片呢？还是四片？</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange no-icon %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple no-icon %&#125;</span><br><span class="line">剪刀石头布</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green no-icon %&#125;</span><br><span class="line">前端最讨厌的浏览器</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<div class="note no-icon flat"><p>你是刷 Visa 还是 UnionPay</p>
</div>
<div class="note blue no-icon flat"><p>2021 年快到了….</p>
</div>
<div class="note pink no-icon flat"><p>小心开车 安全至上</p>
</div>
<div class="note red no-icon flat"><p>这是三片呢？还是四片？</p>
</div>
<div class="note orange no-icon flat"><p>你是刷 Visa 还是 UnionPay</p>
</div>
<div class="note purple no-icon flat"><p>剪刀石头布</p>
</div>
<div class="note green no-icon flat"><p>前端最讨厌的浏览器</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h1 id="未完待续-…"><a href="#未完待续-…" class="headerlink" title="未完待续 …"></a>未完待续 …</h1>]]></content>
      <categories>
        <category>博客</category>
        <category>hexo</category>
        <category>butterfly</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Hexo 快速搭建博客</title>
    <url>/2020/02/01/blog/blog-hexo/</url>
    <content><![CDATA[<h1 id="如何做到一毛不拔的搭建网站"><a href="#如何做到一毛不拔的搭建网站" class="headerlink" title="如何做到一毛不拔的搭建网站"></a>如何做到一毛不拔的搭建网站</h1><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/emoji/s.png" alt="s"></p>
<h3 id="以下操作中需要安装的地方需要使用管理员权限-因为我不清楚哪里会出现-permission-denied"><a href="#以下操作中需要安装的地方需要使用管理员权限-因为我不清楚哪里会出现-permission-denied" class="headerlink" title="以下操作中需要安装的地方需要使用管理员权限,因为我不清楚哪里会出现 permission denied"></a>以下操作中需要安装的地方需要使用管理员权限,因为我不清楚哪里会出现 <code>permission denied</code></h3><hr>
<h1 id="1-安装-nodejs"><a href="#1-安装-nodejs" class="headerlink" title="1 . 安装 nodejs"></a>1 . 安装 <code>nodejs</code></h1><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/nodejs.png" alt="nodejs"></p>
<hr>
<h3 id="对应-windows-用户，下载对应的-“-msi”-的文件安装就行"><a href="#对应-windows-用户，下载对应的-“-msi”-的文件安装就行" class="headerlink" title="对应 windows 用户，下载对应的 “.msi” 的文件安装就行"></a>对应 windows 用户，下载对应的 “.msi” 的文件安装就行</h3><h3 id="Linux-和-Mac-用户…此处省略"><a href="#Linux-和-Mac-用户…此处省略" class="headerlink" title="Linux 和 Mac 用户…此处省略"></a>Linux 和 Mac 用户…此处省略</h3><hr>
<p>安装成功后可以查看版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<hr>
<p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/version.png" alt="version"></p>
<hr>
<h3 id="为方便国内使用，可以把-npm-换成-taobao-的-cnpm"><a href="#为方便国内使用，可以把-npm-换成-taobao-的-cnpm" class="headerlink" title="为方便国内使用，可以把 npm 换成 taobao 的 cnpm"></a>为方便国内使用，可以把 npm 换成 taobao 的 cnpm</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h1 id="2-本地搭建"><a href="#2-本地搭建" class="headerlink" title="2 . 本地搭建"></a>2 . 本地搭建</h1><h3 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 <code>hexo</code></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>查看版本,验证成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>

<h3 id="创建一个文件夹，比如名为-blog"><a href="#创建一个文件夹，比如名为-blog" class="headerlink" title="创建一个文件夹，比如名为 blog"></a>创建一个文件夹，比如名为 <code>blog</code></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir blog</span><br></pre></td></tr></table></figure>

<h3 id="进入-blog-初始化hexo"><a href="#进入-blog-初始化hexo" class="headerlink" title="进入 blog , 初始化hexo"></a>进入 <code>blog</code> , 初始化<code>hexo</code></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<h3 id="等他完事后-可以在-http-localhost-4000-下本地预览"><a href="#等他完事后-可以在-http-localhost-4000-下本地预览" class="headerlink" title="等他完事后,可以在 http://localhost:4000/ 下本地预览"></a>等他完事后,可以在 <a href="http://localhost:4000/">http://localhost:4000/</a> 下本地预览</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<h4 id="如图"><a href="#如图" class="headerlink" title="如图 :"></a>如图 :</h4><hr>
<p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/server.png" alt="s"></p>
<h3 id="如果渲染不出来，尝试安装以下解决"><a href="#如果渲染不出来，尝试安装以下解决" class="headerlink" title="如果渲染不出来，尝试安装以下解决"></a>如果渲染不出来，尝试安装以下解决</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install  hexo-renderer-pug hexo-renderer-stylus hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive --save</span><br></pre></td></tr></table></figure>

<h3 id="如果新建一篇文章"><a href="#如果新建一篇文章" class="headerlink" title="如果新建一篇文章"></a>如果新建一篇文章</h3><p>文件名最好为英文，方便操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo n name</span><br></pre></td></tr></table></figure>

<p>他会在 <code>source/_posts</code> 下生成一篇名为 name 的 markdown 文件，内容自己写</p>
<h1 id="3-推到远端"><a href="#3-推到远端" class="headerlink" title="3 . 推到远端"></a>3 . 推到远端</h1><p>登录你的 github , 新建一个仓库</p>
<p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/github.png" alt="github"></p>
<p>仓库名为 用户名.github.io 用户名小写</p>
<p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/repo_name.png" alt="repo_name"></p>
<p>现在是个空仓库</p>
<p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/empty.png" alt="empty"></p>
<hr>
<p>回到终端下</p>
<h3 id="安装-hexo-deployer"><a href="#安装-hexo-deployer" class="headerlink" title="安装 hexo-deployer"></a>安装 <code>hexo-deployer</code></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>

<h3 id="修改-config-yml-文件"><a href="#修改-config-yml-文件" class="headerlink" title="修改 _config.yml 文件"></a>修改 _config.yml 文件</h3><p>在 blog 目录下</p>
<p>如图修改最下面 , repo 改为自己的仓库地址</p>
<p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/deployer.png" alt="depolyer"></p>
<h3 id="部署到远端"><a href="#部署到远端" class="headerlink" title="部署到远端"></a>部署到远端</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/done.png" alt="done"></p>
<p>你可以刷新 github 仓库, 里面已经有东西了</p>
<p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/unempty.png" alt="unempty"></p>
<h3 id="完事"><a href="#完事" class="headerlink" title="完事"></a>完事</h3><hr>
<h3 id="你的博客地址就是"><a href="#你的博客地址就是" class="headerlink" title="你的博客地址就是:"></a>你的博客地址就是:</h3><p>用户名.github.io</p>
<h1 id="4-更换主题"><a href="#4-更换主题" class="headerlink" title="4 . 更换主题"></a>4 . 更换主题</h1><h3 id="hexo-主题-https-hexo-io-themes"><a href="#hexo-主题-https-hexo-io-themes" class="headerlink" title="hexo 主题 : https://hexo.io/themes/"></a>hexo 主题 : <a href="https://hexo.io/themes/">https://hexo.io/themes/</a></h3><p>每个主题里都有说明</p>
<p>比如：lx</p>
<p>在 blog 目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/blleng/hexo-theme-lx themes/lx</span><br></pre></td></tr></table></figure>

<p>按照他说明的改一下就行了</p>
<p>把 <code>blog/_config.yml</code> 里的 <code>theme</code> 改成要换的主题名就完事了, 比如把 <code>landscape</code> 改成 <code>lx</code></p>
<h3 id="可以本地先预览一下"><a href="#可以本地先预览一下" class="headerlink" title="可以本地先预览一下"></a>可以本地先预览一下</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<h3 id="推到远端"><a href="#推到远端" class="headerlink" title="推到远端"></a>推到远端</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<h1 id="5-常用命令总结"><a href="#5-常用命令总结" class="headerlink" title="5 . 常用命令总结 :"></a>5 . 常用命令总结 :</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">创建一篇新文章</span><br><span class="line">hexo n example</span><br><span class="line">---</span><br><span class="line">清理旧的数据</span><br><span class="line">hexo clean</span><br><span class="line">---</span><br><span class="line">重新生成一下</span><br><span class="line">hexo g</span><br><span class="line">---</span><br><span class="line">部署到远端</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
      <categories>
        <category>博客</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 报错 use_date_for_updated is deprecated...</title>
    <url>/2020/11/08/blog/blog-hexousedateforupd/</url>
    <content><![CDATA[<h1 id="hexo-报错-use-date-for-updated-is-deprecated…"><a href="#hexo-报错-use-date-for-updated-is-deprecated…" class="headerlink" title="hexo 报错 use_date_for_updated is deprecated…"></a>hexo 报错 use_date_for_updated is deprecated…</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WARN  Deprecated config detected: &quot;use_date_for_updated&quot; is deprecated, please use &quot;updated_option&quot; instead. See https://hexo.io/docs/configuration for more details.</span><br></pre></td></tr></table></figure>

<h2 id="如图"><a href="#如图" class="headerlink" title="如图:"></a>如图:</h2><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/usedateforupd.png" alt="usedateforupd"></p>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>编辑根目录的 <code>_config.yml</code> 文件 , 把 <code>use_date_for_updated</code> 值改为 <code>updated_option</code></p>
<h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
      <categories>
        <category>博客</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Hugo 快速搭建博客</title>
    <url>/2019/06/01/blog/blog-hugo/</url>
    <content><![CDATA[<h1 id="用-Hugo-搭建博客"><a href="#用-Hugo-搭建博客" class="headerlink" title="用 Hugo 搭建博客"></a>用 Hugo 搭建博客</h1><p>Hugo 是一个用 Go 编写的静态站点生成器，生成速度很快<br>下面是具体操作：</p>
<h1 id="1-安装-Hugo"><a href="#1-安装-Hugo" class="headerlink" title="1.安装 Hugo"></a>1.安装 Hugo</h1><h3 id="Windows-用户"><a href="#Windows-用户" class="headerlink" title="Windows 用户"></a>Windows 用户</h3><p>使用 Chocolatey 或者 Scoop 快速安装，取决于你使用什么包管理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">choco install hugo -confirm</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scoop install hugo</span><br></pre></td></tr></table></figure>

<p>也可以到 <a href="https://github.com/gohugoio/hugo/releases">https://github.com/gohugoio/hugo/releases</a> 下载对应的操作系统版本的 Hugo 二进制文件！</p>
<p>把 hugo.exe 所在目录添加到系统变量里, <code>hugo version</code> 可查看是否添加成功！</p>
<h3 id="Mac-用户"><a href="#Mac-用户" class="headerlink" title="Mac 用户"></a>Mac 用户</h3><p>直接用 <code>Homebrew</code> 安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install hugo</span><br></pre></td></tr></table></figure>

<h3 id="Linux-用户"><a href="#Linux-用户" class="headerlink" title="Linux 用户"></a>Linux 用户</h3><p>这里就不多说了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">基于Debian的 ：sudo apt-get install hugo</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">基于ArchLinux的 ：sudo pacman -S hugo</span><br></pre></td></tr></table></figure>

<h1 id="2-生成站点"><a href="#2-生成站点" class="headerlink" title="2.生成站点"></a>2.生成站点</h1><p>比如新建一个 myblog 的网站：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hugo new site myblog</span><br></pre></td></tr></table></figure>

<p>也就一瞬间完成的事，此时生成了一个文件名为 <code>myblog</code> 的文件夹</p>
<p>然后到 <code>Hugo Theme</code> 选一个主题</p>
<p><a href="https://themes.gohugo.io/">https://themes.gohugo.io/</a></p>
<hr>
<p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hugo/hugo_themes.png" alt="Hugo-Theme"></p>
<hr>
<p>比如这个 “<code>Jane</code>“</p>
<hr>
<p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hugo/jane.png" alt="Hugo-Theme-jane"></p>
<p>其实每个主题里面都有教程，这里实际操作一下</p>
<h3 id="1-切换到-myblog-目录"><a href="#1-切换到-myblog-目录" class="headerlink" title="1.切换到 myblog 目录"></a>1.切换到 <code>myblog</code> 目录</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd myblog</span><br></pre></td></tr></table></figure>

<p>把主题克隆下来 , 需要用到 <code>git</code> ，如果没有自行安装一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/xianmin/hugo-theme-jane.git --depth=1 themes/jane</span><br></pre></td></tr></table></figure>

<h3 id="2-然后新建一篇文章试试效果"><a href="#2-然后新建一篇文章试试效果" class="headerlink" title="2.然后新建一篇文章试试效果"></a>2.然后新建一篇文章试试效果</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hugo new post/blog.md</span><br></pre></td></tr></table></figure>

<p>随便在里面写点东西，这里需要你会 <code>markdown</code> 语法，其实也不难，半天就能学会</p>
<hr>
<p>【【 如果你懒，也可以把主题文件夹里的示例复制过来 】】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp -r themes/jane/exampleSite/content ./</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-把主题里的配置文件复制到-myblog-的配置文件下，就是config-toml这玩意儿"><a href="#3-把主题里的配置文件复制到-myblog-的配置文件下，就是config-toml这玩意儿" class="headerlink" title="3.把主题里的配置文件复制到 myblog 的配置文件下，就是config.toml这玩意儿"></a>3.把主题里的配置文件复制到 myblog 的配置文件下，就是<code>config.toml</code>这玩意儿</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp themes/jane/exampleSite/config.toml ./</span><br></pre></td></tr></table></figure>

<p>好，现在可以把博客在本地运行起来了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hugo server -t jane --buildDrafts</span><br></pre></td></tr></table></figure>

<h1 id="3-把博客放到远端仓库"><a href="#3-把博客放到远端仓库" class="headerlink" title="3.把博客放到远端仓库"></a>3.把博客放到远端仓库</h1><p>Github 是个免费仓库，用它就完事了</p>
<p>当然需要你先在 github 上注册一下</p>
<p>完事之后，登录你的 github</p>
<hr>
<h3 id="新建一个仓库，存放你的博客"><a href="#新建一个仓库，存放你的博客" class="headerlink" title="新建一个仓库，存放你的博客"></a>新建一个仓库，存放你的博客</h3><h4 id="New-Repositories"><a href="#New-Repositories" class="headerlink" title="New Repositories"></a>New Repositories</h4><hr>
<p>Repository name 格式要求：<code>用户名.github.io</code> (用户名小写)</p>
<hr>
<p>别的不用管，下面直接点 Create Repository</p>
<hr>
<h4 id="生成-public-文件夹"><a href="#生成-public-文件夹" class="headerlink" title="生成 public 文件夹"></a>生成 <code>public</code> 文件夹</h4><p>在终端下输入（myblog 目录下）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hugo --theme=jane --baseUrl=&quot;https://用户名.github.io&quot; --buildDrafts</span><br></pre></td></tr></table></figure>

<p>这时候会生成一个 <code>public</code> 文件夹</p>
<p>把这个 public 文件夹推送到 github 仓库就完事啦~</p>
<h4 id="把-public-文件夹推送到-Github"><a href="#把-public-文件夹推送到-Github" class="headerlink" title="把 public 文件夹推送到 Github"></a>把 <code>public</code> 文件夹推送到 Github</h4><p>// 下面依次输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd public</span><br><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;提交的备注&quot;</span><br></pre></td></tr></table></figure>

<p>如果是第一次使用 git ，途中他会提示让你配置一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  //设置用户邮箱</span><br><span class="line">git config --global user.email &quot;你的github邮箱&quot;</span><br><span class="line">  //设置用户名</span><br><span class="line">git config --global user.name &quot;你的github用户名&quot;</span><br></pre></td></tr></table></figure>

<p>跟远端关联 (也就是你的 github 地址 / 仓库地址)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add origin https://github.com/用户名/用户名.github.io.git</span><br></pre></td></tr></table></figure>

<p>然后，推到远端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<p>需要输入用户名和密码</p>
<p>完事</p>
<hr>
<p>以后访问博客就用下面的地址：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用户名.github.io</span><br></pre></td></tr></table></figure>

<h1 id="4-常用命令总结"><a href="#4-常用命令总结" class="headerlink" title="4.常用命令总结 :"></a>4.常用命令总结 :</h1><p>在你的博客根目录下(blog)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">创建一篇新文章</span><br><span class="line">hugo new post/example.md</span><br><span class="line">---</span><br><span class="line">重新生成 public 文件夹</span><br><span class="line">hugo</span><br><span class="line">---</span><br><span class="line">进入 public 文件夹</span><br><span class="line">cd public</span><br><span class="line">---</span><br><span class="line">依次输入</span><br><span class="line">git init ( git 初始化仓库 , 只需创建时输入一次 , 以后就省略这一步 )</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;提交的备注&quot;</span><br><span class="line">---</span><br><span class="line">部署到远端</span><br><span class="line">git push ( git 第一次提交需要指定分支 , 使用 git push -u origin master , 之后直接 git push )</span><br></pre></td></tr></table></figure>

<h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
      <categories>
        <category>博客</category>
        <category>hugo</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>hugo</tag>
      </tags>
  </entry>
  <entry>
    <title>Bootstrap</title>
    <url>/2021/07/11/bootstrap/bootstrap/</url>
    <content><![CDATA[<h1 id="Bootstrap-v3-中文文档"><a href="#Bootstrap-v3-中文文档" class="headerlink" title="Bootstrap v3 中文文档"></a>Bootstrap v3 中文文档</h1><blockquote>
<h2 id="https-v3-bootcss-com"><a href="#https-v3-bootcss-com" class="headerlink" title="https://v3.bootcss.com/"></a><a href="https://v3.bootcss.com/">https://v3.bootcss.com/</a></h2></blockquote>
<h1 id="引入使用"><a href="#引入使用" class="headerlink" title="引入使用"></a>引入使用</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 最新版本的 Bootstrap 核心 CSS 文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">  <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 可选的 Bootstrap 主题文件（一般不用引入） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">  <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap-theme.min.css&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>如果只是用一些样式 , 可以只引入 <code>css</code> 文件</strong></p>
<h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续 . . ."></a>未完待续 . . .</h1>]]></content>
  </entry>
  <entry>
    <title>css常用居中方式</title>
    <url>/2020/07/27/css/css-center/</url>
    <content><![CDATA[<div class="tabs" id="center"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#center-1">水平居中</button></li><li class="tab"><button type="button" data-href="#center-2">垂直居中</button></li><li class="tab"><button type="button" data-href="#center-3">水平和垂直居中</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="center-1"><h1 id="一、水平居中"><a href="#一、水平居中" class="headerlink" title="一、水平居中"></a>一、水平居中</h1><h2 id="内联元素"><a href="#内联元素" class="headerlink" title="内联元素"></a>内联元素</h2><p>父级元素加 <code>text-align: center</code> 即可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span>&gt;</span>内联元素<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h2><p>给定宽度,然后 margin 上下为 0,左右 auto 即可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span>块级元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="多个块级元素"><a href="#多个块级元素" class="headerlink" title="多个块级元素"></a>多个块级元素</h2><h3 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h3><p>子元素设置成内联,父级元素加 <code>text-align:center</code>即可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>第一个块<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>第二个块<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>第三个块<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h3><p>利用 flexbox 弹性布局</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>第一个块<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>第二个块<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>第三个块<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="center-2"><h1 id="二、垂直居中"><a href="#二、垂直居中" class="headerlink" title="二、垂直居中"></a>二、垂直居中</h1><h2 id="内联元素"><a href="#内联元素" class="headerlink" title="内联元素"></a>内联元素</h2><h3 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h3><p>设置 padding</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span>需要垂直居中的内容(内联)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">40px</span> <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h3><p>按照父级元素的高度,设置子元素的行高</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span>需要垂直居中的内容(内联)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第三种方式"><a href="#第三种方式" class="headerlink" title="第三种方式"></a>第三种方式</h3><p>利用 flexbox,父级元素需给定高度</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>爷要垂直居中<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>爷要垂直居中<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>爷要垂直居中<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h2><h3 id="第一种方式-1"><a href="#第一种方式-1" class="headerlink" title="第一种方式"></a>第一种方式</h3><p>父元素相对定位 <code>position:relative</code>,子元素绝对定位 <code>position: absolute</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>爷要垂直居中<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第二种方式-1"><a href="#第二种方式-1" class="headerlink" title="第二种方式"></a>第二种方式</h3><p>利用 flexbox</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>爷要垂直居中<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="center-3"><h1 id="三、水平和垂直居中"><a href="#三、水平和垂直居中" class="headerlink" title="三、水平和垂直居中"></a>三、水平和垂直居中</h1><h3 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h3><p>父元素相对定位 <code>position:relative</code>,子元素绝对定位 <code>position: absolute</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>爷要水平和垂直居中<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h3><p>使用 flexbox</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我要垂直居中啊a我要垂直居中啊a我要垂直居中啊<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/emoji/s.png" alt="lalala"></p>
<h2 id="最后说一点-如果具体宽高已知-给定具体数值也可以直接实现"><a href="#最后说一点-如果具体宽高已知-给定具体数值也可以直接实现" class="headerlink" title="最后说一点,如果具体宽高已知,给定具体数值也可以直接实现"></a>最后说一点,如果具体宽高已知,给定具体数值也可以直接实现</h2><h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css布局</tag>
      </tags>
  </entry>
  <entry>
    <title>几种常见css布局</title>
    <url>/2020/06/05/css/css-Layout/</url>
    <content><![CDATA[<h1 id="单列布局"><a href="#单列布局" class="headerlink" title="单列布局"></a>单列布局</h1><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/danlie.jpg" alt="danlie"></p>
<h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h3><p>给定宽度，margin:auto 即可实现</p>
<h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">960px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">960px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">960px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><h3 id="html-1"><a href="#html-1" class="headerlink" title="html"></a>html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="css-1"><a href="#css-1" class="headerlink" title="css"></a>css</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">960px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.nav</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: darkgray;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">960px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: aqua;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="等高布局"><a href="#等高布局" class="headerlink" title="等高布局"></a>等高布局</h1><p>当有内容填充一侧时,另一侧高度跟左侧保持相等</p>
<h3 id="html-2"><a href="#html-2" class="headerlink" title="html"></a>html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="css-2"><a href="#css-2" class="headerlink" title="css"></a>css</h3><p>通过设定 margin-bottom 和 padding-bottom，然后让父容器溢出隐藏，就能达到等高的效果</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">4px</span> solid <span class="built_in">rgb</span>(<span class="number">69</span>, <span class="number">209</span>, <span class="number">228</span>);</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">230</span>, <span class="number">56</span>, <span class="number">56</span>);</span><br><span class="line">  <span class="attribute">margin-bottom</span>: -<span class="number">2000px</span>;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">2000px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">67</span>, <span class="number">67</span>, <span class="number">221</span>);</span><br><span class="line">  <span class="attribute">margin-bottom</span>: -<span class="number">2000px</span>;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">2000px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h3><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sameheight.png" alt="example"></p>
<hr>
<h1 id="三列布局-双飞翼-圣杯"><a href="#三列布局-双飞翼-圣杯" class="headerlink" title="三列布局(双飞翼,圣杯)"></a>三列布局(双飞翼,圣杯)</h1><p>左侧固定，右侧固定，中间自适应的三列布局</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">实现方式有很多：</span><br><span class="line">    1.BFC</span><br><span class="line">    2.定位</span><br><span class="line">    3.浮动</span><br><span class="line">    4.flex弹性</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<h3 id="html-3"><a href="#html-3" class="headerlink" title="html"></a>html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>center<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Left<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Right<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="css-3"><a href="#css-3" class="headerlink" title="css"></a>css</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">220px</span>;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">220px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">220px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">background</span>: blue;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">right</span>: -<span class="number">220px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实例：-1"><a href="#实例：-1" class="headerlink" title="实例："></a>实例：</h3><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/shuangfeiyi.png" alt="example"></p>
<h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续 . . ."></a>未完待续 . . .</h1>]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css布局</tag>
      </tags>
  </entry>
  <entry>
    <title>css3自动换行排列</title>
    <url>/2020/07/22/css/css-flex/</url>
    <content><![CDATA[<h1 id="如果一行放不下就会自动换行"><a href="#如果一行放不下就会自动换行" class="headerlink" title="如果一行放不下就会自动换行"></a>如果一行放不下就会自动换行</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">flex-wrap</span>: wrap;</span><br></pre></td></tr></table></figure>

<h2 id="示例"><a href="#示例" class="headerlink" title="示例 :"></a>示例 :</h2><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap; <span class="comment">/*换行*/</span></span><br><span class="line">  <span class="comment">/* flex-wrap: wrap-reverse; //反方向换行 */</span></span><br><span class="line">  <span class="attribute">align-content</span>: flex-start; <span class="comment">/*紧揍排列,解决换行出现空行*/</span></span><br><span class="line">  <span class="attribute">justify-content</span>: space-between; <span class="comment">/*左右布局,平分间隙*/</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">520px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">181</span>, <span class="number">235</span>, <span class="number">235</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">6px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">223</span>, <span class="number">155</span>, <span class="number">155</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="如图"><a href="#如图" class="headerlink" title="如图 :"></a>如图 :</h2><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/css3flex/flexwrap.png" alt="flex-wrap"></p>
<h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css布局</tag>
        <tag>flex</tag>
      </tags>
  </entry>
  <entry>
    <title>解决raw.githubusercontent.com无法连接问题</title>
    <url>/2019/06/02/github/github-rawgithub/</url>
    <content><![CDATA[<h1 id="解决-GitHub-的-raw-githubusercontent-com-无法连接问题"><a href="#解决-GitHub-的-raw-githubusercontent-com-无法连接问题" class="headerlink" title="解决 GitHub 的 raw.githubusercontent.com 无法连接问题"></a>解决 GitHub 的 raw.githubusercontent.com 无法连接问题</h1><p>在使用 curl 下载文件时,如果出现以下情况</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused</span><br></pre></td></tr></table></figure>

<h1 id="查询-raw-githubusercontent-com-的-IP"><a href="#查询-raw-githubusercontent-com-的-IP" class="headerlink" title="查询 raw.githubusercontent.com 的 IP"></a>查询 raw.githubusercontent.com 的 IP</h1><p>修改 hosts 文件</p>
<p>文件路径 <code>/etc/hosts</code></p>
<p>添加以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># GitHub Start</span><br><span class="line">52.74.223.119 github.com</span><br><span class="line">192.30.253.112 gist.github.com</span><br><span class="line">192.30.253.113 gist.github.com</span><br><span class="line">192.30.253.119 gist.github.com</span><br><span class="line">54.169.195.247 api.github.com</span><br><span class="line">185.199.111.153 assets-cdn.github.com</span><br><span class="line">151.101.76.133 raw.githubusercontent.com</span><br><span class="line">151.101.108.133 user-images.githubusercontent.com</span><br><span class="line">151.101.76.133 gist.githubusercontent.com</span><br><span class="line">151.101.76.133 cloud.githubusercontent.com</span><br><span class="line">151.101.76.133 camo.githubusercontent.com</span><br><span class="line">151.101.185.194 github.global.ssl.fastly.net</span><br><span class="line"># GitHub End</span><br></pre></td></tr></table></figure>

<h1 id="如果你有代理那当以上都是废话"><a href="#如果你有代理那当以上都是废话" class="headerlink" title="如果你有代理那当以上都是废话"></a>如果你有代理那当以上都是废话</h1><h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>curl</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>一些 html css 细节</title>
    <url>/2020/11/10/html-css-detail/html-css-details/</url>
    <content><![CDATA[<h1 id="一、-input-光标-插入符-颜色"><a href="#一、-input-光标-插入符-颜色" class="headerlink" title="一、 input 光标(插入符)颜色"></a>一、 input 光标(插入符)颜色</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span>: &#123;</span><br><span class="line">  caret-color: <span class="number">#c0c0ff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="二、-修改-placeholder-颜色"><a href="#二、-修改-placeholder-颜色" class="headerlink" title="二、 修改 placeholder 颜色"></a>二、 修改 placeholder 颜色</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::placeholder</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#c0c0ff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* input::-webkit-input-placeholder &#123;</span></span><br><span class="line"><span class="comment">  color: #c0c0ff;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">input::-moz-placeholder &#123;</span></span><br><span class="line"><span class="comment">  color: #c0c0ff;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br></pre></td></tr></table></figure>

<h1 id="三、-在移动端-app-下-搜索的时候让软键盘右下角按钮显示为-搜索"><a href="#三、-在移动端-app-下-搜索的时候让软键盘右下角按钮显示为-搜索" class="headerlink" title="三、 在移动端 app 下,搜索的时候让软键盘右下角按钮显示为 搜索"></a>三、 在移动端 app 下,搜索的时候让软键盘右下角按钮显示为 <code>搜索</code></h1><p>默认应该是显示 <code>换行</code></p>
<p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/htmlcssdetails/default.png" alt="default"></p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决:"></a>解决:</h2><p>不用 <code>action</code> (通过 <code>ajax</code> 发送请求), 让 <code>onsubmit=&quot;return false&quot;</code> 就可以</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return false&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;something &quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/htmlcssdetails/showsearch.png" alt="showsearch"></p>
<h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
      <categories>
        <category>Html-Css-细节</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>css</tag>
        <tag>input光标</tag>
        <tag>插入符</tag>
        <tag>placeholder</tag>
      </tags>
  </entry>
  <entry>
    <title>maven配置国内仓库</title>
    <url>/2020/07/03/java/java-maven/</url>
    <content><![CDATA[<h3 id="使用-maven-下载-jar-包速度会很慢，原因是-maven-默认的仓库地址是国外的，所以速度很慢，解决这个问题我们只需要修改-maven-仓库地址即可"><a href="#使用-maven-下载-jar-包速度会很慢，原因是-maven-默认的仓库地址是国外的，所以速度很慢，解决这个问题我们只需要修改-maven-仓库地址即可" class="headerlink" title="使用 maven 下载 jar 包速度会很慢，原因是 maven 默认的仓库地址是国外的，所以速度很慢，解决这个问题我们只需要修改 maven 仓库地址即可"></a>使用 maven 下载 jar 包速度会很慢，原因是 maven 默认的仓库地址是国外的，所以速度很慢，解决这个问题我们只需要修改 maven 仓库地址即可</h3><p>maven 下载 jar 包时会优先去<br><code>~/.m2/</code> 路径下查找 <code>settings.xml</code> 文件</p>
<p>如果没有就创建一个 <code>settings.xml</code></p>
<h4 id="完整-settings-xml-示例"><a href="#完整-settings-xml-示例" class="headerlink" title="完整 settings.xml 示例"></a>完整 <code>settings.xml</code> 示例</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 阿里源 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Maven Repository Switchboard<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo1.maven.org/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>repo2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo2.maven.org/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>ibiblio<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://mirrors.ibiblio.org/pub/mirrors/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>jboss-public-repository-group<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>JBoss Public Repository Group<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repository.jboss.org/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 中央仓库在中国的镜像 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven.net.cn<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>oneof the central mirrors in china<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.net.cn/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6 新增用法 ( 一 )</title>
    <url>/2021/06/19/js/es6-day01/</url>
    <content><![CDATA[<h1 id="let-关键字"><a href="#let-关键字" class="headerlink" title="let 关键字"></a>let 关键字</h1><h2 id="let-是块级别作用域"><a href="#let-是块级别作用域" class="headerlink" title="let 是块级别作用域"></a>let 是块级别作用域</h2><p>任何一对花括号 ( <strong>这玩意 : { }</strong> ) 中的语句都属于一个块 , 在花括号里面用 <code>let</code> 定义的所有变量在花括号外都是不可见的 , 我们称之为块级作用域</p>
<p><strong>案例 :</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 var 声明</span></span><br><span class="line"><span class="keyword">var</span> list = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  list[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历完后 i 已变成 10</span></span><br><span class="line">list[<span class="number">1</span>](); <span class="comment">// 10</span></span><br><span class="line">list[<span class="number">2</span>](); <span class="comment">// 10</span></span><br><span class="line">list[<span class="number">3</span>](); <span class="comment">// 10</span></span><br><span class="line">list[<span class="number">4</span>](); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 let 声明</span></span><br><span class="line"><span class="keyword">var</span> list = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  list[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">list[<span class="number">1</span>](); <span class="comment">// 1</span></span><br><span class="line">list[<span class="number">2</span>](); <span class="comment">// 2</span></span><br><span class="line">list[<span class="number">3</span>](); <span class="comment">// 3</span></span><br><span class="line">list[<span class="number">4</span>](); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>

<h2 id="let-不会变量提升"><a href="#let-不会变量提升" class="headerlink" title="let 不会变量提升"></a>let 不会变量提升</h2><p><strong>案例 :</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 var 声明</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// undefined</span></span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 结果是 undefined , 因为 var 使变量提升,相当于 a 定义了,但未赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 let 声明</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 报错 : a 未定义</span></span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 结果报错 : a 未定义</span></span><br><span class="line"><span class="comment">// 用let关键字来定义a；这样a在代码块内就不会提升了。</span></span><br><span class="line"><span class="comment">// 那为什么又报错了呢，因为用let声明的变量，在其块级作用域内是封闭的，是不会受到外面的全局变量a影响的，</span></span><br><span class="line"><span class="comment">// 并且要先声明再使用，所以a的值即不是1（因为不受外面的影响）</span></span><br><span class="line"><span class="comment">// 也不是undefined（因为先声明后使用）</span></span><br><span class="line"><span class="comment">// 更不是2，未声明定义就使用，只有报错啦</span></span><br></pre></td></tr></table></figure>

<h2 id="同一个块级作用域内不允许重复声明同一个变量"><a href="#同一个块级作用域内不允许重复声明同一个变量" class="headerlink" title="同一个块级作用域内不允许重复声明同一个变量"></a>同一个块级作用域内不允许重复声明同一个变量</h2><p><strong>错误示范 :</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 错误示范 1</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 错误示范 2</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<h2 id="函数内不能用-let-重新声明函数的参数"><a href="#函数内不能用-let-重新声明函数的参数" class="headerlink" title="函数内不能用 let 重新声明函数的参数"></a>函数内不能用 let 重新声明函数的参数</h2><p><strong>错误示范 :</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">world</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> world = <span class="string">&quot;hello tom&quot;</span>; <span class="comment">// 报错 : 用 let 重新声明 world 参数</span></span><br><span class="line">  <span class="built_in">console</span>.log(world);</span><br><span class="line">&#125;</span><br><span class="line">hello(<span class="string">&quot;hello world&quot;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="const-关键字"><a href="#const-关键字" class="headerlink" title="const 关键字"></a>const 关键字</h1><p><code>const</code> 是 <code>constant</code> ( 常量 ) 的缩写 , <code>const</code> 和 <code>let</code> 一样 , 也是用来声明变量的 , 但是 <code>const</code> 是专门用于声明一个常量的 , 常量的值是不可改变的</p>
<p><strong>const 的特点</strong></p>
<h2 id="声明的常量不可修改"><a href="#声明的常量不可修改" class="headerlink" title="声明的常量不可修改"></a>声明的常量不可修改</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">person = <span class="string">&quot;李四&quot;</span>; <span class="comment">// 报错,不能修改常量</span></span><br></pre></td></tr></table></figure>

<p><strong>如果用 <code>const</code> 声明的是复杂数据类型的变量,只是变量的指针不可修改,指针指向的堆中的内容可以修改</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下面两种情况就可以 , 也不会报错</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">666</span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;tom&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">&#125;;</span><br><span class="line">obj.name = <span class="string">&quot;jerry&quot;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="只在块级作用域起作用-这点与-let-关键字一样"><a href="#只在块级作用域起作用-这点与-let-关键字一样" class="headerlink" title="只在块级作用域起作用,这点与 let 关键字一样"></a>只在块级作用域起作用,这点与 let 关键字一样</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> person = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(person); <span class="comment">// 错误,在代码快 &#123;&#125; 之外, person 失效</span></span><br></pre></td></tr></table></figure>

<h2 id="不存在变量提升-必须先声明后使用-这点也跟-let-关键字一样"><a href="#不存在变量提升-必须先声明后使用-这点也跟-let-关键字一样" class="headerlink" title="不存在变量提升,必须先声明后使用,这点也跟 let 关键字一样"></a>不存在变量提升,必须先声明后使用,这点也跟 let 关键字一样</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(person); <span class="comment">// 错误,使用前未声明</span></span><br><span class="line">  <span class="keyword">const</span> person = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="不可重复声明同一个变量-这点跟-let-也一样"><a href="#不可重复声明同一个变量-这点跟-let-也一样" class="headerlink" title="不可重复声明同一个变量,这点跟 let 也一样"></a>不可重复声明同一个变量,这点跟 let 也一样</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> person = <span class="string">&quot;李四&quot;</span>; <span class="comment">// 错误,声明一个已存在的变量 person</span></span><br></pre></td></tr></table></figure>

<h2 id="声明后必须要赋值"><a href="#声明后必须要赋值" class="headerlink" title="声明后必须要赋值"></a>声明后必须要赋值</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person; <span class="comment">// 错误,声明后没有赋值</span></span><br></pre></td></tr></table></figure>

<h1 id="快速让浏览器兼容-ES6-的方法"><a href="#快速让浏览器兼容-ES6-的方法" class="headerlink" title="快速让浏览器兼容 ES6 的方法"></a>快速让浏览器兼容 ES6 的方法</h1><h2 id="安装-node"><a href="#安装-node" class="headerlink" title="安装 node"></a>安装 node</h2><blockquote>
<h2 id="官网-https-nodejs-org"><a href="#官网-https-nodejs-org" class="headerlink" title="官网 https://nodejs.org/"></a>官网 <a href="https://nodejs.org/">https://nodejs.org/</a></h2><h2 id="中文网-http-nodejs-cn"><a href="#中文网-http-nodejs-cn" class="headerlink" title="中文网 http://nodejs.cn/"></a>中文网 <a href="http://nodejs.cn/">http://nodejs.cn/</a></h2></blockquote>
<p><strong>检测 <code>node</code> 是否安装成功,可查看版本号</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>

<h2 id="安装-babel"><a href="#安装-babel" class="headerlink" title="安装 babel"></a>安装 babel</h2><p><strong>后面的 @5 是版本号,可以不写</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install babel-core@5</span><br></pre></td></tr></table></figure>

<p>安装 <code>babel</code> 成功后 , 当前目录下的 <code>/node_modules/babel-core</code> 里有 <code>babel</code> 的浏览器版本 <code>browser.js</code> ( 未压缩版 ) 和 <code>browser.min.js</code> ( 压缩版 )</p>
<h2 id="使用-babel"><a href="#使用-babel" class="headerlink" title="使用 babel"></a>使用 babel</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;brower.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> name = <span class="string">&quot;张三&quot;</span>; <span class="comment">// 测试 : 使用 ES6 新增关键字 const 来声明变量</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(name);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个时候 IE9 能正常运行 <code>ES6</code> 新特性了 , 也就是 <code>babel</code> 转换起作用了，把 <code>const</code> 转换成 IE9 能执行的代码了</p>
<h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
      <categories>
        <category>js</category>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>javascript</tag>
        <tag>ES6</tag>
        <tag>let</tag>
        <tag>var</tag>
        <tag>const</tag>
        <tag>babel</tag>
        <tag>兼容</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6 新增用法 ( 二 )</title>
    <url>/2021/06/20/js/es6-day02/</url>
    <content><![CDATA[<h1 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="解构赋值-1"><a href="#解构赋值-1" class="headerlink" title="解构赋值"></a>解构赋值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<h3 id="不完全解构"><a href="#不完全解构" class="headerlink" title="不完全解构"></a>不完全解构</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>

<h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, [b, [c, [d, [e, [f]]]]]] = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, [<span class="number">5</span>, [<span class="number">6</span>]]]]]];</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(d); <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(e); <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(f); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>

<h3 id="可以赋默认值"><a href="#可以赋默认值" class="headerlink" title="可以赋默认值"></a>可以赋默认值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b = <span class="number">3</span>] = [<span class="number">1</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="解构赋值-2"><a href="#解构赋值-2" class="headerlink" title="解构赋值"></a>解构赋值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; a, b, c &#125; = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">c</span>: <span class="number">2</span>, <span class="attr">b</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<h3 id="不完全解构-1"><a href="#不完全解构-1" class="headerlink" title="不完全解构"></a>不完全解构</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; a &#125; = &#123; <span class="attr">b</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<h3 id="嵌套-1"><a href="#嵌套-1" class="headerlink" title="嵌套"></a>嵌套</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;</span><br><span class="line">  <span class="attr">a</span>: &#123;</span><br><span class="line">    <span class="attr">b</span>: &#123; c &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125; = &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">1</span> &#125; &#125; &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// a 与 b 只是为了样式一样</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; a, b = <span class="number">1</span> &#125; = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="解构赋值-3"><a href="#解构赋值-3" class="headerlink" title="解构赋值"></a>解构赋值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c, d, e, f] = <span class="string">&quot;pretty&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// p</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// r</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// e</span></span><br><span class="line"><span class="built_in">console</span>.log(d); <span class="comment">// t</span></span><br><span class="line"><span class="built_in">console</span>.log(e); <span class="comment">// t</span></span><br><span class="line"><span class="built_in">console</span>.log(f); <span class="comment">// y</span></span><br></pre></td></tr></table></figure>

<h1 id="结构赋值的用途"><a href="#结构赋值的用途" class="headerlink" title="结构赋值的用途"></a>结构赋值的用途</h1><h2 id="变量交换"><a href="#变量交换" class="headerlink" title="变量交换"></a>变量交换</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">3</span>;</span><br><span class="line">[a, b] = [b, a];</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h2 id="返回多个值"><a href="#返回多个值" class="headerlink" title="返回多个值"></a>返回多个值</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">12</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123; name, age &#125; = demo();</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// 张三</span></span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">// 12</span></span><br></pre></td></tr></table></figure>

<h2 id="定义函数参数"><a href="#定义函数参数" class="headerlink" title="定义函数参数"></a>定义函数参数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo1</span>(<span class="params">&#123; a, b, c &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 李四</span></span><br><span class="line">  <span class="built_in">console</span>.log(b); <span class="comment">// 22</span></span><br><span class="line">  <span class="built_in">console</span>.log(c); <span class="comment">// 175</span></span><br><span class="line">&#125;</span><br><span class="line">demo1(&#123; <span class="attr">a</span>: <span class="string">&quot;李四&quot;</span>, <span class="attr">b</span>: <span class="number">22</span>, <span class="attr">c</span>: <span class="number">175</span> &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="函数参数的默认值"><a href="#函数参数的默认值" class="headerlink" title="函数参数的默认值"></a>函数参数的默认值</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">&#123; name = <span class="string">&quot;张三&quot;</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;</span><br><span class="line">fn1(&#123; <span class="attr">name</span>: <span class="string">&quot;李四&quot;</span> &#125;); <span class="comment">// 李四</span></span><br><span class="line">fn1(&#123;&#125;); <span class="comment">// 张三</span></span><br></pre></td></tr></table></figure>

<h1 id="ES6-中字符串的用法"><a href="#ES6-中字符串的用法" class="headerlink" title="ES6 中字符串的用法"></a>ES6 中字符串的用法</h1><h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><p><strong><code>$&#123;&#125;</code></strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> Person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">22</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">  <span class="attr">hobby</span>: <span class="string">&quot;钓鱼&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`我的名字是<span class="subst">$&#123;Person.name&#125;</span>,今年<span class="subst">$&#123;Person.age&#125;</span>岁了,性别<span class="subst">$&#123;Person.sex&#125;</span>,爱好<span class="subst">$&#123;Person.hobby&#125;</span>`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">// 我的名字是张三,今年22岁了,性别男,爱好钓鱼</span></span><br></pre></td></tr></table></figure>

<h2 id="repeat"><a href="#repeat" class="headerlink" title="repeat( )"></a>repeat( )</h2><p><code>repeat()</code> 函数 : 将目标字符串重复 <code>N</code> 次 , 返回一个新的字符串 , 不影响原字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str1 = <span class="string">&quot;嘿&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> str2 = str1.repeat(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str2); <span class="comment">// 嘿嘿</span></span><br></pre></td></tr></table></figure>

<h2 id="includes"><a href="#includes" class="headerlink" title="includes( )"></a>includes( )</h2><p><code>includes()</code> 函数 : 判断字符串中是否含有指定的子字符串 , 返回 <code>true</code> 表示含有, <code>false</code> 表示未含有。第二个参数选填 , 表示开始搜索的位置 (下标从 <code>0</code> 开始)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;codehhr&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">&quot;c&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">&quot;code&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">&quot;h&quot;</span>, <span class="number">5</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">&quot;h&quot;</span>, <span class="number">6</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h2 id="startsWith"><a href="#startsWith" class="headerlink" title="startsWith( )"></a>startsWith( )</h2><p>判断指定的子字符串是否出现在目标字符串的开头位置 , 第二个参数选填，表示开始搜索的位置 (从下标 <code>0</code> 开始)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;codehhr&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.startsWith(<span class="string">&quot;c&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.startsWith(<span class="string">&quot;code&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.startsWith(<span class="string">&quot;c&quot;</span>, <span class="number">0</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.startsWith(<span class="string">&quot;c&quot;</span>, <span class="number">1</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h2 id="endsWith"><a href="#endsWith" class="headerlink" title="endsWith( )"></a>endsWith( )</h2><p>判断子字符串是否出现在目标字符串的尾部位置 , 第二个参数选填 , 表示从头开始截取的长度</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;codehhr&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.endsWith(<span class="string">&quot;r&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.endsWith(<span class="string">&quot;hr&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.endsWith(<span class="string">&quot;hr&quot;</span>, <span class="number">6</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(str.endsWith(<span class="string">&quot;hr&quot;</span>, <span class="number">7</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="String-raw"><a href="#String-raw" class="headerlink" title="String.raw"></a>String.raw</h2><p>返回未加工的字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 后面跟模板字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.raw<span class="string">`hello\nworld`</span>); <span class="comment">// hello\nworld</span></span><br></pre></td></tr></table></figure>

<h1 id="ES6-中数组的用法"><a href="#ES6-中数组的用法" class="headerlink" title="ES6 中数组的用法"></a>ES6 中数组的用法</h1><h2 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of( )"></a>Array.of( )</h2><p>将一组值 , 转换成数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> newArr = <span class="built_in">Array</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">// [1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>

<h2 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from( )"></a>Array.from( )</h2><p>将类似数组的对象或者可遍历的对象转换成真正的数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(str)); <span class="comment">// [&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;]</span></span><br></pre></td></tr></table></figure>

<h2 id="find"><a href="#find" class="headerlink" title="find( )"></a>find( )</h2><p>找出数组中符合条件的第一个元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>];</span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  arr.find(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">7</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure>

<h2 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex( )"></a>findIndex( )</h2><p>返回符合条件的第一个数组成员的位置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>];</span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  arr.findIndex(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">7</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">); <span class="comment">// 7</span></span><br></pre></td></tr></table></figure>

<h2 id="fill"><a href="#fill" class="headerlink" title="fill( )"></a>fill( )</h2><p>用指定的值 , 填充到数组 , 会更改原数组<br>多个参数时 , 第一个为要填充的内容 , 第二个为起始位置 (下标从 <code>0</code> 开始) , 第三个参数为结束位置 ( 结束位置不填充 )</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr.fill(<span class="number">6</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [6, 6, 6, 6, 6]</span></span><br><span class="line">arr.fill(<span class="number">6</span>, <span class="number">0</span>, <span class="number">2</span>); <span class="comment">// [6, 6, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>

<h2 id="entries"><a href="#entries" class="headerlink" title="entries( )"></a>entries( )</h2><p>对数组的键值对进行遍历 , 返回一个遍历器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [index, value] <span class="keyword">of</span> [<span class="string">&quot;html&quot;</span>, <span class="string">&quot;css&quot;</span>, <span class="string">&quot;js&quot;</span>].entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0 &quot;html&quot;</span></span><br><span class="line"><span class="comment">// 1 &quot;css&quot;</span></span><br><span class="line"><span class="comment">// 2 &quot;js&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="keys"><a href="#keys" class="headerlink" title="keys( )"></a>keys( )</h2><p>对数组的索引键进行遍历 , 返回一个遍历器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">of</span> [<span class="number">1</span>, <span class="number">2</span>].keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h2 id="values"><a href="#values" class="headerlink" title="values"></a>values</h2><p>对数组的元素进行遍历 , 返回一个遍历器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> [<span class="number">1</span>, <span class="number">2</span>].values()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
      <categories>
        <category>js</category>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>javascript</tag>
        <tag>ES6</tag>
        <tag>解构赋值</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6 新增用法 ( 三 )</title>
    <url>/2021/06/23/js/es6-day03/</url>
    <content><![CDATA[<h1 id="ES6-中数值的用法"><a href="#ES6-中数值的用法" class="headerlink" title="ES6 中数值的用法"></a>ES6 中数值的用法</h1><h2 id="isNaN"><a href="#isNaN" class="headerlink" title="isNaN( )"></a>isNaN( )</h2><p><code>isNaN</code> 函数 : 用于判断传入的是否是非数值<br><strong>注意</strong> : 是判断非数值 , 而不是判断数值 , <code>isNaN</code> 的全称是： is not a number</p>
<p><strong>传统写法</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="number">2.5</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="string">&quot;2.5&quot;</span>)); <span class="comment">// false,会隐式类型转化为 Number 类型</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="string">&quot;abc&quot;</span>)); <span class="comment">// true,转换为 Number 后是一个非数值 (NaN)</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">NaN</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><code>isNaN</code> 是全局函数 , 本身就是属于 <code>window</code> 对象下的一个方法 , 在 <code>ES6</code> 的标准中 , <code>isNaN</code> 方法被移植到了 <code>Number</code> 对象上 , 也就是原本属于全局对象 <code>window</code> 下的函数 , 现在属于 <code>Number</code> 对象上了</p>
<p><strong>ES6 用法</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="number">2.5</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="string">&quot;abc&quot;</span>)); <span class="comment">// false,不做类型转换,是字符串,直接返回 false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="string">&quot;2.5&quot;</span>)); <span class="comment">// false,也不会隐式类型转换,即还是字符串,返回 false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="literal">NaN</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="Number-isFinite"><a href="#Number-isFinite" class="headerlink" title="Number.isFinite( )"></a>Number.isFinite( )</h2><p><code>Number.isFinite</code> 函数 : 用来检查一个数值是否非无穷 ( 有穷的 , 有限的 )</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isFinite(<span class="number">10</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isFinite(<span class="string">&quot;10&quot;</span>)); <span class="comment">// false,字符串也会返回 false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isFinite(<span class="literal">Infinity</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h2 id="Number-parseInt"><a href="#Number-parseInt" class="headerlink" title="Number.parseInt( )"></a>Number.parseInt( )</h2><p><code>parseInt</code> 函数 : 解析一个字符串 , 返回一个整数. <code>parseInt</code> 函数同样是从 <code>window</code> 对象下移植到 <code>Number</code> 对象下 , 但是它的作用没有任何变化</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseInt(<span class="number">2.3</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseInt(<span class="number">2.7</span>)); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<h2 id="Number-isInteger"><a href="#Number-isInteger" class="headerlink" title="Number.isInteger( )"></a>Number.isInteger( )</h2><p><code>Number.isInteger</code> 函数 : 用来判断是否是整数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="number">1</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="number">1.0</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="number">1.1</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="string">&quot;1.0&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="string">&quot;1.a&quot;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h2 id="Math-trunc"><a href="#Math-trunc" class="headerlink" title="Math.trunc( )"></a>Math.trunc( )</h2><p><code>Math.trunc</code> 函数 : 用于去除一个数的小数部分 , 返回整数部分。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.trunc(<span class="number">2.1</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.trunc(<span class="number">2.8</span>)); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<h2 id="Math-sign"><a href="#Math-sign" class="headerlink" title="Math.sign( )"></a>Math.sign( )</h2><p><code>Math.sign</code> 函数 : 用来判断一个数到底是正数 , 负数 , 还是零<br>参数如果是正数 , 结果返回 <code>1</code> ; 如果是负数 , 结果返回 <code>-1</code> ; 如果是 0 , 结果返回 <code>0</code> ; 如果是一个非数值类型的参数 , 结果返回 <code>NaN</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.sign(<span class="number">2</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.sign(<span class="number">0</span>)); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.sign(-<span class="number">20</span>)); <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.sign(<span class="string">&quot;-20&quot;</span>)); <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.sign(<span class="string">&quot;asd&quot;</span>)); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure>

<h1 id="ES6-中对象的使用"><a href="#ES6-中对象的使用" class="headerlink" title="ES6 中对象的使用"></a>ES6 中对象的使用</h1><h2 id="对象的写法"><a href="#对象的写法" class="headerlink" title="对象的写法"></a>对象的写法</h2><p><strong>传统写法</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 传统方式</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="comment">// name: name,</span></span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="comment">// age: age,</span></span><br><span class="line">  <span class="attr">say</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>ES6 写法</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> person2 = &#123;</span><br><span class="line">  name,</span><br><span class="line">  age,</span><br><span class="line">  <span class="function"><span class="title">say</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Shit bro ~&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="ES6-中属性名的更新"><a href="#ES6-中属性名的更新" class="headerlink" title="ES6 中属性名的更新"></a>ES6 中属性名的更新</h2><p>用字面量定义一个对象的时候 ,可以用表达式作为对象的属性名或者方法名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> h = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> w = <span class="string">&quot;world&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> f = <span class="string">&quot;first&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> l = <span class="string">&quot;name&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> person3 = &#123;</span><br><span class="line">  [f + l]: <span class="string">&quot;FirstName&quot;</span>,</span><br><span class="line">  [h + w]() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(person3.firstname); <span class="comment">// FirstName</span></span><br><span class="line">person3.helloworld(); <span class="comment">// Hello World</span></span><br></pre></td></tr></table></figure>

<h2 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is( )"></a>Object.is( )</h2><p><code>Object.is</code> 函数的作用 : 比较两个值是否严格相等 , 或者说全等 , 即 <code>===</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ===</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;12&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">12</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str == num); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str === num); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(str, num)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h2 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign( )"></a>Object.assign( )</h2><p><code>Object.assign</code> 函数作用 : 将新对象的属性赋值到原对象上 , 后面的属性值会覆盖前面的属性值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> before = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> after1 = &#123;</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> after2 = &#123;</span><br><span class="line">  <span class="attr">c</span>: <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> after3 = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">22</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">33</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="number">44</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.assign(before, after1, after2, after3);</span><br><span class="line"><span class="built_in">console</span>.log(before); <span class="comment">// &#123;a: 22, b: 33, c: 44&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="Object-getPrototypeOf"><a href="#Object-getPrototypeOf" class="headerlink" title="Object.getPrototypeOf( )"></a>Object.getPrototypeOf( )</h2><p><code>Object.getPrototypeOf</code> 函数作用 : 获取一个对象的 <code>prototype</code> 属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在 prototype 上添加方法</span></span><br><span class="line">Person.prototype.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Awesome man&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 实例一个新对象</span></span><br><span class="line"><span class="keyword">let</span> tom = <span class="keyword">new</span> Person();</span><br><span class="line">tom.say(); <span class="comment">// 成功打印 Awesome man , 添加成功!;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(tom)); <span class="comment">// 打印 prototype 里的内容</span></span><br></pre></td></tr></table></figure>

<h2 id="Object-setPrototypeOf"><a href="#Object-setPrototypeOf" class="headerlink" title="Object.setPrototypeOf( )"></a>Object.setPrototypeOf( )</h2><p><code>Object.setPrototypeOf</code> 函数作用 : 设置一个对象的 <code>prototype</code> 属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.setPrototypeOf(tom, &#123;</span><br><span class="line">  <span class="function"><span class="title">hello</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">tom.hello(); <span class="comment">// Hello</span></span><br></pre></td></tr></table></figure>

<h1 id="ES6-中函数的使用"><a href="#ES6-中函数的使用" class="headerlink" title="ES6 中函数的使用"></a>ES6 中函数的使用</h1><h2 id="参数的默认值"><a href="#参数的默认值" class="headerlink" title="参数的默认值"></a>参数的默认值</h2><p><strong>传统方式</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  name = name || <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">  age = age || <span class="number">20</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ES6 写法</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">name = <span class="string">&quot;张三&quot;</span>, age = <span class="number">20</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果函数有多个参数 , 但只有部分需要指定默认值 , 另一部分不需要的话 , 那么 , 设定默认值的参数一定要放在最后</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 错误示范</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">age = <span class="number">20</span>, name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name, age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 正确写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">name, age = <span class="number">20</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name, age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另外 , 只有当传入的参数为 <code>undefined</code> , 才会触发默认值赋值。否则 , 哪怕你传的参数值为 <code>0</code> , <code>false</code> , <code>null</code> 都不会触发默认值赋值 , 这就完美的解决了传统实现方式的弊端</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params">age = <span class="number">20</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(age);</span><br><span class="line">&#125;</span><br><span class="line">getAge(); <span class="comment">// 20</span></span><br><span class="line">getAge(<span class="literal">undefined</span>); <span class="comment">// 20</span></span><br><span class="line">getAge(<span class="number">0</span>); <span class="comment">// 0</span></span><br><span class="line">getAge(<span class="literal">null</span>); <span class="comment">// null</span></span><br></pre></td></tr></table></figure>

<p>还有一个要注意的地方 , 函数的参数是默认声明的 , 声明过的变量 , 就不能用 <code>let</code> 或者 <code>const</code> 关键字再次声明 , 否则会报错</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> age = <span class="number">20</span>;</span><br><span class="line">  <span class="comment">// 错误 :不能再次声明</span></span><br><span class="line">  <span class="comment">// Uncaught SyntaxError: Identifier &#x27;age&#x27; has already been declared</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="rest-函数"><a href="#rest-函数" class="headerlink" title="rest 函数"></a>rest 函数</h2><p><strong>案例</strong></p>
<p><code>rest</code> 参数 , 它代表的意思是 : 在实参中 , 除了第一个参数以外 , 剩余的参数都会被 <code>...rest</code> 获取到 , 当然 <code>...rest</code> 是形参 , 也可以是别的名字 , 比如 <code>...value</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">result, ...rest</span>) </span>&#123;</span><br><span class="line">  rest.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    result += value;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum(result, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br></pre></td></tr></table></figure>

<p><strong><code>...rest</code> 必须放到参数最后</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 错误示范</span></span><br><span class="line"><span class="comment">// Uncaught SyntaxError: Rest parameter must be last formal parameter</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">...rest,a,b,c</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h2><p>扩展运算符 <code>...</code> 的作用 : 它可以将一个数组转成一个对应的参数数列表</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum(...arr));</span><br></pre></td></tr></table></figure>

<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 传统写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumA</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="comment">// 如果函数题单是返回一个东西 , return 也可以省略</span></span><br><span class="line"><span class="keyword">let</span> sumB = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sumC = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> c = a + b;</span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 传统写法</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">  sum += v;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].forEach(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">  sum += v;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="ES6-新增数据类型-symbol-数据类型"><a href="#ES6-新增数据类型-symbol-数据类型" class="headerlink" title="ES6 新增数据类型 symbol 数据类型"></a>ES6 新增数据类型 symbol 数据类型</h1><p><strong>回顾</strong><br><code>JavaScript</code> 有 6 种数据类型 , 分别是 :<br><code>String</code> 字符串类型;<br><code>Number</code> 数字类型;<br><code>Object</code> 对象类型;<br><code>Boolean</code> 布尔值类型;<br><code>Undefined</code><br><code>Null</code></p>
<p>而 <code>ES6</code> 给我们带来一种全新的数据类型 : <code>Symbol</code> 每一种全新的事物的诞生都是为了解决某种问题 , <code>Symbol</code> 的初衷 : 解决对象的属性名冲突 , <code>Symbol()</code> , <strong>它代表着一个独一无二的值</strong> , 虽然我们看不到它长什么样子 , 但基本上 , 它有点类似字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sm = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="built_in">console</span>.log(sm); <span class="comment">// Symbol()</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> sm); <span class="comment">// symbol</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sm1 = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> sm2 = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="built_in">console</span>.log(sm1); <span class="comment">// Symbol()</span></span><br><span class="line"><span class="built_in">console</span>.log(sm2); <span class="comment">// Symbol()</span></span><br><span class="line"><span class="built_in">console</span>.log(sm1 == sm2); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(sm1 === sm2); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sm3 = <span class="built_in">Symbol</span>(<span class="string">&quot;sm3&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> sm4 = <span class="built_in">Symbol</span>(<span class="string">&quot;sm4&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sm3); <span class="comment">// Symbol(sm3)</span></span><br><span class="line"><span class="built_in">console</span>.log(sm4); <span class="comment">// Symbol(sm4)</span></span><br></pre></td></tr></table></figure>

<p><code>Symbo()</code> 函数接受参数 , 用于对实例值的描述<br><code>symbol</code> 永远都是独一无二的值 , 谨记</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sm5 = <span class="built_in">Symbol</span>(<span class="string">&quot;sm&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> sm6 = <span class="built_in">Symbol</span>(<span class="string">&quot;sm&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sm5 == sm6); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(sm5 === sm6); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>下面 , 我们用两种方式获取 <code>name</code> 的值<br>第一种用中括号的形式 <code>[name]</code> 能正确获取到<br>第二种用点运算符的形式 , 获取失败<br>原因是 : 当 <code>symbol</code> 值作为对象的属性名的时候 , 不能用点运算符获取对应的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  [name]: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(person[name]); <span class="comment">// 张三</span></span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>因为用点运算符的话 , 会导致 <code>javascript</code> 把后面的属性名为理解为一个字符串类型 , 而不是 <code>symbol</code> 类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line">person.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// 张三</span></span><br><span class="line"><span class="built_in">console</span>.log(person[<span class="string">&quot;name&quot;</span>]); <span class="comment">// 张三</span></span><br><span class="line"><span class="built_in">console</span>.log(person[name]); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<h2 id="属性名的遍历"><a href="#属性名的遍历" class="headerlink" title="属性名的遍历"></a>属性名的遍历</h2><p>当 <code>symbol</code> 类型的值作为属性名的时候 , 该属性是不会出现在 <code>for...in</code> 和 <code>for...of</code> 中的<br>也不会被 <code>Object.keys()</code> 获取到</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 属性名的遍历</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  [name]: <span class="string">&quot;张三&quot;</span>, <span class="comment">// Symbol 类型</span></span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>, <span class="comment">// String 类型</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(person); <span class="comment">// [&quot;age&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> person) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 结果: [age];</span></span><br></pre></td></tr></table></figure>

<h2 id="Object-getOwnPropertySymbols"><a href="#Object-getOwnPropertySymbols" class="headerlink" title="Object.getOwnPropertySymbols( )"></a>Object.getOwnPropertySymbols( )</h2><p><code>Object.getOwnPropertySymbols()</code> 方法 , 它会找到 <code>symbol</code> 类型的属性并且返回一个数组 , 数组的成员就是 <code>symbol</code> 类型的属性值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="built_in">Symbol</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> age = <span class="built_in">Symbol</span>(<span class="string">&quot;age&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  [name]: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  [age]: <span class="number">22</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&quot;man&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertySymbols(person);</span><br><span class="line"><span class="comment">// 结果: [Symbol(name),Symbol[age]]</span></span><br></pre></td></tr></table></figure>

<h2 id="Reflect-ownKeys"><a href="#Reflect-ownKeys" class="headerlink" title="Reflect.ownKeys( )"></a>Reflect.ownKeys( )</h2><p>由于获取字符串类型的属性和获取 <code>symbol</code> 类型的属性要分开两种不同的方式来获取 , 难免有有时候会很不方便<br>我们可以用 <code>Reflect.ownKeys()</code> 方法一次性获取所有类型的属性 , 不管它是字符串类型还是 <code>symbol</code> 类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Reflect</span>.ownKeys(person));</span><br></pre></td></tr></table></figure>

<h2 id="Symbol-for"><a href="#Symbol-for" class="headerlink" title="Symbol.for( )"></a>Symbol.for( )</h2><p><code>Symbol.for()</code> 函数作用 : 根据参数名 , 去<strong>全局环境</strong>中搜索是否有以该 <code>symbol.for()</code> 参数为名的 <code>symbol</code> 值<br>有就返回它 , 没有就以该参数名来创建一个新的 <code>symbol</code> 值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> n1 = <span class="built_in">Symbol</span>.for(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> n2 = <span class="built_in">Symbol</span>.for(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(n1 === n2); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="Symbol-keyFor"><a href="#Symbol-keyFor" class="headerlink" title="Symbol.keyFor( )"></a>Symbol.keyFor( )</h2><p><code>Symbol.keyFor()</code> 函数作用 : 返回一个以被登记在全局环境中的 <code>symbol</code> 值的 <code>key</code> , 没有就返回 <code>undefined</code><br>注意这句话的一个关键词 : <strong>“被登记在全局环境中”</strong><br>也就是说这个 <code>symbol</code> 值是被 <code>Symbol.for()</code> 创建的 , 不是被 <code>Symbol()</code> 创建的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> n1 = <span class="built_in">Symbol</span>(<span class="string">&quot;name&quot;</span>); <span class="comment">// 此时 n1 是创建在 Symbol 类型下的变量,并非全局</span></span><br><span class="line"><span class="keyword">let</span> n2 = <span class="built_in">Symbol</span>.for(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(n1 === n2); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> n1 = <span class="built_in">Symbol</span>.for(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>.keyFor(n1)); <span class="comment">// name</span></span><br></pre></td></tr></table></figure>

<h1 id="Proxy-的实现"><a href="#Proxy-的实现" class="headerlink" title="Proxy 的实现"></a>Proxy 的实现</h1><h2 id="proxy-的实现"><a href="#proxy-的实现" class="headerlink" title="proxy 的实现"></a>proxy 的实现</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// proxy</span></span><br><span class="line"><span class="keyword">let</span> personB = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> pro = <span class="keyword">new</span> <span class="built_in">Proxy</span>(personB, &#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params">target, property</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">target, property, value</span>)</span> &#123;</span><br><span class="line">    target[property] = value;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">ownKeys</span>(<span class="params">target</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&quot;name&quot;</span>];</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">has</span>(<span class="params">target, property</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (target[property] == <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(pro.target); <span class="comment">// &#123;name: &quot;张三&quot;, age: 20&#125;</span></span><br><span class="line">pro.name = <span class="string">&quot;王五&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(pro.target); <span class="comment">// &#123;name: &quot;王五&quot;, age: 20&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(personB)); <span class="comment">// [&quot;name&quot;, &quot;age&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(pro)); <span class="comment">// [&quot;name&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;name&quot;</span> <span class="keyword">in</span> pro); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;cname&quot;</span> <span class="keyword">in</span> pro); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h2 id="apply"><a href="#apply" class="headerlink" title="apply( )"></a>apply( )</h2><p>除了对象类型的变量可以被代理 , 函数也可以被代理<br>如果被代理的变量是一个函数 , 那么还会支持一个拦截程序 : <code>apply</code> 调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;func&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(func, &#123;</span><br><span class="line">  <span class="function"><span class="title">apply</span>(<span class="params">target, property, value</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`today is <span class="subst">$&#123;value&#125;</span>`</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(proxy(<span class="string">&quot;Saturday&quot;</span>));</span><br></pre></td></tr></table></figure>

<h2 id="proxy-revocable"><a href="#proxy-revocable" class="headerlink" title="proxy.revocable( )"></a>proxy.revocable( )</h2><p>如果创建了代理之后又想取消代理的话 , 我们可以用 <code>Proxy.revocable()</code>( 可废止的 , 可撤回的 ) 函数来实现<br>它会返回一个对象 , 对象中含有一个 <code>proxy</code> 属性 , 它就是 <code>Proxy</code> 的代理实例对象<br>还有一个 <code>revoke</code> 属性 , 它是一个方法 , 用于取消代理。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> personC = &#123; <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> handle = &#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params">target, property</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;李四&quot;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> obj = <span class="built_in">Proxy</span>.revocable(proxy, handle);</span><br><span class="line"><span class="built_in">console</span>.log(obj.proxy.name); <span class="comment">// 李四</span></span><br><span class="line">obj.revoke();</span><br><span class="line"><span class="built_in">console</span>.log(obj.proxy.name); <span class="comment">// Uncaught TypeError: Cannot perform &#x27;get&#x27; on a proxy that has been revoked</span></span><br></pre></td></tr></table></figure>

<h1 id="for…of-使用"><a href="#for…of-使用" class="headerlink" title="for…of 使用"></a>for…of 使用</h1><p><strong>for…of 的优势</strong> :</p>
<ol>
<li>写法比 <code>for</code> 循环简洁很多</li>
<li>可以用 <code>break</code> 来终止整个循环 , 或者 <code>continute</code> 来跳出当前循环 , 继续后面的循环<br>结合 <code>keys()</code> 获取到循环的索引 , 并且是数字类型 , 而不是字符串类型</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arrA = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> arrA) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> arrA) &#123;</span><br><span class="line">  <span class="keyword">if</span> (value &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> arrA) &#123;</span><br><span class="line">  <span class="keyword">if</span> (value &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
      <categories>
        <category>js</category>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>javascript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6 新增用法 ( 四 )</title>
    <url>/2021/06/24/js/es6-day04/</url>
    <content><![CDATA[<h1 id="Iterator-遍历器"><a href="#Iterator-遍历器" class="headerlink" title="Iterator 遍历器"></a>Iterator 遍历器</h1><h2 id="for…of-为什么不遍历-object-对象"><a href="#for…of-为什么不遍历-object-对象" class="headerlink" title="for…of 为什么不遍历 object 对象"></a>for…of 为什么不遍历 object 对象</h2><p>要想能够被 <code>for...of</code> 正常遍历的 , 都需要实现一个遍历器 <code>Iterator</code> , 而数组 , <code>Set</code> 和 <code>Map</code> 结构 , 早就内置好了遍历器 <code>Iterator</code> ( 又叫迭代器 ) , 它们的原型中都有一个 <code>Symbol.iterator</code> 方法 : 而 <code>Object</code> 对象并没有实现这个接口 , 使得它无法被 <code>for...of</code> 遍历</p>
<p>验证一下 , 它们的原型中到底是不是有个叫 <code>Symbol.iterator</code> 的方法:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.prototype[<span class="built_in">Symbol</span>.iterator]); <span class="comment">//结果 : function values()&#123;...&#125;</span></span><br><span class="line"><span class="comment">//字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.prototype[<span class="built_in">Symbol</span>.iterator]); <span class="comment">//结果 : function [Symbol.iterator]()&#123;...&#125;</span></span><br><span class="line"><span class="comment">//Set结构</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Set</span>.prototype[<span class="built_in">Symbol</span>.iterator]); <span class="comment">//结果 : function values()&#123;...&#125;</span></span><br><span class="line"><span class="comment">//Map结构</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>.prototype[<span class="built_in">Symbol</span>.iterator]); <span class="comment">//结果 : function entries()&#123;...&#125;</span></span><br><span class="line"><span class="comment">//Object对象</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype[<span class="built_in">Symbol</span>.iterator]); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>唯独 <code>Object</code> 对象的原型上没有 <code>Symbol.iterator</code> , 返回了 : <code>undefined</code> , 其他的数据类型的原型上都含有一个名字叫 <code>Symbol.iterator</code> 的方法</p>
<p><strong>注意</strong> : <code>Symbol.iterator</code> 是 <code>Symbol</code> 对象的 <code>iterator</code> 属性 , 是一个特殊的 <code>Symbol</code> 值 , 因此 , 当它作为 <code>prototype</code> 对象属性名的时候 , 获取它的时候需要使用 <code>[]</code> 的形式: <code>prototype[Symbol.iterator]</code> , 不能使用点形式获取 : prototype.Symbol.iterator<br>也就说 , 只要一个数据结构拥有一个叫 <code>[Symbol.iterator]()</code> 方法的数据结构 , 就可以被 <code>for...of</code> 遍历</p>
<h2 id="Iterator-原理"><a href="#Iterator-原理" class="headerlink" title="Iterator 原理"></a>Iterator 原理</h2><p>当可遍历对象被 <code>for...of</code> 遍历的时候 , <code>[Symbol.iterator]()</code> 就会被调用 , 返回一个 <code>iterator</code> 对象 , <code>iterator</code> 对象里有一个很重要的方法 : <code>next()</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> iterator = arr[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"><span class="built_in">console</span>.log(iterator); <span class="comment">// Array Iterator &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()); <span class="comment">// &#123;value: &quot;a&quot;, done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()); <span class="comment">// &#123;value: &quot;b&quot;, done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()); <span class="comment">// &#123;value: &quot;c&quot;, done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()); <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>

<p>第 1 次调用 <code>next()</code> 方法 : 返回数组的第 1 个元素 : “a” , 以及 <code>done</code> 的值为 <code>fasle</code> , 表示循环没有结束 , 继续遍历<br>第 2 次调用 <code>next()</code> 方法 : 返回数组的第 2 个元素 : “b” , 以及 <code>done</code> 的值还是为 <code>fasle</code> , 表示循环没有结束 , 继续遍历<br>第 3 次调用 <code>next()</code> 方法 : 返回数组的第 3 个元素 : “c” , 以及 <code>done</code> 的值依然为 <code>fasle</code> , 表示循环没有结束 , 继续遍历<br>第 4 次调用 <code>next()</code> 方法 : 返回的 value 值为 undefined , 以及 <code>done</code> 的值变成了 <code>true</code> , 表示遍历结束</p>
<p><code>for...of</code> 的原理就是 : 先调用可遍历对象的 <code>[Symbol.iterator]()</code> 方法 , 得到一个 <code>iterator</code> 遍历器对象 , 然后就在遍历器上不断调用 <code>next()</code> 方法 , 直到 <code>done</code> 的值为 <code>true</code> 的时候 , 就表示遍历完成结束了</p>
<h2 id="自定义-Iterator-遍历器"><a href="#自定义-Iterator-遍历器" class="headerlink" title="自定义 Iterator 遍历器"></a>自定义 Iterator 遍历器</h2><p>给一个 <code>Object</code> 对象加一个 <code>[Symbol.iterator]()</code> 方法 , 看看它是不是就能被 <code>for...of</code> 遍历了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义 [Symbol.iterator] 迭代器</span></span><br><span class="line">obj[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获取到对象的每个 key 值返回一个数组</span></span><br><span class="line">  <span class="keyword">let</span> keys = <span class="built_in">Object</span>.keys(obj);</span><br><span class="line">  <span class="comment">// 获取到 key 值 ( 对象 ) 的长度</span></span><br><span class="line">  <span class="keyword">let</span> length = keys.length;</span><br><span class="line">  <span class="comment">// 定义循环变量</span></span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 返回对象:每次迭代会自动调用返回对象里面的 next() 方法</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">next</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 返回值有 value 和 done</span></span><br><span class="line">      <span class="comment">// value 能自定义</span></span><br><span class="line">      <span class="comment">// done为 true 时跳出循环</span></span><br><span class="line">      <span class="keyword">return</span> index &lt; length</span><br><span class="line">        ? &#123;</span><br><span class="line">            <span class="attr">value</span>: &#123; <span class="attr">k</span>: keys[index], <span class="attr">v</span>: obj[keys[index++]] &#125;,</span><br><span class="line">            <span class="attr">done</span>: <span class="literal">false</span>,</span><br><span class="line">          &#125;</span><br><span class="line">        : &#123;</span><br><span class="line">            <span class="attr">done</span>: <span class="literal">true</span>,</span><br><span class="line">          &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>现在用 for…of 试一下能不能遍历此对象</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> &#123; k, v &#125; <span class="keyword">of</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(k, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印结果:</span></span><br><span class="line"><span class="comment">//  name 张三</span></span><br><span class="line"><span class="comment">//  age 20</span></span><br></pre></td></tr></table></figure>

<p>我们定义了一个 <code>Object</code> 对象 , 同时给它添加了 <code>[Symbol.iterator]()</code> 方法 , 并在 <code>[Symbol.iterator]()</code> 方法返回的对象里实现了 <code>next()</code>方法 , <code>next()</code> 方法返回的对象包含了 <code>value</code> 属性和 <code>done</code> 属性</p>
<p>也就是说可以通过添加 <code>[Symbol.iterator]()</code> 方法 , 把一个不可遍历的 <code>Object</code> 对象 , 变成可遍历的对象</p>
<h1 id="Generator-函数"><a href="#Generator-函数" class="headerlink" title="Generator 函数"></a>Generator 函数</h1><h2 id="声明-Generator-函数"><a href="#声明-Generator-函数" class="headerlink" title="声明 Generator 函数"></a>声明 Generator 函数</h2><p><code>Generator</code> 函数 , 又称生成器函数 , 是 <code>ES6</code> 的一个重要的新特性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明一个 hello 的 Generator 函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">hello</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">`hello <span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">`bye`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="调用-Generator-函数"><a href="#调用-Generator-函数" class="headerlink" title="调用 Generator 函数"></a>调用 Generator 函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明一个 hello 的 Generator 函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">hello</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">`hello <span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">`bye`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 hello 函数</span></span><br><span class="line"><span class="keyword">let</span> ite = hello(<span class="string">&quot;前端君&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ite.next()); <span class="comment">// &#123;value: &quot;hello 前端君&quot;, done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(ite.next()); <span class="comment">// &#123;value: &quot;bye&quot;, done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(ite.next()); <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>

<p>一开始 , 调用 <code>hello(&quot;前端君&quot;)</code> , 函数执行后 , 返回了一个 : <code>[object Genrator]</code> 生成器对象 , 这里生成器的 <code>next()</code> 方法的和遍历器 <code>iterator</code> 的 <code>next()</code> 方法的返回结果很像<br>可以把 <code>Generator</code> 函数被调用后得到的生成器理解成一个遍历器 <code>iterator</code> , 用于遍历函数内部的状态</p>
<h2 id="Generator-函数的行为"><a href="#Generator-函数的行为" class="headerlink" title="Generator 函数的行为"></a>Generator 函数的行为</h2><p><code>Generator</code> 函数被调用后并不会一直执行到最后 , 它是先回返回一个生成器对象 , 然后暂停 , 等到生成器对象的 <code>next()</code> 方法被调用后 , 函数才会继续执行 , 直到遇到关键字 <code>yield</code> 后 , 又会停止执行 , 并返回一个 <code>Object</code> 对象 , 然后继续等待 , 直到 <code>next()</code> 再一次被调用的时候 , 才会继续接着往下执行 , 直到 <code>done</code> 的值为 <code>true</code></p>
<h2 id="yield-语句的使用"><a href="#yield-语句的使用" class="headerlink" title="yield 语句的使用"></a>yield 语句的使用</h2><p><code>yield</code> 有点像传统函数的 <code>return</code> 的作用 , 但不同的是普通函数只能 <code>return</code> 一次 , 但是 <code>Generator</code> 函数可以有很多个 <code>yield</code> , 而 <code>return</code> 代表的是终止执行 , <code>yield</code> 代表的是暂停执行 , 后续通过调用生成器的 <code>next()</code> 方法 , 可以恢复执行</p>
<h2 id="next-方法接收参数"><a href="#next-方法接收参数" class="headerlink" title="next 方法接收参数"></a>next 方法接收参数</h2><p><code>next()</code> 方法还可以接受一个参数 , 它的参数会作为上一个 <code>yield</code> 的返回值</p>
<p><strong>案例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> params = <span class="keyword">yield</span> <span class="number">2</span>; <span class="comment">// params =  3</span></span><br><span class="line">  <span class="keyword">let</span> params1 = <span class="keyword">yield</span> <span class="number">3</span>; <span class="comment">// params1= 1</span></span><br><span class="line">  <span class="keyword">let</span> params2 = <span class="keyword">yield</span> params1 + <span class="number">6</span>; <span class="comment">// params2 = 7</span></span><br><span class="line">  <span class="keyword">let</span> params3 = <span class="keyword">yield</span> <span class="number">7</span>; <span class="comment">// params3 = 4</span></span><br><span class="line">  <span class="keyword">return</span> params2 * params + params3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> lt = gen();</span><br><span class="line"><span class="built_in">console</span>.log(lt.next()); <span class="comment">// &#123; value: 2, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(lt.next(<span class="number">3</span>)); <span class="comment">// &#123; value: 3, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(lt.next(lt.next(<span class="number">1</span>).value)); <span class="comment">// &#123; value: 7, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(lt.next(<span class="number">4</span>)); <span class="comment">// &#123; value: 25, done: true &#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="关键字-yield"><a href="#关键字-yield" class="headerlink" title="关键字 yield*"></a>关键字 yield*</h2><p>在一个 <code>Generator</code> 函数里面 , 如果我们想调用另一个 <code>Generator</code> 函数 , 就需要用到的关键字是 : yield*</p>
<p><strong>案例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明 Generator 函数 : gen1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&quot;gen1 start&quot;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&quot;gen1 end&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 声明 Generator 函数 : gen2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&quot;gen2 start&quot;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&quot;gen2 end&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明 Generator 函数 : start</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">start</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&quot;start&quot;</span>;</span><br><span class="line">  <span class="keyword">yield</span>* gen1();</span><br><span class="line">  <span class="keyword">yield</span>* gen2();</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&quot;end&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 start 函数</span></span><br><span class="line"><span class="keyword">var</span> ite = start(); <span class="comment">// 创建一个生成器</span></span><br><span class="line">ite.next(); <span class="comment">// &#123;value: &quot;start&quot;, done: false&#125;</span></span><br><span class="line">ite.next(); <span class="comment">// &#123;value: &quot;gen1 start&quot;, done: false&#125;</span></span><br><span class="line">ite.next(); <span class="comment">// &#123;value: &quot;gen1 end&quot;, done: false&#125;</span></span><br><span class="line">ite.next(); <span class="comment">// &#123;value: &quot;gen2 start&quot;, done: false&#125;</span></span><br><span class="line">ite.next(); <span class="comment">// &#123;value: &quot;gen2 end&quot;, done: false&#125;</span></span><br><span class="line">ite.next(); <span class="comment">// &#123;value: &quot;end&quot;, done: false&#125;</span></span><br><span class="line">ite.next(); <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="Generator-函数的用途"><a href="#Generator-函数的用途" class="headerlink" title="Generator 函数的用途"></a>Generator 函数的用途</h2><p>是 <code>ES6</code> 的一个很重要的新特性 , 它可以控制函数的内部状态 , 依次遍历每个状态 ; 可以根据需要 , 轻松地让函数暂停执行或者继续执行 , 根据这个特点 , 我们可以利用 <code>Generator</code> 函数来实现异步操作的效果</p>
<h1 id="Set-和-WeakSet-用法"><a href="#Set-和-WeakSet-用法" class="headerlink" title="Set 和 WeakSet 用法"></a>Set 和 WeakSet 用法</h1><h2 id="什么是-Set"><a href="#什么是-Set" class="headerlink" title="什么是 Set"></a>什么是 Set</h2><p><code>Set</code> 是 <code>ES6</code> 给开发者带来的一种新的数据结构 , 你可以理解为值的集合 , 我们平时见到的数组 <code>Array</code> 也是一种数据结构 , 但是 <code>Set</code> 跟其他数据结构不同的地方就在于 : 它的值不会有重复项</p>
<h2 id="Set-的基本用法"><a href="#Set-的基本用法" class="headerlink" title="Set 的基本用法"></a>Set 的基本用法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> set1 = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"><span class="built_in">console</span>.log(set1); <span class="comment">// Set(0) &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> set2 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(set2); <span class="comment">// Set(3) &#123;1, 2, 3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> set3 = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">set3.add(<span class="number">4</span>);</span><br><span class="line">set3.add(<span class="number">5</span>);</span><br><span class="line">set3.add(<span class="number">6</span>);</span><br><span class="line"><span class="built_in">console</span>.log(set3); <span class="comment">// Set(3) &#123;4, 5, 6&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="Set-成员值唯一"><a href="#Set-成员值唯一" class="headerlink" title="Set 成员值唯一"></a>Set 成员值唯一</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">set.add(<span class="number">1</span>);</span><br><span class="line">set.add(<span class="number">1</span>);</span><br><span class="line">set.add(<span class="number">2</span>);</span><br><span class="line">set.add(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(set); <span class="comment">// Set(2) &#123;1, 2&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="size-属性"><a href="#size-属性" class="headerlink" title="size 属性"></a>size 属性</h2><p><code>size</code> 属性 : 获取成员的个数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(set); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>

<h2 id="delete"><a href="#delete" class="headerlink" title="delete( )"></a>delete( )</h2><p><code>delete()</code> 方法 : 用户删除 <code>Set</code> 结构中的指定值 , 删除成功返回 : <code>true</code> , 删除失败返回 : <code>fasle</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(set); <span class="comment">// Set(4) &#123;5, 6, 7, 8&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(set.delete(<span class="number">8</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(set.delete(<span class="number">8</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(set); <span class="comment">// Set(3) &#123;5, 6, 7&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="clear"><a href="#clear" class="headerlink" title="clear( )"></a>clear( )</h2><p><code>clear()</code> 方法 : 清除所有成员 , 一个不留</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(set); <span class="comment">// Set(4) &#123;5, 6, 7, 8&#125;</span></span><br><span class="line">set.clear();</span><br><span class="line"><span class="built_in">console</span>.log(set); <span class="comment">// Set(0) &#123;&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="has"><a href="#has" class="headerlink" title="has( )"></a>has( )</h2><p><code>has()</code> 方法 : 判断 <code>set</code> 结构中是否含有指定的值 , 如果有 , 返回 <code>true</code> , 如果没有 , 返回 <code>fasle</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(set.has(<span class="number">1</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(set.has(<span class="number">6</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h2 id="entries"><a href="#entries" class="headerlink" title="entries( )"></a>entries( )</h2><p><code>entries()</code> 方法 : 返回一个键值对的遍历器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(set.entries()); <span class="comment">// SetIterator &#123;&quot;a&quot; =&gt; &quot;a&quot;, &quot;b&quot; =&gt; &quot;b&quot;, &quot;c&quot; =&gt; &quot;c&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<p>注意得到的结果 , 成员值 <code>a</code> 对应的键值对是 <code>[&quot;a&quot;,&quot;a&quot;]</code> , 也就是说 : <code>Set</code> 结构是键名和键值是同一个值</p>
<h2 id="keys-和-values"><a href="#keys-和-values" class="headerlink" title="keys( ) 和 values( )"></a>keys( ) 和 values( )</h2><p><code>keys()</code> 方法 : 返回键名的遍历器<br><code>values()</code> 方法 : 返回键值的遍历器</p>
<h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach( )"></a>forEach( )</h2><p>使用方式跟数组的 <code>forEach</code> 一样 , 当然 , 得到的 <code>value</code> 是 <code>key</code> 的值是一样的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>]);</span><br><span class="line"><span class="comment">// 使用回调函数遍历每个成员</span></span><br><span class="line">set.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value, key</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value, key);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 打印结果</span></span><br><span class="line"><span class="comment">// a a</span></span><br><span class="line"><span class="comment">// b b</span></span><br><span class="line"><span class="comment">// c c</span></span><br></pre></td></tr></table></figure>

<h2 id="set-用途之一"><a href="#set-用途之一" class="headerlink" title="set 用途之一"></a>set 用途之一</h2><p><strong>数组去重</strong> , 顺便我们把它封装成一个函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组去重</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deduplication</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(deduplication(arr));</span><br></pre></td></tr></table></figure>

<h2 id="Weakset-结构"><a href="#Weakset-结构" class="headerlink" title="Weakset 结构"></a>Weakset 结构</h2><p><code>WeakSet</code> 结构同样不会存储重复的值 , 不同的是 , 它的成员必须是对象类型的值 , 否则就会报错</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ws = <span class="keyword">new</span> <span class="built_in">WeakSet</span>([&#123; <span class="attr">age</span>: <span class="number">18</span> &#125;]);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 错误示范</span></span><br><span class="line"><span class="keyword">let</span> ws = <span class="keyword">new</span> <span class="built_in">WeakSet</span>([<span class="number">1</span>, <span class="number">2</span>]);</span><br></pre></td></tr></table></figure>

<p>实际上 , 任何可遍历的对象 , 都可以作为 <code>WeakSet</code> 的初始化参数 , 比如 : <strong>数组</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">2</span>];</span><br><span class="line"><span class="comment">// 初始化一个 WeakSet 对象,参数是 数组 类型</span></span><br><span class="line"><span class="keyword">let</span> ws = <span class="keyword">new</span> <span class="built_in">WeakSet</span>([arr1, arr2]); <span class="comment">//结果 : WeakSet &#123;Object &#123;age: 18&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p>同样 , <code>WeakSet</code> 结构也提供了 <code>add()</code> 方法 , <code>delete()</code> 方法 , <code>has()</code> 方法给开发者使用 , 作用与用法跟 <code>Set</code> 结构完全一致</p>
<p>另一个不同点是 : <code>WeakSet</code> 结构不可遍历 , 因为它的成员都是对象的弱引用 , 随时被回收机制回收 , 成员消失 , 所以 WeakSet 结构不会有 <code>keys()</code> , <code>values()</code> , <code>entries()</code> , <code>forEach()</code> 等方法和 <code>size</code> 属性</p>
<h1 id="Map-和-WeakMap"><a href="#Map-和-WeakMap" class="headerlink" title="Map 和 WeakMap"></a>Map 和 WeakMap</h1><h2 id="什么是-Map"><a href="#什么是-Map" class="headerlink" title="什么是 Map"></a>什么是 Map</h2><p><code>ES6</code> 提供了 <code>Map</code> 结构给我们使用 , 它跟 <code>Object</code> 对象很像 , 但是不同的是 , 它的 <code>key</code> 键名的类型不再局限于字符串类型了 , 它可以是各种类型的值 ; 可以说 , 它比 <code>Object</code> 对象更加灵活了 , 当然 , 也更加复杂了。</p>
<h2 id="Map-的基本用法"><a href="#Map-的基本用法" class="headerlink" title="Map 的基本用法"></a>Map 的基本用法</h2><p>跟 <code>Set</code> 类似</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map1 = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="built_in">console</span>.log(map1); <span class="comment">// Map(0) &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> map2 = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;前端君&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;gender&quot;</span>, <span class="number">1</span>],</span><br><span class="line">]);</span><br><span class="line"><span class="built_in">console</span>.log(map2); <span class="comment">// Map(2) &#123;&quot;name&quot; =&gt; &quot;前端君&quot;, &quot;gender&quot; =&gt; 1&#125;</span></span><br></pre></td></tr></table></figure>

<p><code>Map()</code> 方法里面的参数 , 首先它是一个数组 , 而里面的内容也是由多个数组组成 , <code>&quot;name&quot;</code> : <code>&quot;前端君&quot;</code> 作为一个键值对 , 将它们装在一个数组里面 , <code>[&quot;name&quot;,&quot;前端君&quot;]</code> , 另外一组键值对也一样 : <code>[&quot;gender&quot;,1]</code> 这就是初始化一个 <code>Map</code> 结构实例的基本写法</p>
<h2 id="set"><a href="#set" class="headerlink" title="set( )"></a>set( )</h2><p><code>set()</code> 方法作用 : 给实例设置一对键值对 , 返回 <code>map</code> 实例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="comment">// 添加一个 string 类型的键名</span></span><br><span class="line">map.set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;前端君&quot;</span>);</span><br><span class="line"><span class="comment">// 添加一个数字类型的键名</span></span><br><span class="line">map.set(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(map); <span class="comment">// Map(2) &#123;&quot;name&quot; =&gt; &quot;前端君&quot;, 1 =&gt; 2&#125;</span></span><br></pre></td></tr></table></figure>

<p><code>Map</code> 结构可以存储非字符串类型的键名 , 当然还可以设置更多其它类型的键名 , 比如更过分点的 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组类型的键名</span></span><br><span class="line">map.set([<span class="number">1</span>], <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 对象类型的键名</span></span><br><span class="line">map.set(&#123; <span class="attr">name</span>: <span class="string">&quot;Zhangsan&quot;</span> &#125;, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 布尔类型的键名</span></span><br><span class="line">map.set(<span class="literal">true</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// Symbol 类型的键名</span></span><br><span class="line">map.set(<span class="built_in">Symbol</span>(<span class="string">&quot;name&quot;</span>), <span class="number">2</span>);</span><br><span class="line"><span class="comment">// null 为键名</span></span><br><span class="line">map.set(<span class="literal">null</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// undefined 为键名</span></span><br><span class="line">map.set(<span class="literal">undefined</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p>使用 <code>set</code> 方法的时候有一点需要注意 , 如果你设置一个已经存在的键名 , 那么后面的键值会覆盖前面的键值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;前端君&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(map); <span class="comment">// 结果 : Map(1) &#123;&quot;name&quot; =&gt; &quot;前端君&quot;&#125;</span></span><br><span class="line"><span class="comment">// 再次设置 name 的值</span></span><br><span class="line">map.set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;隔壁老王&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(map); <span class="comment">// 结果 : Map(1) &#123;&quot;name&quot; =&gt; &quot;隔壁老王&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="get"><a href="#get" class="headerlink" title="get( )"></a>get( )</h2><p><code>get()</code> 方法作用 : 获取指定键名的键值 , 返回键值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;前端君&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;age&quot;</span>, <span class="number">20</span>],</span><br><span class="line">]);</span><br><span class="line"><span class="built_in">console</span>.log(map.get(<span class="string">&quot;name&quot;</span>)); <span class="comment">// 前端君</span></span><br><span class="line"><span class="built_in">console</span>.log(map.get(<span class="string">&quot;age&quot;</span>)); <span class="comment">// 20</span></span><br><span class="line"><span class="built_in">console</span>.log(map.get(<span class="string">&quot;gender&quot;</span>)); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<h2 id="delete-1"><a href="#delete-1" class="headerlink" title="delete( )"></a>delete( )</h2><p><code>delete()</code> 方法作用 : 删除指定的键值对 , 删除成功返回 : <code>true</code> , 否则返回 : <code>false</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;前端君&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(map); <span class="comment">// Map(1) &#123;&quot;name&quot; =&gt; &quot;前端君&quot;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(map.delete(<span class="string">&quot;name&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(map.delete(<span class="string">&quot;name&quot;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h2 id="clear-1"><a href="#clear-1" class="headerlink" title="clear( )"></a>clear( )</h2><p>跟 <code>Set</code> 结构一样 , <code>Map</code> 结构也提供了 <code>clear()</code> 方法 , 让你一次性删除所有键值对</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;前端君&quot;</span>);</span><br><span class="line">map.set(<span class="string">&quot;gender&quot;</span>, <span class="number">1</span>);</span><br><span class="line">map.clear();</span><br><span class="line"><span class="built_in">console</span>.log(map); <span class="comment">// Map(0) &#123;&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="has-1"><a href="#has-1" class="headerlink" title="has( )"></a>has( )</h2><p><code>has()</code> 方法作用 : 判断 <code>Map</code> 实例内是否含有指定的键值对 , 有就返回 : <code>true</code> , 否则返回 : <code>false</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;前端君&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(map.has(<span class="string">&quot;name&quot;</span>)); <span class="comment">// 结果 : true</span></span><br><span class="line"><span class="built_in">console</span>.log(map.has(<span class="string">&quot;age&quot;</span>)); <span class="comment">// 结果 : false</span></span><br></pre></td></tr></table></figure>

<h2 id="entries-1"><a href="#entries-1" class="headerlink" title="entries()"></a>entries()</h2><p><code>entries()</code> 方法作用 : 返回实例的键值对遍历器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;前端君&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;age&quot;</span>, <span class="number">25</span>],</span><br><span class="line">]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map.entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key + <span class="string">&quot;  &quot;</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印结果</span></span><br><span class="line"><span class="comment">//  name  前端君</span></span><br><span class="line"><span class="comment">//  age  25</span></span><br></pre></td></tr></table></figure>

<h2 id="keys-和-values-1"><a href="#keys-和-values-1" class="headerlink" title="keys( ) 和 values( )"></a>keys( ) 和 values( )</h2><p><code>keys()</code> 方法 : 返回实例所有键名的遍历器<br><code>values()</code> 方法 : 返回实例所有键值的遍历器</p>
<h2 id="forEach-1"><a href="#forEach-1" class="headerlink" title="forEach( )"></a>forEach( )</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;前端君&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;age&quot;</span>, <span class="number">25</span>],</span><br><span class="line">]);</span><br><span class="line">map.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value, key</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key + <span class="string">&quot; &quot;</span> + value);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 打印结果</span></span><br><span class="line"><span class="comment">//  name 前端君</span></span><br><span class="line"><span class="comment">//  age 25</span></span><br></pre></td></tr></table></figure>

<h2 id="size-属性-1"><a href="#size-属性-1" class="headerlink" title="size 属性"></a>size 属性</h2><p>获取实例的成员数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">map.set(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(map.size); <span class="comment">// 结果: 2</span></span><br></pre></td></tr></table></figure>

<h2 id="什么是-WeakMap"><a href="#什么是-WeakMap" class="headerlink" title="什么是 WeakMap"></a>什么是 WeakMap</h2><p><code>WeakMap</code> 结构和 <code>Map</code> 结构很类似 , 不同点在于 <code>WeakMap</code> 结构的键名只支持引用类型的数据 , 比如 : 数组 , 对象 , 函数</p>
<h2 id="WeakMap-的基本用法"><a href="#WeakMap-的基本用法" class="headerlink" title="WeakMap 的基本用法"></a>WeakMap 的基本用法</h2><p><code>WeakMap</code> 结构的使用方式和 <code>Map</code> 结构一样</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> wm = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br></pre></td></tr></table></figure>

<p>两者都是使用 <code>new</code> 来创建实例 , 如果添加键值对的话 , 我们同样是使用 <code>set</code> 方法 , 不过键名的类型必须要求是引用类型的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> wm = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"><span class="comment">// 数组类型的键名</span></span><br><span class="line">wm.set([<span class="number">1</span>], <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 对象类型的键名</span></span><br><span class="line">wm.set(&#123; <span class="attr">name</span>: <span class="string">&quot;Zhangsan&quot;</span> &#125;, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 函数类型的键名</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">wm.set(fn, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(wm); <span class="comment">// WeakMap &#123;ƒ =&gt; 2, &#123;…&#125; =&gt; 2, Array(1) =&gt; 2&#125;</span></span><br></pre></td></tr></table></figure>

<p>从打印结果可以看出 , 以上类型的键名都可以成功添加到 <code>WeakMap</code> 实例中</p>
<h2 id="WeakMap-与-Map-的区别"><a href="#WeakMap-与-Map-的区别" class="headerlink" title="WeakMap 与 Map 的区别"></a>WeakMap 与 Map 的区别</h2><p>如果是普通的值类型则不允许 , 比如 : <code>String</code> , <code>Number</code> , <code>null</code> , <code>undefined</code> , <code>boolean</code> , 而 <code>Map</code> 结构是允许的 , 这就是两者的不同之处 , 谨记</p>
<p>跟 <code>Map</code> 一样 , <code>WeakMap</code> 也拥有 <code>get</code> , <code>has</code> , <code>delete</code> 方法 , 用法和用途都一样 , 不同地方在于 , <code>WeakMap</code> 不支持 <code>clear</code> 方法 , 不支持遍历 , 也就没有了 <code>keys</code> , <code>values</code> , <code>entries</code> , <code>forEach</code> 这 4 个方法 , 也没有属性 <code>size</code></p>
<p>理由跟 <code>WeakSet</code> 结构一样 : 键名中的引用类型是弱引用 , 你永远不知道这个引用对象什么时候会被垃圾回收机制回收了 , 如果这个引用类型的值被垃圾机制回收了 , <code>WeakMap</code> 实例中的对应键值对也会消失。</p>
]]></content>
      <categories>
        <category>js</category>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>javascript</tag>
        <tag>ES6</tag>
        <tag>数组去重</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6 新增用法 ( 六 )</title>
    <url>/2021/06/25/js/es6-day06/</url>
    <content><![CDATA[<h1 id="类基本用法"><a href="#类基本用法" class="headerlink" title="类基本用法"></a>类基本用法</h1><h2 id="类的属性和方法"><a href="#类的属性和方法" class="headerlink" title="类的属性和方法"></a>类的属性和方法</h2><p>声明一个类的写法 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个叫  Animal 的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="comment">// constructor 构造函数</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">color</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.color = color;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到类里面 ( 花括号 <code>&#123;&#125;</code> 里面 ) 有一个叫 <code>constructor</code> 方法 , 它就是构造方法 , 构造方法里面的 <code>this</code> , 指向的是该类实例化后的对象 , 这就是实现了一个类的声明 , 如果你没有编写 <code>constructor</code> 方法 , 执行的时候也会被加上一个默认的空的 <code>constructor</code> 方法 , constructor 方法是必须的 , 也是唯一的 , 一个类体不能含有多个 constructor 构造方法</p>
<h2 id="类的实例化对象"><a href="#类的实例化对象" class="headerlink" title="类的实例化对象"></a>类的实例化对象</h2><p>给类添加属性和方法 , 把类名后面的括号 <code>&#123;&#125;</code> 里面的内容称之为类体 , 我们会在类体内来编写类的属性和方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 构造方法</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 属性</span></span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 自定义方法 getName()</span></span><br><span class="line">  <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="类的自定义方法"><a href="#类的自定义方法" class="headerlink" title="类的自定义方法"></a>类的自定义方法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 构造方法</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 属性</span></span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 自定义方法 getName()</span></span><br><span class="line">  <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`我想念 <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个 Animal 实例对象 dog</span></span><br><span class="line"><span class="keyword">let</span> dog = <span class="keyword">new</span> Animal(<span class="string">&quot;村口消失的大黄&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(dog.name); <span class="comment">// 村口消失的大黄</span></span><br><span class="line"><span class="built_in">console</span>.log(dog.getName()); <span class="comment">// 我想念 村口消失的大黄</span></span><br></pre></td></tr></table></figure>

<h2 id="类的静态方法"><a href="#类的静态方法" class="headerlink" title="类的静态方法"></a>类的静态方法</h2><p>如果在一个方法前 , 加上 <code>static</code> 关键字 , 就表示该方法<strong>不会被实例继承</strong> , 而是直接通过类来调用 , 这就称为 “静态方法” , 类的静态方法可以被类直接调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">hello</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Father.hello());</span><br></pre></td></tr></table></figure>

<h2 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h2><p><code>ES6</code> 使用 <code>extends</code> 关键字来实现子类继承父类<br><code>super</code> , 它相当于是父类中的 <code>this</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父类 Animal</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类 Dog</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 构造方法</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name, color</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(name);</span><br><span class="line">    <span class="built_in">this</span>.color = color;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>可以用 <code>super</code> 来引用父类 , 访问父类的方法</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 构造方法</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 属性</span></span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 父类自定义方法</span></span><br><span class="line">  <span class="function"><span class="title">hello</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello ~&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类 Dog</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 构造方法</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name, color</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(name);</span><br><span class="line">    <span class="built_in">this</span>.color = color;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 子类的实例方法</span></span><br><span class="line">  <span class="function"><span class="title">getSomething</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.hello();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建 dog 实例对象</span></span><br><span class="line"><span class="keyword">let</span> dog = <span class="keyword">new</span> Dog(<span class="string">&quot;dog&quot;</span>, <span class="string">&quot;orange&quot;</span>);</span><br><span class="line"><span class="comment">// 调用子类方法</span></span><br><span class="line"><span class="built_in">console</span>.log(dog.getSomething());</span><br></pre></td></tr></table></figure>

<p>在父类中 , 我们定义了 <code>say</code> 方法 , 想要在子类中调用父类的 <code>say</code> 方法的话 , 我们使用 <code>super.say()</code> 即可实现</p>
<p><strong>使用 <code>super</code> 有几个要注意的事项 :</strong></p>
<ol>
<li>子类必须在 <code>constructor</code> 方法中调用 <code>super</code> 方法</li>
<li>调用 <code>super()</code> , 才可以使用 <code>this</code> , 否则报错</li>
</ol>
<h1 id="Module-模块"><a href="#Module-模块" class="headerlink" title="Module 模块"></a>Module 模块</h1><h2 id="模块化的初衷"><a href="#模块化的初衷" class="headerlink" title="模块化的初衷"></a>模块化的初衷</h2><p>高内聚,低耦合</p>
<p>目前还没有浏览器支持 <code>ES6</code> 的 <code>module</code> 模块<br>但是可以解决 :</p>
<ol>
<li>vscode 安装 live sever</li>
<li><code>&lt;script type=&quot;module&quot;&gt;</code> 将 <code>script</code> 标签中的 <code>type</code> 的类型换成 <code>module</code> , 告诉浏览器我们要使用 <code>es6</code> 的模块化了</li>
</ol>
<h2 id="导出-Export"><a href="#导出-Export" class="headerlink" title="导出 Export"></a>导出 Export</h2><p>导出 <code>Export</code> : 作为一个模块 , 它可以选择性地给其他模块暴露 ( 提供 ) 自己的属性和方法 , 供其他模块使用</p>
<h2 id="导入-Import"><a href="#导入-Import" class="headerlink" title="导入 Import"></a>导入 Import</h2><p>导入 <code>Import</code> : 作为一个模块 , 可以根据需要 , 引入其他模块的提供的属性或者方法 , 供自己模块使用</p>
<h2 id="实现-导入-Import-和-导出-Export"><a href="#实现-导入-Import-和-导出-Export" class="headerlink" title="实现 导入 Import 和 导出 Export"></a>实现 导入 Import 和 导出 Export</h2><p>假设 <code>moduleB</code> 模块代码 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// moduleB.js</span></span><br><span class="line"><span class="comment">// 导出变量 name</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;前端君&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; name &#125;;</span><br></pre></td></tr></table></figure>

<p>假设 <code>moduleA</code> 模块代码 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// moduleA.js</span></span><br><span class="line"><span class="comment">// 导入 moduleB 的属性 name</span></span><br><span class="line"><span class="keyword">import</span> &#123; name &#125; <span class="keyword">from</span> <span class="string">&quot;./moduleB.js&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// 前端君</span></span><br></pre></td></tr></table></figure>

<h2 id="批量-导入-和-导出"><a href="#批量-导入-和-导出" class="headerlink" title="批量 导入 和 导出"></a>批量 导入 和 导出</h2><p>模块 B 批量导出</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// moduleB.js</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;前端君&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Hello ~ 前端君&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123; name, age, hello &#125;;</span><br></pre></td></tr></table></figure>

<p>模块 A 批量导入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// moduleA.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; name, age, hello &#125; <span class="keyword">from</span> <span class="string">&quot;./moduleB.js&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// 前端君</span></span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">// 20</span></span><br><span class="line">hello(); <span class="comment">// Hello ~ 前端君</span></span><br></pre></td></tr></table></figure>

<h2 id="重命名导出的变量"><a href="#重命名导出的变量" class="headerlink" title="重命名导出的变量"></a>重命名导出的变量</h2><p>想给导入的变量换一个名字的话 , 可以这样做 :<br>使用关键字 <code>as</code> , 可以实现给变量重命名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// moduleA.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; name <span class="keyword">as</span> newName &#125; <span class="keyword">from</span> <span class="string">&quot;./moduleB.js&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(newName); <span class="comment">// 前端君</span></span><br></pre></td></tr></table></figure>

<h2 id="整体导入"><a href="#整体导入" class="headerlink" title="整体导入"></a>整体导入</h2><p>可以使用星号 <code>*</code> 实现整体导入 :<br>使用星号符 <code>*</code> 将模块 <code>B</code> 提供的所有属性和方法整体导入赋值给变量 <code>obj</code> , 我们可以用点运算符 <code>.</code> 来获取它的属性和方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// moduleB.js</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;前端君&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Hello ~ 前端君&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123; name, age, hello &#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// moduleA.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> obj <span class="keyword">from</span> <span class="string">&quot;./moduleB.js&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.name); <span class="comment">// 前端君</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.age); <span class="comment">// 20</span></span><br><span class="line">obj.hello(); <span class="comment">// Hello ~ 前端君</span></span><br></pre></td></tr></table></figure>

<h2 id="默认导出"><a href="#默认导出" class="headerlink" title="默认导出"></a>默认导出</h2><p>默认导出 , 每个模块支持导出一个没有名字的变量 , 使用关键语句 <code>export default</code> 来实现 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// moduleB.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;I&#x27;m a default function.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>导入这个模块的时候 , 可以为这个匿名函数取任意的名字 , 我们试一下导入上面那个匿名函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// moduleA.js</span></span><br><span class="line"><span class="keyword">import</span> defaultFunction <span class="keyword">from</span> <span class="string">&quot;./moduleB.js&quot;</span>;</span><br><span class="line">defaultFunction(); <span class="comment">// I&#x27;m a default function.</span></span><br></pre></td></tr></table></figure>

<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h3 id="声明的变量-对外都是只读的"><a href="#声明的变量-对外都是只读的" class="headerlink" title="声明的变量 , 对外都是只读的"></a>声明的变量 , 对外都是只读的</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// moduleB.js</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;前端君&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; name &#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// moduleA.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; name &#125; <span class="keyword">from</span> <span class="string">&quot;./moduleB.js&quot;</span>;</span><br><span class="line">name = <span class="string">&quot;tom&quot;</span>; <span class="comment">// 报错: name is read-only</span></span><br></pre></td></tr></table></figure>

<p>但是 , 如果模块 <code>B</code> 导出的是对象类型的值 , 就可修改 , 实质上是地址不可修改 , 可修改的是地址指向的内容</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// moduleB.js</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">40</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> &#123; person &#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// moduleA.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; person &#125; <span class="keyword">from</span> <span class="string">&quot;./moduleB.js&quot;</span>;</span><br><span class="line">person.name = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// 李四</span></span><br></pre></td></tr></table></figure>

<h3 id="导入不存在的变量会报错"><a href="#导入不存在的变量会报错" class="headerlink" title="导入不存在的变量会报错"></a>导入不存在的变量会报错</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// moduleB.js</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;前端君&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; name &#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// moduleA.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; height &#125; <span class="keyword">from</span> <span class="string">&quot;./moduleB.js&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(height); <span class="comment">// 报错: does not provide an export named &#x27;height&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>javascript</tag>
        <tag>ES6</tag>
        <tag>class</tag>
        <tag>export</tag>
        <tag>import</tag>
        <tag>module</tag>
        <tag>extends</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6 新增用法 ( 五 )</title>
    <url>/2021/06/25/js/es6-day05/</url>
    <content><![CDATA[<h1 id="ES6-的-Promise-对象"><a href="#ES6-的-Promise-对象" class="headerlink" title="ES6 的 Promise 对象"></a>ES6 的 Promise 对象</h1><h2 id="Promise-设计初衷"><a href="#Promise-设计初衷" class="headerlink" title="Promise 设计初衷"></a>Promise 设计初衷</h2><p>如果存在多个请求操作层层依赖的话 , 那么以上的嵌套就有可能不止三层那么少了 , 加上每一层还会有复杂的业务逻辑处理 , 代码可读性也越来越差 , 不直观 , 调试起来也不方便。如果多人开发的时候没有足够的沟通协商 , 大家的代码风格不一致的话 , 更是雪上加霜 , 给后面的维护带来极大的不便 , 既然使用这种回调函数层层嵌套( 又称 : 回调地狱 ) 的形式存在缺点 , <code>ES6</code> 想了办法治它 , 所以就有了 Promise 的出现了</p>
<h2 id="Promise-基本用法"><a href="#Promise-基本用法" class="headerlink" title="Promise 基本用法"></a>Promise 基本用法</h2><p><code>Promise</code> 对象是全局对象 , 你也可以理解为一个类 , 创建 <code>Promise</code> 实例的时候 , 要有那个 <code>new</code> 关键字。参数是一个匿名函数 , 其中有两个参数 : <code>resolve</code> ( 解决 ) 和 <code>reject</code> ( 拒绝 ) , 两个函数均为方法 , <code>resolve</code> 方法用于处理异步操作成功后业务 ; <code>reject</code> 方法用于操作异步操作失败后的业务</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Promise-的三种状态"><a href="#Promise-的三种状态" class="headerlink" title="Promise 的三种状态"></a>Promise 的三种状态</h2><p><code>Promise</code> 对象有三种状态 :</p>
<ol>
<li><code>pending</code> : 刚刚创建一个 Promise 实例的时候 , 表示初始状态 ;</li>
<li><code>fulfilled</code> : resolve 方法调用的时候 , 表示操作成功 ;</li>
<li><code>rejected</code> : reject 方法调用的时候 , 表示操作失败 ;<br>状态只能从 初始化 -&gt; 成功 或者 初始化 -&gt; 失败 , 不能逆向转换 , 也不能在成功 <code>fulfilled</code> 和失败 <code>rejected</code> 之间转换</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 实例化后状态 : pending</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&quot;操作成功&quot;</span>) &#123;</span><br><span class="line">    resolve(<span class="string">&quot;resolved&quot;</span>); <span class="comment">// resolve 方法调用 , 状态为 : fulfilled</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject(<span class="string">&quot;rejected&quot;</span>); <span class="comment">// reject 方法调用 , 状态为 : rejected</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Then"><a href="#Then" class="headerlink" title="Then( )"></a>Then( )</h2><p><code>then()</code> 方法 : 用于绑定处理操作后的处理程序<br>参数是两个函数 , 第一个用于处理操作成功后的业务 , 第二个用于处理操作异常后的业务</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">promise.then(</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 成功后处理的程序</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 失败后处理的程序</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="Catch"><a href="#Catch" class="headerlink" title="Catch( )"></a>Catch( )</h2><p>对于操作异常的程序 , <code>Promise</code> 专门提供了一个实例方法来处理 : <code>catch()</code> 方法<br><code>catch</code> 只接受一个参数 , 用于处理操作异常后的业务</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">promise.catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 失败后处理的程序</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>建议将 <code>then</code> 方法用于处理操作成功 , <code>catch</code> 方法用于处理操作异常 , 也就是</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">promise</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 操作成功的处理程序</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 操作失败的处理程序</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>之所以能够使用链式调用 , 是因为 <code>then</code> 方法和 <code>catch</code> 方法调用后 , 都会返回 <code>promise</code> 对象</p>
<p><strong>案例 1</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用 new 关键字创建一个 Promise 实例</span></span><br><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 假设 condition 的值为 true</span></span><br><span class="line">  <span class="keyword">let</span> condition = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    <span class="comment">// 调用操作成功方法</span></span><br><span class="line">    resolve(<span class="string">&quot;操作成功&quot;</span>); <span class="comment">// 状态 : pending -&gt; fulfilled</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 调用操作异常方法</span></span><br><span class="line">    reject(<span class="string">&quot;操作异常&quot;</span>); <span class="comment">//状态 : pending -&gt; rejected</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//用then处理操作成功，catch处理操作异常</span></span><br><span class="line">promise</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 操作成功的处理程序</span></span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 操作失败的处理程序</span></span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制台输出 : 操作成功</span></span><br></pre></td></tr></table></figure>

<p><strong>案例 2 链式调用</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="comment">// 调用操作成功方法</span></span><br><span class="line">    resolve(<span class="string">&quot;操作成功&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 调用操作异常方法</span></span><br><span class="line">    reject(<span class="string">&quot;操作异常&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用 then 处理操作成功 , catch 处理操作异常</span></span><br><span class="line">promise.then(requestA).then(requestB).then(requestC).catch(requestError);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestA</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;请求A成功&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;请求B，下一个就是你了&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestB</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;上一步的结果：&quot;</span> + res);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;请求B成功&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;请求C，下一个就是你了&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestC</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;上一步的结果：&quot;</span> + res);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;请求C成功&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestError</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;请求失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印结果:</span></span><br><span class="line"><span class="comment">//  请求A成功</span></span><br><span class="line"><span class="comment">//  上一步的结果：请求B，下一个就是你了</span></span><br><span class="line"><span class="comment">//  请求B成功</span></span><br><span class="line"><span class="comment">//  上一步的结果：请求C，下一个就是你了</span></span><br><span class="line"><span class="comment">//  请求C成功</span></span><br></pre></td></tr></table></figure>

<h2 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all( )"></a>Promise.all( )</h2><p><code>Promise.all()</code> 方法 : 接受一个数组作为参数 , 数组的元素是 <code>Promise</code> 实例对象 , 当参数中的实例对象的状态都为 <code>fulfilled</code> 时 , <code>Promise.all()</code> 才会有返回</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建实例 promise1</span></span><br><span class="line"><span class="keyword">let</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    resolve(<span class="string">&quot;实例1操作成功&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">5000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建实例 promise2</span></span><br><span class="line"><span class="keyword">let</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    resolve(<span class="string">&quot;实例2操作成功&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([promise1, promise2]).then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 打印结果:</span></span><br><span class="line"><span class="comment">// 5秒后打印 : [&quot;实例1操作成功&quot;, &quot;实例2操作成功&quot;]</span></span><br></pre></td></tr></table></figure>

<p>这个方法有什么用呢 ? 一般这样的场景 : 我们执行某个操作 , 这个操作需要得到需要多个接口请求回来的数据来支持 , 但是这些接口请求之前互不依赖 , 不需要层层嵌套 , 这种情况下就适合使用 <code>Promise.all()</code> 方法 , 因为它会得到所有接口都请求成功了 , 才会进行操作</p>
<h2 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race( )"></a>Promise.race( )</h2><p><code>Promise.race()</code> 方法 : 它的参数要求跟 <code>Promise.all()</code> 方法一样 , 不同的是 , 它参数中的 <code>promise</code> 实例 , 只要有一个状态发生变化 ( 不管是成功 <code>fulfilled</code> 还是异常 <code>rejected</code> ) , 它就会有返回 , 其他实例中再发生变化 , 它也不管了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化实例 promise1</span></span><br><span class="line"><span class="keyword">let</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    resolve(<span class="string">&quot;实例1操作成功&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">4000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化实例 promise2</span></span><br><span class="line"><span class="keyword">let</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    reject(<span class="string">&quot;实例2操作失败&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.race([promise2, promise1])</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">// 打印结果:</span></span><br><span class="line"><span class="comment">// 两秒后打印 : 实例2操作失败</span></span><br></pre></td></tr></table></figure>

<h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
      <categories>
        <category>js</category>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>javascript</tag>
        <tag>ES6</tag>
        <tag>Promise</tag>
        <tag>then</tag>
        <tag>catch</tag>
        <tag>resolve</tag>
        <tag>reject</tag>
      </tags>
  </entry>
  <entry>
    <title>var 与 ES6 中的 let const 的区别</title>
    <url>/2021/06/29/js/es6-var-let-const/</url>
    <content><![CDATA[<h1 id="let-const-var-定义变量的区别是什么"><a href="#let-const-var-定义变量的区别是什么" class="headerlink" title="let const var 定义变量的区别是什么"></a>let const var 定义变量的区别是什么</h1><ul>
<li><p><code>let</code></p>
<ul>
<li>块作用域</li>
<li>没有变量提升</li>
<li>不能重复声明</li>
</ul>
</li>
<li><p><code>const</code></p>
<ul>
<li>声明常量，不能修改</li>
<li>必须初始化</li>
<li>块作用域</li>
<li>没有变量提升</li>
<li>不能重复声明</li>
</ul>
</li>
<li><p><code>var</code></p>
<ul>
<li>没有块的概念</li>
<li>可以跨块访问，但是不能跨函数访问</li>
<li>会进行变量提升</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>js</category>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>ES6</tag>
        <tag>let</tag>
        <tag>var</tag>
        <tag>const</tag>
        <tag>jsvascript</tag>
      </tags>
  </entry>
  <entry>
    <title>ES7 中的 Async/await</title>
    <url>/2021/06/25/js/es7-async-await/</url>
    <content><![CDATA[<h1 id="Async-await"><a href="#Async-await" class="headerlink" title="Async/await"></a>Async/await</h1><h2 id="为什么要有-Async-await"><a href="#为什么要有-Async-await" class="headerlink" title="为什么要有 Async/await ?"></a>为什么要有 Async/await ?</h2><p><code>Promise</code> 虽然跳出了异步嵌套的怪圈 , 解决了回调地狱的问题 , 用链式表达更加清晰 , 但是我们也发现如果有大量的异步请求的时候 , 流程复杂的情况下 , 会发现充满了屏幕的 <code>then</code> , 看起来非常吃力 , 而 <code>ES7</code> 的 <code>Async/Await</code> 的出现就是为了解决这种复杂的情况</p>
<h2 id="Async-await-的基本使用"><a href="#Async-await-的基本使用" class="headerlink" title="Async/await 的基本使用"></a>Async/await 的基本使用</h2><p><code>async</code> 用于申明一个 <code>function</code> 是异步的 , 返回一个 <code>promise</code> 对象 , 而 <code>await</code> 可以认为是 <code>async wait</code> 的简写 , 等待一个异步方法执行完成 , <code>async</code> 必须声明的是一个 <code>function</code> , <code>await</code> 必须在声明的函数内部使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// async 用于声明一个 function 是异步的 , 返回一个 Promise 对象</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;我是 async 声明的异步函数&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;我是 async 声明的异步函数的返回值&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">demo();</span><br><span class="line"><span class="built_in">console</span>.log(demo());</span><br><span class="line">demo().then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印结果:</span></span><br><span class="line"><span class="comment">//  Promise &#123;&lt;fulfilled&gt;: &quot;我是 async 声明的异步函数的返回值&quot;&#125;</span></span><br><span class="line"><span class="comment">//  我是 async 声明的异步函数的返回值</span></span><br><span class="line"><span class="comment">//  我是 async 声明的异步函数 ( 调用了三次,打印了三遍 )</span></span><br></pre></td></tr></table></figure>

<p><code>await</code> 可以认为是 <code>async wait</code> 的简写 , <code>await</code> 必须在声明的函数内部使用 , 不能单独使用<br><code>await</code> 等待的虽然是 <code>Promise</code> 对象 , 但不必写 <code>.then()</code> , 直接可以得到返回值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">demo2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="built_in">Promise</span>.resolve(<span class="number">123</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;</span><br><span class="line">demo2();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
        <category>ES7</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>javascript</tag>
        <tag>ES6</tag>
        <tag>async</tag>
        <tag>await</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery Ajax 模板</title>
    <url>/2021/07/01/js/jquery-ajax/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>, <span class="comment">//GET</span></span><br><span class="line">  <span class="attr">async</span>: <span class="literal">true</span>, <span class="comment">//或 false,是否异步</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;llc&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">22</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span>, <span class="comment">//超时时间</span></span><br><span class="line">  <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>, <span class="comment">//返回的数据格式：json/xml/html/script/jsonp/text</span></span><br><span class="line">  <span class="attr">beforeSend</span>: <span class="function"><span class="keyword">function</span> (<span class="params">xhr</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(xhr);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;发送前&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data, textStatus, jqXHR</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">error</span>: <span class="function"><span class="keyword">function</span> (<span class="params">xhr, textStatus</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">    <span class="built_in">console</span>.log(xhr);</span><br><span class="line">    <span class="built_in">console</span>.log(textStatus);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
        <category>jQuery</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>javascript</tag>
        <tag>jQuery</tag>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery ( 一 )</title>
    <url>/2021/06/29/js/jquery-day01/</url>
    <content><![CDATA[<h1 id="jQuery-整体结构图"><a href="#jQuery-整体结构图" class="headerlink" title="jQuery 整体结构图"></a>jQuery 整体结构图</h1><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/jquery.png" alt="jQuery"></p>
<h1 id="jQuery-语法"><a href="#jQuery-语法" class="headerlink" title="jQuery 语法"></a>jQuery 语法</h1><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><p>美元符号定义 <code>jQuery</code> , <code>jQuery</code> 简化了 <code>DOM</code> 操作<br><code>jQuery</code> 使用 <code>$(selector).action()</code> 的格式给一个 ( 或多个 ) 元素绑定事件 , 具体来说 , <code>$(selector)</code> 让 <code>jQuery</code> 选择匹配 <code>CSS</code> 选择器 <code>selector</code> 的元素 , 并将它/它们传递给叫做 <code>.action()</code> 的事件 <code>API</code></p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><code>jQuery</code> 入口函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// jQuery 入口函数</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">  $(<span class="string">&quot;#blackBox&quot;</span>).hide();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>上述代码和以下原生 <code>js</code> 代码功能相同 :</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&quot;blackBox&quot;</span>).style.display = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="jQuery-入口函数与-JavaScript-入口函数的区别"><a href="#jQuery-入口函数与-JavaScript-入口函数的区别" class="headerlink" title="jQuery 入口函数与 JavaScript 入口函数的区别"></a>jQuery 入口函数与 JavaScript 入口函数的区别</h2><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/loadandready.png" alt="load and ready"></p>
<h1 id="JQuery-选择器"><a href="#JQuery-选择器" class="headerlink" title="JQuery 选择器"></a>JQuery 选择器</h1><h2 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h2><table>
<thead>
<tr>
<th>名称</th>
<th>用法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>ID 选择器</td>
<td><code>$(&quot;#id&quot;)</code></td>
<td>获取指定 ID 的元素</td>
</tr>
<tr>
<td>类选择器</td>
<td><code>$(&quot;.class&quot;)</code></td>
<td>获取同一类 <code>class</code> 的元素</td>
</tr>
<tr>
<td>标签选择器</td>
<td><code>$(&quot;div&quot;)</code></td>
<td>获取同一类标签的所有元素</td>
</tr>
<tr>
<td>并集选择器</td>
<td><code>$(&quot;div,p,li&quot;)</code></td>
<td>使用逗号分隔,只要符合条件之一就可,获取所有的 <code>div</code>,<code>p</code>,<code>li</code> 元素</td>
</tr>
<tr>
<td>交集选择器</td>
<td><code>$(&quot;div.redClass&quot;)</code></td>
<td>此选择器 <code>div</code> 和 <code>.redClass</code> 之间没有空格,是指 <code>class</code> 为 <code>redClass</code> 的 <code>div</code> 元素</td>
</tr>
</tbody></table>
<h2 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h2><table>
<thead>
<tr>
<th>名称</th>
<th>用法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>子代选择器</td>
<td><code>$(&quot;ul&gt;li&quot;)</code></td>
<td>使用 <code>&gt;</code>号,获取儿子层级的元素,注意,并不会获取孙子层级的元素</td>
</tr>
<tr>
<td>后代选择器</td>
<td><code>$&quot;ul li&quot;)</code></td>
<td>使用空格,代表后代选择器,获取 <code>ul</code> 下的所有 <code>li</code> 元素,包括孙子等</td>
</tr>
</tbody></table>
<h2 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h2><table>
<thead>
<tr>
<th></th>
<th>用法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>:eq(index)</code></td>
<td><code>$(&quot;li:eq(2)&quot;).css(&quot;color&quot;,&quot;red&quot;)</code></td>
<td>获取到的 <code>li</code> 元素中,选择索引号为 <code>2</code> 的元素,索引号 <code>index</code> 从 <code>0</code> 开始</td>
</tr>
<tr>
<td><code>:odd</code></td>
<td><code>$(&quot;li:odd&quot;).css(&quot;color&quot;,&quot;red&quot;)</code></td>
<td>获取到的 <code>li</code> 元素中,选择索引号为 奇数 的元素</td>
</tr>
<tr>
<td><code>:even</code></td>
<td><code>$(&quot;li:even&quot;).css(&quot;color&quot;,&quot;red&quot;)</code></td>
<td>获取到的 <code>li</code> 元素中,选择索引号为 偶数 的元素</td>
</tr>
</tbody></table>
<h2 id="筛选选择器-方法"><a href="#筛选选择器-方法" class="headerlink" title="筛选选择器 (方法)"></a>筛选选择器 (方法)</h2><table>
<thead>
<tr>
<th></th>
<th>用法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>children(selector)</code></td>
<td><code>$(&quot;ul&quot;).children(&quot;li&quot;)</code></td>
<td>相当于 <code>$(&quot;ul&gt;li&quot;)</code> , 子类选择器</td>
</tr>
<tr>
<td><code>find(selector)</code></td>
<td><code>$(&quot;ul&quot;).find(&quot;li&quot;)</code></td>
<td>相当于 <code>$(&quot;ul li&quot;)</code> , 后代选择器</td>
</tr>
<tr>
<td><code>siblings(selector)</code></td>
<td><code>$(&quot;#first&quot;).siblings(&quot;li&quot;)</code></td>
<td>查找兄弟节点 , 不包括自己本身</td>
</tr>
<tr>
<td><code>parent()</code></td>
<td><code>$(&quot;#first&quot;).parent()</code></td>
<td>查找父亲</td>
</tr>
<tr>
<td><code>eq(index)</code></td>
<td><code>$(&quot;li&quot;).eq(2)</code></td>
<td>相当于 <code>$(&quot;li:eq(2)&quot;)</code> , <code>index</code> 从 <code>0</code> 开始</td>
</tr>
<tr>
<td><code>next()</code></td>
<td><code>$(&quot;li&quot;).next()</code></td>
<td>找下一个兄弟</td>
</tr>
<tr>
<td><code>prev()</code></td>
<td><code>$(&quot;li&quot;).prev()</code></td>
<td>找上一次兄弟</td>
</tr>
<tr>
<td><code>Index()</code></td>
<td><code>$(&quot;li&quot;).index()</code></td>
<td>获取当前的位置 (索引)</td>
</tr>
<tr>
<td><code>not()</code></td>
<td><code>$(&quot;p&quot;).not(&quot;.intro&quot;)</code></td>
<td>返回不带有类名 <code>intro</code> 的所有 <code>p</code> 元素</td>
</tr>
</tbody></table>
<h2 id="DOM-对象和-jQuery-对象的转换"><a href="#DOM-对象和-jQuery-对象的转换" class="headerlink" title="DOM 对象和 jQuery 对象的转换"></a>DOM 对象和 jQuery 对象的转换</h2><h3 id="DOM-对象转-JQuery-对象"><a href="#DOM-对象转-JQuery-对象" class="headerlink" title="DOM 对象转 JQuery 对象"></a>DOM 对象转 JQuery 对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(DOM);</span><br></pre></td></tr></table></figure>

<p><strong>比如 :</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;.class&quot;</span>);</span><br><span class="line">$(<span class="built_in">this</span>);</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<h3 id="JQuery-对象转-DOM-对象"><a href="#JQuery-对象转-DOM-对象" class="headerlink" title="JQuery 对象转 DOM 对象"></a>JQuery 对象转 DOM 对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(DOM)[<span class="number">0</span>];</span><br></pre></td></tr></table></figure>

<p><strong>比如 :</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">$(<span class="string">&quot;.class&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">$(<span class="built_in">this</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<h1 id="jQuery-事件"><a href="#jQuery-事件" class="headerlink" title="jQuery 事件"></a>jQuery 事件</h1><h2 id="事件语法"><a href="#事件语法" class="headerlink" title="事件语法"></a>事件语法</h2><h3 id="单击事件"><a href="#单击事件" class="headerlink" title="单击事件"></a>单击事件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 动作触发后执行的代码 !</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="双击事件"><a href="#双击事件" class="headerlink" title="双击事件"></a>双击事件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).dblclick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 动作触发后执行的代码 !</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="鼠标进入"><a href="#鼠标进入" class="headerlink" title="鼠标进入"></a>鼠标进入</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#div&quot;</span>).mouseenter(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 动作触发后执行的代码 !</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="鼠标移出"><a href="#鼠标移出" class="headerlink" title="鼠标移出"></a>鼠标移出</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#div&quot;</span>).mouseleave(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 动作触发后执行的代码 !</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="获取焦点"><a href="#获取焦点" class="headerlink" title="获取焦点"></a>获取焦点</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;input&quot;</span>).focus(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 动作触发后执行的代码 !</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="失去焦点"><a href="#失去焦点" class="headerlink" title="失去焦点"></a>失去焦点</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;input&quot;</span>).blur(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 动作触发后执行的代码 !</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="jQuery-的-css-方法"><a href="#jQuery-的-css-方法" class="headerlink" title="jQuery 的 css() 方法"></a>jQuery 的 css() 方法</h1><p><code>jQuery</code> 的 <code>css()</code> 方法设置或返回被选元素的一个或多个样式属性</p>
<h2 id="返回-CSS-属性"><a href="#返回-CSS-属性" class="headerlink" title="返回 CSS 属性"></a>返回 CSS 属性</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="设置-CSS-属性"><a href="#设置-CSS-属性" class="headerlink" title="设置 CSS 属性"></a>设置 CSS 属性</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>, <span class="string">&quot;yellow&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="设置多个-CSS-属性"><a href="#设置多个-CSS-属性" class="headerlink" title="设置多个 CSS 属性"></a>设置多个 CSS 属性</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).css(&#123;</span><br><span class="line">  <span class="string">&quot;background-color&quot;</span>: <span class="string">&quot;yellow&quot;</span>,</span><br><span class="line">  <span class="string">&quot;font-size&quot;</span>: <span class="string">&quot;20px&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="jQuery-css-类"><a href="#jQuery-css-类" class="headerlink" title="jQuery css 类"></a>jQuery css 类</h1><h2 id="addClass"><a href="#addClass" class="headerlink" title="addClass( )"></a>addClass( )</h2><p>向被选元素添加一个或多个类</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.important</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">font-size</span>: xx-large;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.blue</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0000ff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;h1,p&quot;</span>).addClass(<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">  $(<span class="string">&quot;div&quot;</span>).addClass(<span class="string">&quot;important&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="removeClass"><a href="#removeClass" class="headerlink" title="removeClass( )"></a>removeClass( )</h2><p>从被选元素删除一个或多个类</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;h1,h2,p&quot;</span>).removeClass(<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="toggleClass"><a href="#toggleClass" class="headerlink" title="toggleClass( )"></a>toggleClass( )</h2><p>对被选元素进行添加或删除类的切换操作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;h1,h2,p&quot;</span>).toggleClass(<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="eq"><a href="#eq" class="headerlink" title="eq( )"></a>eq( )</h2><p>方法返回带有被选元素的指定索引号的元素 , 索引号从 <code>0</code> 开头 , 所以第一个元素的索引号是 <code>0</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(selector).eq(index);</span><br></pre></td></tr></table></figure>

<h2 id="index"><a href="#index" class="headerlink" title="index( )"></a>index( )</h2><p><code>index()</code> 方法返回指定元素相对于其他 <span id="green-block">同级</span> 元素的 <code>index</code> 位置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;li&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log($(<span class="built_in">this</span>).index());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="not"><a href="#not" class="headerlink" title="not()"></a>not()</h2><p><code>Not()</code> 方法返回指定元素之外的元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;input&quot;</span>).not(<span class="string">&quot;.inputA&quot;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="jQuery-动画"><a href="#jQuery-动画" class="headerlink" title="jQuery 动画"></a>jQuery 动画</h1><h2 id="jQuery-隐藏显示"><a href="#jQuery-隐藏显示" class="headerlink" title="jQuery 隐藏显示"></a>jQuery 隐藏显示</h2><p>可以使用 <code>hide()</code> 和 <code>show()</code> 方法来隐藏和显示 <code>HTML</code> 元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#hide&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;p&quot;</span>).hide();</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">&quot;#show&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;p&quot;</span>).show();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>可以使用 <code>toggle()</code> 方法来切换 <code>hide()</code> 和 <code>show()</code> 方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;p&quot;</span>).toggle();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="jQuery-淡入淡出"><a href="#jQuery-淡入淡出" class="headerlink" title="jQuery 淡入淡出"></a>jQuery 淡入淡出</h2><p><code>fadeIn()</code> 用于淡入已隐藏的元素 , <code>fadeOut()</code> 方法用于淡出可见元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;#div1&quot;</span>).fadeIn();</span><br><span class="line">  $(<span class="string">&quot;#div2&quot;</span>).fadeIn(<span class="string">&quot;slow&quot;</span>);</span><br><span class="line">  $(<span class="string">&quot;#div3&quot;</span>).fadeOut(<span class="number">3000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>fadeToggle()</code> 方法可以在 <code>fadeIn()</code> 与 <code>fadeOut()</code> 方法之间进行切换</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;#div2&quot;</span>).fadeToggle(<span class="string">&quot;fast&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>fadeTo()</code> 方法允许渐变为给定的不透明度 ( 值介于 <code>0</code> 与 <code>1</code> 之间 )</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;#div1&quot;</span>).fadeTo(<span class="string">&quot;slow&quot;</span>, <span class="number">0.15</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="jQuery-滑动"><a href="#jQuery-滑动" class="headerlink" title="jQuery 滑动"></a>jQuery 滑动</h2><p><code>slideDown()</code> 方法用于向下滑动元素 , <code>slideUp()</code> 方法用于向上滑动元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#flip&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;#div1&quot;</span>).slideDown();</span><br><span class="line">  $(<span class="string">&quot;#div1&quot;</span>).slideUp();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>slideToggle()</code> 方法可以在 <code>slideDown()</code> 与 <code>slideUp()</code> 方法之间进行切换</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#flip&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;#panel&quot;</span>).slideToggle();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="jQuery-自定义动画"><a href="#jQuery-自定义动画" class="headerlink" title="jQuery 自定义动画"></a>jQuery 自定义动画</h2><p><code>animate()</code> 方法用于创建自定义动画 , 可选的 <code>speed</code> 参数规定效果的时长 , 它可以取以下值 : <code>&quot;slow&quot;</code>,<code>&quot;fast&quot;</code> 或<code>毫秒</code> , 可选的 <code>callback</code> 参数是动画完成后所执行的函数名称</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;div&quot;</span>).animate(&#123;</span><br><span class="line">    <span class="attr">left</span>: <span class="string">&quot;250px&quot;</span>,</span><br><span class="line">    <span class="attr">opacity</span>: <span class="string">&quot;0.5&quot;</span>,</span><br><span class="line">    <span class="attr">width</span>: <span class="string">&quot;150px&quot;</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="string">&quot;150px&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="stop"><a href="#stop" class="headerlink" title="stop( )"></a>stop( )</h2><p><code>jQuery</code> 的 <code>stop()</code> 方法用于停止动画或效果 , 在它们完成之前 , 适用于所有 <code>jQuery</code> 效果函数 , 包括滑动 , 淡入淡出和自定义动画</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#stop&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;#panel&quot;</span>).stop();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>在当前动画 <code>100%</code> 完成之后执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;p&quot;</span>).hide(<span class="string">&quot;slow&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;段落现在被隐藏了&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><h2 id="简单的-tab-切换"><a href="#简单的-tab-切换" class="headerlink" title="简单的 tab 切换"></a>简单的 tab 切换</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#abaeb6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-title</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-title-item</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">25%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">1px</span> solid <span class="number">#171829</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#171829</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-title-item</span><span class="selector-pseudo">:nth-last-of-type</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="attribute">border-right</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-title-item</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#82858f</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-content-item</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">360px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-title&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-title-item&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-title-item&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-title-item&quot;</span>&gt;</span>C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-title-item&quot;</span>&gt;</span>D<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-content-item&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-content-item&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-content-item&quot;</span>&gt;</span>C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-content-item&quot;</span>&gt;</span>D<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;.tab-content-item&quot;</span>).hide();</span><br><span class="line">  $(<span class="string">&quot;.tab-content-item:eq(0)&quot;</span>).show();</span><br><span class="line"></span><br><span class="line">  $(<span class="string">&quot;.tab-title-item&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&quot;.tab-content-item&quot;</span>).hide();</span><br><span class="line">    $(<span class="string">&quot;.tab-content-item&quot;</span>).eq($(<span class="built_in">this</span>).index()).show();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="手风琴"><a href="#手风琴" class="headerlink" title="手风琴"></a>手风琴</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="comment">/* height: 200px; */</span></span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#9298a5</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: inherit;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: inherit;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.title</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#c1d5e2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">48px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">800</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#696d77</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>首 页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>666<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>归 档<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>666<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>标签<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>666<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>分类<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>666<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;.content&quot;</span>).hide();</span><br><span class="line">  $(<span class="string">&quot;.title&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&quot;.content&quot;</span>).slideUp();</span><br><span class="line">    $(<span class="built_in">this</span>).next().stop().slideDown();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
        <category>jQuery</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>javascript</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery ( 二 )</title>
    <url>/2021/06/30/js/jquery-day02/</url>
    <content><![CDATA[<h1 id="jQuery-事件机制"><a href="#jQuery-事件机制" class="headerlink" title="jQuery 事件机制"></a>jQuery 事件机制</h1><h2 id="注册事件"><a href="#注册事件" class="headerlink" title="注册事件"></a>注册事件</h2><p><code>bind()</code> , <code>on()</code> 方法向被选元素添加一个或多个事件处理程序 , 以及当事件发生时运行的函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#div&quot;</span>).bind(&#123;</span><br><span class="line">  <span class="function"><span class="title">mouseover</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    $(<span class="built_in">this</span>).css(<span class="string">&quot;background-color&quot;</span>, <span class="string">&quot;blue&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">mouseout</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    $(<span class="built_in">this</span>).css(<span class="string">&quot;background-color&quot;</span>, <span class="string">&quot;black&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).on(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;该段落被点击了。&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="事件对象-event"><a href="#事件对象-event" class="headerlink" title="事件对象 event"></a>事件对象 event</h2><p><code>event</code> 对象有以下属性:</p>
<ul>
<li><code>type</code> : 事件类型 , 比如 <code>click</code></li>
<li><code>which</code> : 触发该事件的鼠标按钮或键盘的键</li>
<li><code>target</code> : 事件发生的初始对象</li>
<li><code>data</code> : 传入事件对象的数据</li>
<li><code>pageX</code> : 事件发生时 , 鼠标位置的水平坐标 ( 以页面左上角为基准 )</li>
<li><code>pageY</code> : 事件发生时 , 鼠标位置的垂直坐标 ( 以页面左上角为基准 )</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(evet);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="each"><a href="#each" class="headerlink" title="each( )"></a>each( )</h2><p><code>each()</code> 方法为每个匹配元素规定要运行的函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;li&quot;</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log($(<span class="built_in">this</span>).text());</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="jQuery-each-函数用于遍历指定的对象和数组"><a href="#jQuery-each-函数用于遍历指定的对象和数组" class="headerlink" title="jQuery.each( )  函数用于遍历指定的对象和数组"></a>jQuery.each( )  函数用于遍历指定的对象和数组</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>];</span><br><span class="line"></span><br><span class="line">$.each(arr, <span class="function">(<span class="params">index, value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`我是第<span class="subst">$&#123;index + <span class="number">1</span>&#125;</span>元素 , 值是<span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Good&quot;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$.each(obj, <span class="function">(<span class="params">key, value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="jQuery-对-HTML-的设置与捕获"><a href="#jQuery-对-HTML-的设置与捕获" class="headerlink" title="jQuery 对 HTML 的设置与捕获"></a>jQuery 对 HTML 的设置与捕获</h2><h3 id="html"><a href="#html" class="headerlink" title="html( )"></a>html( )</h3><p><code>html()</code> 设置或返回所选元素的内容 ( 包括 <code>HTML</code> 标记 )</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;HTML: &quot;</span> + $(<span class="string">&quot;#test&quot;</span>).html());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;#test2&quot;</span>).html(<span class="string">&quot;&lt;b&gt;Hello world!&lt;/b&gt;&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="text"><a href="#text" class="headerlink" title="text( )"></a>text( )</h3><p><code>text()</code> 设置或返回所选元素的文本内容</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;Text: &quot;</span> + $(<span class="string">&quot;#test&quot;</span>).text());</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;#test1&quot;</span>).text(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="val"><a href="#val" class="headerlink" title="val( )"></a>val( )</h3><p><code>val()</code> 设置或返回表单字段的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;值为: &quot;</span> + $(<span class="string">&quot;input&quot;</span>).val());</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;input&quot;</span>).val(<span class="string">&quot;666&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="text-html-以及-val-的回调函数"><a href="#text-html-以及-val-的回调函数" class="headerlink" title="text( ) html( ) 以及 val( ) 的回调函数"></a>text( ) html( ) 以及 val( ) 的回调函数</h3><p><code>text()</code> , <code>html()</code> 以及 <code>val()</code> , 同样拥有回调函数 , 回调函数有两个参数 : 被选元素列表中当前元素的下标 , 以及原始 ( 旧的 ) 值然后以函数新值返回您希望使用的字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;div&quot;</span>).text(<span class="function"><span class="keyword">function</span> (<span class="params">index, originText</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`旧文本 :<span class="subst">$&#123;originText&#125;</span>,新文本 :HelloWorld (<span class="subst">$&#123;index&#125;</span>)`</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="attr-和-prop"><a href="#attr-和-prop" class="headerlink" title="attr( ) 和 prop( )"></a>attr( ) 和 prop( )</h3><p><code>attr()</code> , <code>prop()</code> 方法用于获取和返回属性值<br><code>attr()</code> 不仅可以返回元素的原生属性 , 还可以返回元素的自定义属性<br>具有 <code>true</code> 和 <code>false</code> 两个属性值的属性 , 如 <code>checked</code>, <code>selected</code> 或者 <code>disabled</code> 使用 <code>prop()</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log($(<span class="string">&quot;a&quot;</span>).attr(<span class="string">&quot;href&quot;</span>));</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;a&quot;</span>).attr(<span class="string">&quot;href&quot;</span>, <span class="string">&quot;https://codehhr.cn&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log($(<span class="string">&quot;a&quot;</span>).prop(<span class="string">&quot;href&quot;</span>));</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;a&quot;</span>).prop(<span class="string">&quot;href&quot;</span>, <span class="string">&quot;https://codehhr.cn&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="jQuery-对-HTML-的页面尺寸操作"><a href="#jQuery-对-HTML-的页面尺寸操作" class="headerlink" title="jQuery 对 HTML 的页面尺寸操作"></a>jQuery 对 HTML 的页面尺寸操作</h1><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/jquerybox.png" alt="jQueryBox"></p>
<h2 id="width-和-height"><a href="#width-和-height" class="headerlink" title="width( ) 和 height( )"></a>width( ) 和 height( )</h2><p><code>height()</code> 方法设置或返回元素的高度 ( 不包括内边距 , 边框或外边距 )<br><code>width()</code> 方法设置或返回元素的宽度 ( 不包括内边距 , 边框或外边距 )</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`div 的宽度是: <span class="subst">$&#123;$(<span class="string">&quot;#div1&quot;</span>).width()&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`div 的高度是: <span class="subst">$&#123;$(<span class="string">&quot;#div1&quot;</span>).height(<span class="number">20</span>)&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="innerWidth-和-innerHeight"><a href="#innerWidth-和-innerHeight" class="headerlink" title="innerWidth( ) 和 innerHeight( )"></a>innerWidth( ) 和 innerHeight( )</h2><p><code>innerWidth()</code> 方法返回元素的宽度 ( 包括内边距 )<br><code>innerHeight()</code> 方法返回元素的高度 ( 包括内边距 )</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`div 宽度 , 包含内边距: <span class="subst">$&#123;$(<span class="string">&quot;#div1&quot;</span>).innerWidth()&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`div 高度 , 包含内边距: <span class="subst">$&#123;$(<span class="string">&quot;#div1&quot;</span>).innerHeight()&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="outerWidth-和-outerHeight-方法"><a href="#outerWidth-和-outerHeight-方法" class="headerlink" title="outerWidth() 和 outerHeight() 方法"></a>outerWidth() 和 outerHeight() 方法</h2><p><code>outerWidth()</code> 方法返回元素的宽度 ( 包括内边距和边框 )<br><code>outerHeight()</code> 方法返回元素的高度 ( 包括内边距和边框 )</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`div 宽度 , 包含内边距和边框: <span class="subst">$&#123;$(<span class="string">&quot;#div1&quot;</span>).outerWidth()&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`div 高度 , 包含内边距和边框: <span class="subst">$&#123;$(<span class="string">&quot;#div1&quot;</span>).outerHeight()&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="scrollTop-和-scrollLeft-方法"><a href="#scrollTop-和-scrollLeft-方法" class="headerlink" title="scrollTop() 和 scrollLeft() 方法"></a>scrollTop() 和 scrollLeft() 方法</h2><p><code>scrollTop()</code> 方法设置或者返回滚动条被卷去的元素的高度<br><code>scrollLeft()</code> 方法设置或者返回滚动条被卷去的元素的宽度</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log($(<span class="built_in">document</span>).scrollTop());</span><br><span class="line">  <span class="built_in">console</span>.log($(<span class="built_in">document</span>).scrollLeft());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="jQuery-添加元素和删除元素"><a href="#jQuery-添加元素和删除元素" class="headerlink" title="jQuery 添加元素和删除元素"></a>jQuery 添加元素和删除元素</h1><h2 id="append"><a href="#append" class="headerlink" title="append( )"></a>append( )</h2><p><code>append()</code> 方法在被选元素的结尾插入内容 ( 仍然在该元素的内部 )</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;ul&quot;</span>).append(<span class="string">&quot;&lt;li&gt;append here&lt;/li&gt;&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>🢃</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>append here<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="prepend"><a href="#prepend" class="headerlink" title="prepend( )"></a>prepend( )</h2><p><code>prepend()</code> 方法在被选元素的开头插入内容</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;ul&quot;</span>).prepend(<span class="string">&quot;&lt;li&gt;prepend here&lt;/li&gt;&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>🢃</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>prepend here<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="after"><a href="#after" class="headerlink" title="after( )"></a>after( )</h2><p>jQuery 的 <code>after()</code> 方法在被选元素之后插入内容</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).after(<span class="string">&quot;&lt;p&gt;after&lt;/p&gt;&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>🢃</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>after<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="before"><a href="#before" class="headerlink" title="before( )"></a>before( )</h2><p>jQuery 的 <code>before()</code> 方法在被选元素之前插入内容</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).before(<span class="string">&quot;&lt;p&gt;before&lt;/p&gt;&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>🢃</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>before<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="remove-和-empty"><a href="#remove-和-empty" class="headerlink" title="remove( ) 和 empty( )"></a>remove( ) 和 empty( )</h2><p><code>remove()</code> 删除被选元素 ( 及其子元素 )<br><code>empty()</code> 从被选元素中删除子元素</p>
<p><code>empty()</code>把子元素删除掉了 , 本身没有删除掉 , 所以本身占位置<br><code>remove()</code>把自己和子元素都删除掉了 , 本身已删除掉 , 所以不占位置</p>
<p><strong>比如</strong> 原 <code>DOM</code> 结构 🢃</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="empty"><a href="#empty" class="headerlink" title="empty( )"></a>empty( )</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;ul&quot;</span>).empty();</span><br></pre></td></tr></table></figure>

<p>结果 : 🢃</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 子元素都被删掉了 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="remove"><a href="#remove" class="headerlink" title="remove( )"></a>remove( )</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;ul&quot;</span>).remove();</span><br></pre></td></tr></table></figure>

<p>结果 : 🢃</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 把自己和子元素都删掉了,本身已删除掉  --&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="jquery-插件的认识"><a href="#jquery-插件的认识" class="headerlink" title="jquery 插件的认识"></a>jquery 插件的认识</h1><p><code>jquery</code> 不可能包含所有的功能 , 我们可以通过插件扩展 <code>jquery</code> 的功能<br><code>jquery</code> 有着丰富的插件 , 使用这些插件能给 <code>jquery</code> 提供一些额外的功能</p>
<h1 id="jquery-color-js-的使用"><a href="#jquery-color-js-的使用" class="headerlink" title="jquery.color.js 的使用"></a>jquery.color.js 的使用</h1><h2 id="引入-js-文件"><a href="#引入-js-文件" class="headerlink" title="引入 js 文件"></a>引入 js 文件</h2><p><code>jquery</code> 中的 <code>animate</code> 动画本身不支持变色 m 但是 <code>jquery.color.js</code> 弥补了这一缺陷<br><code>jquery.color.js</code> 依赖于 <code>jQuery</code> , 所以需要先引用 <code>jquery.js</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery.color.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).on(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;div&quot;</span>).animate(</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">width</span>: <span class="string">&quot;200px&quot;</span>,</span><br><span class="line">      <span class="string">&quot;background-color&quot;</span>: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">2000</span>,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;动画结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="jquery-lazyload-js-的使用"><a href="#jquery-lazyload-js-的使用" class="headerlink" title="jquery.lazyload.js 的使用"></a>jquery.lazyload.js 的使用</h1><h2 id="引入-js-文件-1"><a href="#引入-js-文件-1" class="headerlink" title="引入 js 文件"></a>引入 js 文件</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery.lazyload.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">&quot;640&quot;</span> <span class="attr">height</span>=<span class="string">&quot;480&quot;</span> <span class="attr">data-original</span>=<span class="string">&quot;./img/test.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&quot;img&quot;</span>).lazyload();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="jquery-ui-js-的使用"><a href="#jquery-ui-js-的使用" class="headerlink" title="jquery.ui.js 的使用"></a>jquery.ui.js 的使用</h1><p><code>jQuery</code> <code>UI</code> 是建立在 <code>jQuery</code> <code>JavaScript</code> 库上的一组用户界面交互 , 特效 , 小部件及主题</p>
<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/jquery-ui.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/jquery-ui.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h2><h3 id="操作日期选择器"><a href="#操作日期选择器" class="headerlink" title="操作日期选择器"></a>操作日期选择器</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;date&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#date&quot;</span>).datepicker();</span><br></pre></td></tr></table></figure>

<h3 id="拖动"><a href="#拖动" class="headerlink" title="拖动"></a>拖动</h3><p>允许鼠标拖动元素 , 在任意的 <code>DOM</code> 元素上启用 <code>draggable</code> 功能 , 通过鼠标点击并在视区中拖动来移动 <code>draggable</code> 对象</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;draggable&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;#draggable&quot;</span>).draggable();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
        <category>jQuery</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>javascript</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery ECharts 的使用</title>
    <url>/2021/07/06/js/jquery-echarts/</url>
    <content><![CDATA[<h1 id="ECharts-的使用"><a href="#ECharts-的使用" class="headerlink" title="ECharts 的使用"></a>ECharts 的使用</h1><h2 id="ECharts-是什么"><a href="#ECharts-是什么" class="headerlink" title="ECharts 是什么"></a>ECharts 是什么</h2><p>ECharts 是一个使用 <code>JavaScript</code> 实现的开源可视化库 , 涵盖各行业图表 , 满足各种需求<br>ECharts 遵循 <code>Apache-2.0</code> 开源协议 , 免费商用<br>ECharts 兼容当前绝大部分浏览器 ( IE8/9/10/11 , Chrome , Firefox , Safari 等 ) 及兼容多种设备 , 可随时随地任性展示</p>
<blockquote>
<h2 id="echarts-apache-org"><a href="#echarts-apache-org" class="headerlink" title="echarts.apache.org/"></a><a href="https://echarts.apache.org/">echarts.apache.org/</a></h2></blockquote>
<h2 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h2><h3 id="引入-jQuery-js-和-echarts-js"><a href="#引入-jQuery-js-和-echarts-js" class="headerlink" title="引入 jQuery.js 和 echarts.js"></a>引入 <code>jQuery.js</code> 和 <code>echarts.js</code></h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/echarts.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<script src="/js/jquery.min.js"></script>
<script src="/js/echarts.min.js"></script>

<p><img class="tom-img" src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/tom/tom.jpg"></img></p>
<h3 id="创建一个容器"><a href="#创建一个容器" class="headerlink" title="创建一个容器"></a>创建一个容器</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pie1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="给定容器具体大小"><a href="#给定容器具体大小" class="headerlink" title="给定容器具体大小"></a>给定容器具体大小</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.pie1</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="完整的数据配置"><a href="#完整的数据配置" class="headerlink" title="完整的数据配置"></a>完整的数据配置</h2><style>
.pie1,
.pie2,
.bar,
.kline,
.radar,
.draggable {
  box-sizing: border-box;
  margin: 0 auto;
  width: 100%;
  height: 600px;
  overflow: auto;
}
@media screen and (max-width: 768px){
.pie1,
.pie2,
.bar,
.kline,
.radar,
.draggable {
  box-sizing: border-box;
  margin: 0 auto;
  width: 100%;
  height: 500px;
  overflow: auto;
  }
}
</style>

<h3 id="饼状图"><a href="#饼状图" class="headerlink" title="饼状图"></a>饼状图</h3><div class="pie1"></div>

<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>饼状图配置</span></div>
    <div class="hide-content"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pie1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.pie1</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 饼图</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echartsPie1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> chart = echarts.init($(<span class="string">&quot;.pie1&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">let</span> option = &#123;</span><br><span class="line">    <span class="attr">title</span>: &#123;</span><br><span class="line">      <span class="attr">text</span>: <span class="string">&quot;Text&quot;</span>,</span><br><span class="line">      <span class="attr">subtext</span>: <span class="string">&quot;Subtext&quot;</span>,</span><br><span class="line">      <span class="attr">left</span>: <span class="string">&quot;center&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">tooltip</span>: &#123;</span><br><span class="line">      <span class="attr">trigger</span>: <span class="string">&quot;item&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">legend</span>: &#123;</span><br><span class="line">      <span class="attr">orient</span>: <span class="string">&quot;vertical&quot;</span>,</span><br><span class="line">      <span class="attr">left</span>: <span class="string">&quot;left&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">series</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;NAME&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;pie&quot;</span>,</span><br><span class="line">        <span class="attr">radius</span>: <span class="string">&quot;50%&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: [</span><br><span class="line">          &#123; <span class="attr">value</span>: <span class="number">148</span>, <span class="attr">name</span>: <span class="string">&quot;A&quot;</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">value</span>: <span class="number">735</span>, <span class="attr">name</span>: <span class="string">&quot;B&quot;</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">value</span>: <span class="number">580</span>, <span class="attr">name</span>: <span class="string">&quot;C&quot;</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">value</span>: <span class="number">484</span>, <span class="attr">name</span>: <span class="string">&quot;D&quot;</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">value</span>: <span class="number">300</span>, <span class="attr">name</span>: <span class="string">&quot;E&quot;</span> &#125;,</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">emphasis</span>: &#123;</span><br><span class="line">          <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">            <span class="attr">shadowBlur</span>: <span class="number">10</span>,</span><br><span class="line">            <span class="attr">shadowOffsetX</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">shadowColor</span>: <span class="string">&quot;rgba(0, 0, 0, 0.5)&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;;</span><br><span class="line">  chart.setOption(option);</span><br><span class="line">&#125;</span><br><span class="line">echartsPie1();</span><br></pre></td></tr></table></figure>

<script>
// 饼图
function echartsPie1() {
  let chart = echarts.init($(".pie1")[0]);
  let option = {
    title: {
      text: "Text",
      subtext: "Subtext",
      left: "center",
    },
    tooltip: {
      trigger: "item",
    },
    legend: {
      orient: "vertical",
      left: "left",
    },
    series: [
      {
        name: "NAME",
        type: "pie",
        radius: "50%",
        data: [
          { value: 148, name: "A" },
          { value: 735, name: "B" },
          { value: 580, name: "C" },
          { value: 484, name: "D" },
          { value: 300, name: "E" },
        ],
        emphasis: {
          itemStyle: {
            shadowBlur: 10,
            shadowOffsetX: 0,
            shadowColor: "rgba(0, 0, 0, 0.5)",
          },
        },
      },
    ],
  };
  chart.setOption(option);
}
echartsPie1();
</script>
</div></div>

<h3 id="带背景的柱状图"><a href="#带背景的柱状图" class="headerlink" title="带背景的柱状图"></a>带背景的柱状图</h3><div class="bar"></div>

<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>带背景的柱状图配置</span></div>
    <div class="hide-content"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.bar</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 带背景的柱状图</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echartsBar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> echart = echarts.init($(<span class="string">&quot;.bar&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">let</span> option = &#123;</span><br><span class="line">    <span class="attr">xAxis</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;category&quot;</span>,</span><br><span class="line">      <span class="attr">data</span>: [<span class="string">&quot;Mon&quot;</span>, <span class="string">&quot;Tue&quot;</span>, <span class="string">&quot;Wed&quot;</span>, <span class="string">&quot;Thu&quot;</span>, <span class="string">&quot;Fri&quot;</span>, <span class="string">&quot;Sat&quot;</span>, <span class="string">&quot;Sun&quot;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">yAxis</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;value&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">series</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;NAME&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: [<span class="number">120</span>, <span class="number">200</span>, <span class="number">150</span>, <span class="number">80</span>, <span class="number">70</span>, <span class="number">110</span>, <span class="number">130</span>],</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">        <span class="attr">showBackground</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">backgroundStyle</span>: &#123;</span><br><span class="line">          <span class="attr">color</span>: <span class="string">&quot;rgba(180, 180, 180, 0.2)&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;;</span><br><span class="line">  echart.setOption(option);</span><br><span class="line">&#125;</span><br><span class="line">echartsBar();</span><br></pre></td></tr></table></figure>

<script>
// 带背景的柱状图
function echartsBar() {
  let echart = echarts.init($(".bar")[0]);
  let option = {
    xAxis: {
      type: "category",
      data: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
    },
    yAxis: {
      type: "value",
    },
    series: [
      {
        name: "NAME",
        data: [120, 200, 150, 80, 70, 110, 130],
        type: "bar",
        showBackground: true,
        backgroundStyle: {
          color: "rgba(180, 180, 180, 0.2)",
        },
      },
    ],
  };
  echart.setOption(option);
}
echartsBar();
</script>
</div></div>

<h3 id="另一种饼图"><a href="#另一种饼图" class="headerlink" title="另一种饼图"></a>另一种饼图</h3><div class="pie2"></div>

<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>另一种饼图配置</span></div>
    <div class="hide-content"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pie2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.pie2</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echartsPie2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> echart = echarts.init($(<span class="string">&quot;.pie2&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">let</span> option = &#123;</span><br><span class="line">    <span class="attr">legend</span>: &#123;</span><br><span class="line">      <span class="attr">top</span>: <span class="string">&quot;bottom&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">toolbox</span>: &#123;</span><br><span class="line">      <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// feature: &#123;</span></span><br><span class="line">      <span class="comment">//   mark: &#123; show: true &#125;,</span></span><br><span class="line">      <span class="comment">//   dataView: &#123; show: true, readOnly: false &#125;,</span></span><br><span class="line">      <span class="comment">//   restore: &#123; show: true &#125;,</span></span><br><span class="line">      <span class="comment">//   saveAsImage: &#123; show: true &#125;,</span></span><br><span class="line">      <span class="comment">// &#125;,</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">series</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;NAME&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;pie&quot;</span>,</span><br><span class="line">        <span class="attr">radius</span>: [<span class="number">50</span>, <span class="number">250</span>],</span><br><span class="line">        <span class="attr">center</span>: [<span class="string">&quot;50%&quot;</span>, <span class="string">&quot;50%&quot;</span>],</span><br><span class="line">        <span class="attr">roseType</span>: <span class="string">&quot;area&quot;</span>,</span><br><span class="line">        <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">          <span class="attr">borderRadius</span>: <span class="number">8</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">data</span>: [</span><br><span class="line">          &#123; <span class="attr">value</span>: <span class="number">40</span>, <span class="attr">name</span>: <span class="string">&quot;rose 1&quot;</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">value</span>: <span class="number">38</span>, <span class="attr">name</span>: <span class="string">&quot;rose 2&quot;</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">value</span>: <span class="number">32</span>, <span class="attr">name</span>: <span class="string">&quot;rose 3&quot;</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">value</span>: <span class="number">30</span>, <span class="attr">name</span>: <span class="string">&quot;rose 4&quot;</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">value</span>: <span class="number">28</span>, <span class="attr">name</span>: <span class="string">&quot;rose 5&quot;</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">value</span>: <span class="number">26</span>, <span class="attr">name</span>: <span class="string">&quot;rose 6&quot;</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">value</span>: <span class="number">22</span>, <span class="attr">name</span>: <span class="string">&quot;rose 7&quot;</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">value</span>: <span class="number">18</span>, <span class="attr">name</span>: <span class="string">&quot;rose 8&quot;</span> &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;;</span><br><span class="line">  echart.setOption(option);</span><br><span class="line">&#125;</span><br><span class="line">echartsPie2();</span><br></pre></td></tr></table></figure>

<script>
function echartsPie2() {
  let echart = echarts.init($(".pie2")[0]);
  let option = {
    legend: {
      top: "bottom",
    },
    toolbox: {
      show: true,
      // feature: {
      //   mark: { show: true },
      //   dataView: { show: true, readOnly: false },
      //   restore: { show: true },
      //   saveAsImage: { show: true },
      // },
    },
    series: [
      {
        name: "NAME",
        type: "pie",
        radius: [50, 250],
        center: ["50%", "50%"],
        roseType: "area",
        itemStyle: {
          borderRadius: 8,
        },
        data: [
          { value: 40, name: "rose 1" },
          { value: 38, name: "rose 2" },
          { value: 32, name: "rose 3" },
          { value: 30, name: "rose 4" },
          { value: 28, name: "rose 5" },
          { value: 26, name: "rose 6" },
          { value: 22, name: "rose 7" },
          { value: 18, name: "rose 8" },
        ],
      },
    ],
  };
  echart.setOption(option);
}
echartsPie2();
</script>
</div></div>

<h3 id="K-线图"><a href="#K-线图" class="headerlink" title="K 线图"></a>K 线图</h3><div class="kline"></div>

<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>K 线图配置</span></div>
    <div class="hide-content"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;kline&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.kline</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echartsKline</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> echart = echarts.init($(<span class="string">&quot;.kline&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">let</span> option = &#123;</span><br><span class="line">    <span class="attr">xAxis</span>: &#123;</span><br><span class="line">      <span class="attr">data</span>: [<span class="string">&quot;2017-10-24&quot;</span>, <span class="string">&quot;2017-10-25&quot;</span>, <span class="string">&quot;2017-10-26&quot;</span>, <span class="string">&quot;2017-10-27&quot;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">yAxis</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">series</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;k&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: [</span><br><span class="line">          [<span class="number">20</span>, <span class="number">34</span>, <span class="number">10</span>, <span class="number">38</span>],</span><br><span class="line">          [<span class="number">40</span>, <span class="number">35</span>, <span class="number">30</span>, <span class="number">50</span>],</span><br><span class="line">          [<span class="number">31</span>, <span class="number">38</span>, <span class="number">33</span>, <span class="number">44</span>],</span><br><span class="line">          [<span class="number">38</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">42</span>],</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;;</span><br><span class="line">  echart.setOption(option);</span><br><span class="line">&#125;</span><br><span class="line">echartsKline();</span><br></pre></td></tr></table></figure>

<script>
function echartsKline() {
  let echart = echarts.init($(".kline")[0]);
  let option = {
    xAxis: {
      data: ["2017-10-24", "2017-10-25", "2017-10-26", "2017-10-27"],
    },
    yAxis: {},
    series: [
      {
        type: "k",
        data: [
          [20, 34, 10, 38],
          [40, 35, 30, 50],
          [31, 38, 33, 44],
          [38, 15, 5, 42],
        ],
      },
    ],
  };
  echart.setOption(option);
}
echartsKline();
</script>
</div></div>

<h3 id="雷达图"><a href="#雷达图" class="headerlink" title="雷达图"></a>雷达图</h3><div class="radar"></div>

<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>雷达图配置</span></div>
    <div class="hide-content"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;radar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.radar</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echartsRadar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> echart = echarts.init($(<span class="string">&quot;.radar&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">let</span> option = &#123;</span><br><span class="line">    <span class="attr">title</span>: &#123;</span><br><span class="line">      <span class="attr">text</span>: <span class="string">&quot;基础雷达图&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">legend</span>: &#123;</span><br><span class="line">      <span class="attr">data</span>: [<span class="string">&quot;预算分配（Allocated Budget）&quot;</span>, <span class="string">&quot;实际开销（Actual Spending）&quot;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">radar</span>: &#123;</span><br><span class="line">      <span class="comment">// shape: &#x27;circle&#x27;,</span></span><br><span class="line">      <span class="attr">indicator</span>: [</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&quot;销售（Sales）&quot;</span>, <span class="attr">max</span>: <span class="number">6500</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&quot;管理（Administration）&quot;</span>, <span class="attr">max</span>: <span class="number">16000</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&quot;信息技术（Information Technology）&quot;</span>, <span class="attr">max</span>: <span class="number">30000</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&quot;客服（Customer Support）&quot;</span>, <span class="attr">max</span>: <span class="number">38000</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&quot;研发（Development）&quot;</span>, <span class="attr">max</span>: <span class="number">52000</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&quot;市场（Marketing）&quot;</span>, <span class="attr">max</span>: <span class="number">25000</span> &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">series</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;预算 vs 开销（Budget vs spending）&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;radar&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">value</span>: [<span class="number">4200</span>, <span class="number">3000</span>, <span class="number">20000</span>, <span class="number">35000</span>, <span class="number">50000</span>, <span class="number">18000</span>],</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;预算分配（Allocated Budget）&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">value</span>: [<span class="number">5000</span>, <span class="number">14000</span>, <span class="number">28000</span>, <span class="number">26000</span>, <span class="number">42000</span>, <span class="number">21000</span>],</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;实际开销（Actual Spending）&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;;</span><br><span class="line">  echart.setOption(option);</span><br><span class="line">&#125;</span><br><span class="line">echartsRadar();</span><br></pre></td></tr></table></figure>

<script>
function echartsRadar() {
  let echart = echarts.init($(".radar")[0]);
  let option = {
    title: {
      text: "基础雷达图",
    },
    legend: {
      data: ["预算分配（Allocated Budget）", "实际开销（Actual Spending）"],
    },
    radar: {
      // shape: 'circle',
      indicator: [
        { name: "销售（Sales）", max: 6500 },
        { name: "管理（Administration）", max: 16000 },
        { name: "信息技术（Information Technology）", max: 30000 },
        { name: "客服（Customer Support）", max: 38000 },
        { name: "研发（Development）", max: 52000 },
        { name: "市场（Marketing）", max: 25000 },
      ],
    },
    series: [
      {
        name: "预算 vs 开销（Budget vs spending）",
        type: "radar",
        data: [
          {
            value: [4200, 3000, 20000, 35000, 50000, 18000],
            name: "预算分配（Allocated Budget）",
          },
          {
            value: [5000, 14000, 28000, 26000, 42000, 21000],
            name: "实际开销（Actual Spending）",
          },
        ],
      },
    ],
  };
  echart.setOption(option);
}
echartsRadar();
</script>
</div></div>

<h3 id="可拖拽图"><a href="#可拖拽图" class="headerlink" title="可拖拽图"></a>可拖拽图</h3><div class="draggable"></div>

<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>可拖拽图配置</span></div>
    <div class="hide-content"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;draggable&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.draggable</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echartsDraggable</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> myChart = echarts.init($(<span class="string">&quot;.draggable&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">let</span> symbolSize = <span class="number">20</span>;</span><br><span class="line">  <span class="keyword">let</span> data = [</span><br><span class="line">    [<span class="number">40</span>, -<span class="number">10</span>],</span><br><span class="line">    [-<span class="number">30</span>, -<span class="number">5</span>],</span><br><span class="line">    [-<span class="number">76.5</span>, <span class="number">20</span>],</span><br><span class="line">    [-<span class="number">63.5</span>, <span class="number">40</span>],</span><br><span class="line">    [-<span class="number">22.1</span>, <span class="number">50</span>],</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> option = &#123;</span><br><span class="line">    <span class="attr">title</span>: &#123;</span><br><span class="line">      <span class="attr">text</span>: <span class="string">&quot;Try Dragging these Points&quot;</span>,</span><br><span class="line">      <span class="attr">left</span>: <span class="string">&quot;center&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">tooltip</span>: &#123;</span><br><span class="line">      <span class="attr">triggerOn</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">      <span class="attr">formatter</span>: <span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">          <span class="string">&quot;X: &quot;</span> +</span><br><span class="line">          params.data[<span class="number">0</span>].toFixed(<span class="number">2</span>) +</span><br><span class="line">          <span class="string">&quot;&lt;br&gt;Y: &quot;</span> +</span><br><span class="line">          params.data[<span class="number">1</span>].toFixed(<span class="number">2</span>)</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">grid</span>: &#123;</span><br><span class="line">      <span class="attr">top</span>: <span class="string">&quot;8%&quot;</span>,</span><br><span class="line">      <span class="attr">bottom</span>: <span class="string">&quot;12%&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">xAxis</span>: &#123;</span><br><span class="line">      <span class="attr">min</span>: -<span class="number">100</span>,</span><br><span class="line">      <span class="attr">max</span>: <span class="number">70</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;value&quot;</span>,</span><br><span class="line">      <span class="attr">axisLine</span>: &#123; <span class="attr">onZero</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">yAxis</span>: &#123;</span><br><span class="line">      <span class="attr">min</span>: -<span class="number">30</span>,</span><br><span class="line">      <span class="attr">max</span>: <span class="number">60</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;value&quot;</span>,</span><br><span class="line">      <span class="attr">axisLine</span>: &#123; <span class="attr">onZero</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">dataZoom</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;slider&quot;</span>,</span><br><span class="line">        <span class="attr">xAxisIndex</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">filterMode</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;slider&quot;</span>,</span><br><span class="line">        <span class="attr">yAxisIndex</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">filterMode</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;inside&quot;</span>,</span><br><span class="line">        <span class="attr">xAxisIndex</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">filterMode</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;inside&quot;</span>,</span><br><span class="line">        <span class="attr">yAxisIndex</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">filterMode</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">series</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;a&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;line&quot;</span>,</span><br><span class="line">        <span class="attr">smooth</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">symbolSize</span>: symbolSize,</span><br><span class="line">        <span class="attr">data</span>: data,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    myChart.setOption(&#123;</span><br><span class="line">      <span class="attr">graphic</span>: data.map(<span class="function"><span class="keyword">function</span> (<span class="params">item, dataIndex</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;circle&quot;</span>,</span><br><span class="line">          <span class="attr">position</span>: myChart.convertToPixel(<span class="string">&quot;grid&quot;</span>, item),</span><br><span class="line">          <span class="attr">shape</span>: &#123;</span><br><span class="line">            <span class="attr">cx</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">cy</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">r</span>: symbolSize / <span class="number">2</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">invisible</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">draggable</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">ondrag</span>: <span class="function"><span class="keyword">function</span> (<span class="params">dx, dy</span>) </span>&#123;</span><br><span class="line">            onPointDragging(dataIndex, [<span class="built_in">this</span>.x, <span class="built_in">this</span>.y]);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">onmousemove</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            showTooltip(dataIndex);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">onmouseout</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            hideTooltip(dataIndex);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">z</span>: <span class="number">100</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">&quot;resize&quot;</span>, updatePosition);</span><br><span class="line"></span><br><span class="line">  myChart.on(<span class="string">&quot;dataZoom&quot;</span>, updatePosition);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">updatePosition</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    myChart.setOption(&#123;</span><br><span class="line">      <span class="attr">graphic</span>: data.map(<span class="function"><span class="keyword">function</span> (<span class="params">item, dataIndex</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">position</span>: myChart.convertToPixel(<span class="string">&quot;grid&quot;</span>, item),</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">showTooltip</span>(<span class="params">dataIndex</span>) </span>&#123;</span><br><span class="line">    myChart.dispatchAction(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;showTip&quot;</span>,</span><br><span class="line">      <span class="attr">seriesIndex</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">dataIndex</span>: dataIndex,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">hideTooltip</span>(<span class="params">dataIndex</span>) </span>&#123;</span><br><span class="line">    myChart.dispatchAction(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;hideTip&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onPointDragging</span>(<span class="params">dataIndex, pos</span>) </span>&#123;</span><br><span class="line">    data[dataIndex] = myChart.convertFromPixel(<span class="string">&quot;grid&quot;</span>, pos);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update data</span></span><br><span class="line">    myChart.setOption(&#123;</span><br><span class="line">      <span class="attr">series</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="string">&quot;a&quot;</span>,</span><br><span class="line">          <span class="attr">data</span>: data,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  myChart.setOption(option);</span><br><span class="line">&#125;</span><br><span class="line">echartsDraggable();</span><br></pre></td></tr></table></figure>

<script>
function echartsDraggable() {
  let myChart = echarts.init($(".draggable")[0]);
  let symbolSize = 20;
  let data = [
    [40, -10],
    [-30, -5],
    [-76.5, 20],
    [-63.5, 40],
    [-22.1, 50],
  ];

  let option = {
    title: {
      text: "Try Dragging these Points",
      left: "center",
    },
    tooltip: {
      triggerOn: "none",
      formatter: function (params) {
        return (
          "X: " +
          params.data[0].toFixed(2) +
          "<br>Y: " +
          params.data[1].toFixed(2)
        );
      },
    },
    grid: {
      top: "8%",
      bottom: "12%",
    },
    xAxis: {
      min: -100,
      max: 70,
      type: "value",
      axisLine: { onZero: false },
    },
    yAxis: {
      min: -30,
      max: 60,
      type: "value",
      axisLine: { onZero: false },
    },
    dataZoom: [
      {
        type: "slider",
        xAxisIndex: 0,
        filterMode: "none",
      },
      {
        type: "slider",
        yAxisIndex: 0,
        filterMode: "none",
      },
      {
        type: "inside",
        xAxisIndex: 0,
        filterMode: "none",
      },
      {
        type: "inside",
        yAxisIndex: 0,
        filterMode: "none",
      },
    ],
    series: [
      {
        id: "a",
        type: "line",
        smooth: true,
        symbolSize: symbolSize,
        data: data,
      },
    ],
  };

  setTimeout(function () {
    myChart.setOption({
      graphic: data.map(function (item, dataIndex) {
        return {
          type: "circle",
          position: myChart.convertToPixel("grid", item),
          shape: {
            cx: 0,
            cy: 0,
            r: symbolSize / 2,
          },
          invisible: true,
          draggable: true,
          ondrag: function (dx, dy) {
            onPointDragging(dataIndex, [this.x, this.y]);
          },
          onmousemove: function () {
            showTooltip(dataIndex);
          },
          onmouseout: function () {
            hideTooltip(dataIndex);
          },
          z: 100,
        };
      }),
    });
  }, 0);

  window.addEventListener("resize", updatePosition);

  myChart.on("dataZoom", updatePosition);

  function updatePosition() {
    myChart.setOption({
      graphic: data.map(function (item, dataIndex) {
        return {
          position: myChart.convertToPixel("grid", item),
        };
      }),
    });
  }

  function showTooltip(dataIndex) {
    myChart.dispatchAction({
      type: "showTip",
      seriesIndex: 0,
      dataIndex: dataIndex,
    });
  }

  function hideTooltip(dataIndex) {
    myChart.dispatchAction({
      type: "hideTip",
    });
  }

  function onPointDragging(dataIndex, pos) {
    data[dataIndex] = myChart.convertFromPixel("grid", pos);

    // Update data
    myChart.setOption({
      series: [
        {
          id: "a",
          data: data,
        },
      ],
    });
  }
  myChart.setOption(option);
}
echartsDraggable();
</script>
</div></div>

<h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
      <categories>
        <category>js</category>
        <category>jQuery</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>javascript</tag>
        <tag>jQuery</tag>
        <tag>echarts</tag>
      </tags>
  </entry>
  <entry>
    <title>原生 JS 实现拖放</title>
    <url>/2020/06/05/js/js-Drag/</url>
    <content><![CDATA[<h1 id="原生-JS-快速实现拖放"><a href="#原生-JS-快速实现拖放" class="headerlink" title="原生 JS 快速实现拖放"></a>原生 JS 快速实现拖放</h1><p>拖放是很常见的一种交互效果，很多时候我们都会借助于第三方的控件来实现，其实用原生 js 实现起来也非常的方便。接下来我们就用原生 js 和 css 快速实现拖放效果</p>
<h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;droppable&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;draggable&quot;</span> <span class="attr">draggable</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;droppable&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;droppable&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;droppable&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;droppable&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意点： 1. 容器的的 class 为 droppable，用于接收被拖拽的元素，可被拖拽的元素 class 为 draggable，同时设置 draggable 属性为 true，表示该元素可以被拖拽。 2. 默认情况下，只有图片、链接还有被选中的文字能被拖拽，其他元素需要设置 draggable 为 true 才能被拖拽。所以为了凸显 draggable 的用法，这里使用 <code>&lt;div&gt;</code> 而不是 <code>&lt;image&gt;</code> 来作为被拖拽的元素。</p>
<h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><p>在实现样式的时候，除了实现静态的样式，一些过渡状态也需要增加样式以提升视觉体验：</p>
<ol>
<li> 元素被拖动的过程中增加边框等效果； 2. 当元素被拖动到容器上方时，容器也应增加样式表明容器可以接收一个被拖拽的元素。</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: darksalmon;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.draggable</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;http://source.unsplash.com/random/150x150&quot;</span>);</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.droppable</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">160px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">160px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> salmon solid;</span><br><span class="line">  <span class="attribute">background-color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.dragging</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">4px</span> yellow solid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.drag-over</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f4f4f4</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: dashed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.invisible</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意点： 1. 图片来源于 百度; 2. .dragging 为 draggable 元素正在被拖动的状态，增加黄色 border； 3. .drag-over 为 draggable 元素被拖动到容器上方时容器的状态，增加灰色虚线 border。</p>
<h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><p>最后，我们需要通过 js 监听 draggable 和 droppable 的相关的事件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询draggable和droppable</span></span><br><span class="line"><span class="keyword">const</span> draggable = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.draggable&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> droppables = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;.droppable&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听draggable的相关事件</span></span><br><span class="line">draggable.addEventListener(<span class="string">&quot;dragstart&quot;</span>, dragStart);</span><br><span class="line">draggable.addEventListener(<span class="string">&quot;dragend&quot;</span>, dragEnd);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dragStart</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.className += <span class="string">&quot; dragging&quot;</span>;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.className = <span class="string">&quot;invisible&quot;</span>;</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dragEnd</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.className = <span class="string">&quot;draggable&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听droppable的相关事件</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> droppable <span class="keyword">of</span> droppables) &#123;</span><br><span class="line">  droppable.addEventListener(<span class="string">&quot;dragover&quot;</span>, dragOver);</span><br><span class="line">  droppable.addEventListener(<span class="string">&quot;dragleave&quot;</span>, dragLeave);</span><br><span class="line">  droppable.addEventListener(<span class="string">&quot;dragenter&quot;</span>, dragEnter);</span><br><span class="line">  droppable.addEventListener(<span class="string">&quot;drop&quot;</span>, dragDrop);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dragOver</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dragEnter</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">  <span class="built_in">this</span>.className += <span class="string">&quot; drag-over&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dragLeave</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.className = <span class="string">&quot;droppable&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dragDrop</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.className = <span class="string">&quot;droppable&quot;</span>;</span><br><span class="line">  <span class="built_in">this</span>.append(draggable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意点： 1. 当 draggable 元素被拖动时，原来容器中的 draggable 元素并不会消失，需要我们手动将其隐藏（class 设置为 invisible），如果同步操作会立马触发 dragend 事件导致拖动效果消失，所以在 setTimeout 的回调中异步设置可确保拖动操作开始后再隐藏 draggable 元素； 2. 在 dragEnter 和 dragOver 方法中我们需要通过 preventDefault 来取消事件以表明容器是一个合法的 droppable 元素，不然容器的 drop 事件将无法触发，接下来的操作也将无法进行，详细解释请参考 MDN DropTarget； 3.在 dragDrop 方法中直接使用 append 方法将 draggable 元素移动至当前容器下面。</p>
<hr>
<p>完整示例演示：<a href="https://codehhr.gitee.io/web/jsdrag/">https://codehhr.gitee.io/web/jsdrag/</a></p>
<h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>javascript</tag>
        <tag>拖放</tag>
      </tags>
  </entry>
  <entry>
    <title>Js API</title>
    <url>/2021/05/19/js/js-api/</url>
    <content><![CDATA[<h1 id="DOM-操作"><a href="#DOM-操作" class="headerlink" title="DOM 操作"></a>DOM 操作</h1><h1 id="webapi-介绍"><a href="#webapi-介绍" class="headerlink" title="webapi 介绍"></a>webapi 介绍</h1><h2 id="api-的概念"><a href="#api-的概念" class="headerlink" title="api 的概念"></a>api 的概念</h2><p><code>API</code>（ Application Programming Interface , 应用程序编程接口 ）是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。例如：<code>alert()</code>、 <code>prompt()</code>、<code>log()</code>、<code>reverse()</code>、<code>getMonths()</code><br>任何开发语言都有自己的 <code>API</code><br><code>API</code> 的特征输入和输出( I/O )<br><code>API</code> 的使用方法( <code>console.log()</code> )</p>
<h2 id="webapi-的概念"><a href="#webapi-的概念" class="headerlink" title="webapi 的概念"></a>webapi 的概念</h2><p>浏览器提供的一套操作浏览器功能和页面元素的 <code>API</code> ( <code>BOM</code> 和 <code>DOM</code> )<br>我们可以通过 <code>API</code> 去操作 <code>DOM</code> 和 <code>BOM</code><br>此处的 web <code>API</code> 特指浏览器提供的 <code>API</code>(一组方法)，web <code>API</code> 在后面的课程中有其它含义</p>
<h2 id="JavaScript-的组成"><a href="#JavaScript-的组成" class="headerlink" title="JavaScript 的组成"></a>JavaScript 的组成</h2><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/jscontent.png" alt="js"></p>
<h1 id="DOM-概念"><a href="#DOM-概念" class="headerlink" title="DOM 概念"></a>DOM 概念</h1><p><strong>了解</strong></p>
<p>事件基础文档对象模型（Document Object Model，简称 <code>DOM</code>），是 W3C 组织推荐的处理可扩展标志语言的标准编程接口。在网页上，组织页面（或文档）的对象被组织在一个树形结构中，用来表示文档中对象的标准模型就称为 <code>DOM</code>。Document Object Model 的历史可以追溯至 1990 年代后期微软与 Netscape 的“浏览器大战”，双方为了在 <code>JavaScript</code> 与 <code>JScript</code> 一决生死，于是大规模的赋予浏览器强大的功能。微软在网页技术上加入了不少专属事物，既有 VBScript、ActiveX、以及微软自家的 DHTML 格式等，使不少网页使用非微软平台及浏览器无法正常显示。DOM 即是当时蕴酿出来的杰作。</p>
<p><code>DOM</code> 又称为文档树模型</p>
<p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/dom.jpeg" alt="DOM"></p>
<p>文档：一个网页可以称为文档<br>节点：网页中的所有内容都是节点（标签、属性、文本、注释等）<br>元素：网页中的标签<br>属性：标签(元素)的属性</p>
<h1 id="模拟文档树结构"><a href="#模拟文档树结构" class="headerlink" title="模拟文档树结构"></a>模拟文档树结构</h1><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/simulationdom.jpeg" alt="simulationdom"></p>
<h1 id="操作-DOM"><a href="#操作-DOM" class="headerlink" title="操作 DOM"></a>操作 DOM</h1><h2 id="获取元素的方式"><a href="#获取元素的方式" class="headerlink" title="获取元素的方式"></a>获取元素的方式</h2><h3 id="根据-id-获取元素"><a href="#根据-id-获取元素" class="headerlink" title="根据 id 获取元素"></a>根据 id 获取元素</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;box1&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="通过类名获取元素"><a href="#通过类名获取元素" class="headerlink" title="通过类名获取元素"></a>通过类名获取元素</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;p1&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(p1)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(p1.length);</span><br><span class="line"><span class="built_in">console</span>.log(p1[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(p1[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure>

<p><strong>伪数组定义</strong>：</p>
<p>1、拥有 <code>length</code> 属性，其它属性（索引）为非负整数(对象中的索引会被当做字符串来处理，这里你可以当做是个非负整数串来理解)<br>2、不具有数组所具有的方法<br>伪数组，就是像数组一样有  <code>length</code>  属性，也有  0、1、2、3  等属性的对象，看起来就像数组一样，但不是数组<br>常见的参数的参数 <code>arguments</code>，<code>DOM</code> 对象列表（比如通过 <code>document.getElementsByTags</code> 得到的列表）</p>
<h3 id="通过标签名获取元素"><a href="#通过标签名获取元素" class="headerlink" title="通过标签名获取元素"></a>通过标签名获取元素</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tag1 = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(tag1);</span><br><span class="line"><span class="built_in">console</span>.log(tag1[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>

<h3 id="通过-name-名获取元素"><a href="#通过-name-名获取元素" class="headerlink" title="通过 name 名获取元素"></a>通过 name 名获取元素</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> userList = <span class="built_in">document</span>.getElementsByName(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(userList);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; userList.length; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(userList[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="通过选择器的-querySelector-获取元素"><a href="#通过选择器的-querySelector-获取元素" class="headerlink" title="通过选择器的 querySelector 获取元素"></a>通过选择器的 querySelector 获取元素</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">querySlector(); <span class="comment">// 获取指定选择器的第一个元素，参数就是选择器的名称</span></span><br><span class="line"><span class="keyword">var</span> div1 = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.box1&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(div1);</span><br><span class="line"><span class="keyword">var</span> li1 = <span class="built_in">document</span>.querySelector(<span class="string">&quot;ul&gt;li&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(li1);</span><br><span class="line"><span class="keyword">var</span> user1 = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#user1&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(user1);</span><br></pre></td></tr></table></figure>

<h3 id="通过选择器的-querySelectorAll-获取元素"><a href="#通过选择器的-querySelectorAll-获取元素" class="headerlink" title="通过选择器的 querySelectorAll 获取元素"></a>通过选择器的 querySelectorAll 获取元素</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">querySelectorAll(); <span class="comment">// 获取指定选择器的所有的元素，参数就是选择器的名称</span></span><br><span class="line"><span class="keyword">var</span> boxList = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;.box1&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(boxList);</span><br><span class="line"><span class="keyword">var</span> listLi = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;ul li&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(listLi);</span><br></pre></td></tr></table></figure>

<h2 id="事件初识"><a href="#事件初识" class="headerlink" title="事件初识"></a>事件初识</h2><p>事件 : 触发-响应机制<br><code>Event</code> 接口表示在 <code>DOM</code> 中发生的任何事件，一些是用户生成的（例如鼠标或键盘事件），而其他由 <code>API</code> 生成。</p>
<h3 id="事件三要素"><a href="#事件三要素" class="headerlink" title="事件三要素"></a>事件三要素</h3><p>事件源 : 触发(被)事件的元素<br>事件类型 : 事件的触发方式(例如鼠标点击或键盘点击)<br>事件处理程序 : 事件触发后要执行的代码(函数形式)</p>
<h3 id="事件的基本使用"><a href="#事件的基本使用" class="headerlink" title="事件的基本使用"></a>事件的基本使用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">&quot;box&quot;</span>);</span><br><span class="line">box.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;代码会在box被点击后执行&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>鼠标单击事件：<code>onclick</code> 浏览器加载完成事件：<code>onload</code></p>
<h3 id="事件触发的多种写法"><a href="#事件触发的多种写法" class="headerlink" title="事件触发的多种写法"></a>事件触发的多种写法</h3><p><code>HTML</code> 内部书写所有<br><code>HTML</code> 行内触发方法<br><code>HTML</code> 外部书写</p>
<h2 id="非表单元素的属性操作"><a href="#非表单元素的属性操作" class="headerlink" title="非表单元素的属性操作"></a>非表单元素的属性操作</h2><p><code>href</code>、<code>title</code>、<code>id</code>、<code>src</code>、<code>className</code>、<code>width</code>、<code>height</code> 等等</p>
<h3 id="添加-src-属性值显示图片"><a href="#添加-src-属性值显示图片" class="headerlink" title="添加 src 属性值显示图片"></a>添加 src 属性值显示图片</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">imgBox.src = <span class="string">&quot;images/jie.jpg&quot;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="改变图片大小"><a href="#改变图片大小" class="headerlink" title="改变图片大小"></a>改变图片大小</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">imgBox.width = <span class="number">750</span>;</span><br><span class="line">imgBox.height = <span class="number">500</span>;</span><br></pre></td></tr></table></figure>

<h3 id="通过-style-改变宽高"><a href="#通过-style-改变宽高" class="headerlink" title="通过 style 改变宽高"></a>通过 style 改变宽高</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">imgBox.style.width = <span class="number">750</span> + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">imgBox.style.height = <span class="number">500</span> + <span class="string">&quot;px&quot;</span>;</span><br><span class="line"><span class="comment">//通过样式属性设置宽高、位置的属性类型是字符串，需要加上 px</span></span><br><span class="line"><span class="comment">// 凡是 css 中这个属性是多个单词的写法,在 js 代码中 DOM 操作的时候.把-干掉,后面的单词的首字母大写即可</span></span><br></pre></td></tr></table></figure>

<h3 id="通过类名改变宽度"><a href="#通过类名改变宽度" class="headerlink" title="通过类名改变宽度"></a>通过类名改变宽度</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">imgBox.className = <span class="string">&quot;imgCl&quot;</span>;</span><br><span class="line"><span class="comment">//className  会覆盖之前设置好的类名！</span></span><br></pre></td></tr></table></figure>

<h3 id="隐藏元素"><a href="#隐藏元素" class="headerlink" title="隐藏元素"></a>隐藏元素</h3><ul>
<li><code>src = &quot;&quot;</code>;</li>
<li><code>display = none</code>; 不占位置的</li>
<li><code>visibility = &quot;hidden</code>“; 占位置</li>
<li><code>opacity = 0</code>; 占位置</li>
</ul>
<h2 id="表单元素属性操作"><a href="#表单元素属性操作" class="headerlink" title="表单元素属性操作"></a>表单元素属性操作</h2><ul>
<li><code>value</code> 用于大部分表单元素的内容获取( <code>option</code> 除外)</li>
<li><code>type</code> 可以获取 <code>input</code> 标签的类型(输入框或复选框等)</li>
<li><code>disabled</code> 禁用属性 <code>checked</code> 复选框选中属性</li>
<li><code>selected</code> 下拉菜单选中属性</li>
<li><code>checked</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&quot;input&quot;</span>).onblur = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.value, <span class="built_in">this</span>.type);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="this-的指向问题"><a href="#this-的指向问题" class="headerlink" title="this 的指向问题"></a>this 的指向问题</h2><ul>
<li>普通函数中，<code>this</code> 指向 <code>window</code></li>
<li>构造函数中，<code>this</code> 指向实例化对象</li>
<li>对象函数中，<code>this</code> 指向当前的对象</li>
<li>事件函数中，<code>this</code> 指向事件源</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// this 指向</span></span><br><span class="line"><span class="comment">// 普通函数,指向 window</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">f1();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.构造函数,指向实例对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name = <span class="string">&quot;lisi&quot;</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">&quot;666&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 对象函数,this</span></span><br><span class="line"><span class="keyword">var</span> pp = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;777&quot;</span>,</span><br><span class="line">  <span class="attr">func</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">pp.func();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 事件函数指向事件源</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;button&quot;</span>)[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="InnerText"><a href="#InnerText" class="headerlink" title="InnerText"></a>InnerText</h2><p>能用 <code>switch</code> 语句实现的就一定可以使用 <code>if</code> 实现，但是反之不一定，如果是区间范围就采用 <code>if</code>，如果是等值判断使用 <code>switch</code><br>返回被选元素的文本内容</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;p1&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p1.innerText);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置被选元素的文本内容;</span></span><br><span class="line">btn1.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  p1.innerText = <span class="string">&quot;文本改变了哈&quot;</span>; <span class="comment">// 设置文本</span></span><br><span class="line">  <span class="built_in">console</span>.log(p1.innerText);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>案例</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">//   window.onload = function () &#123;</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//     document.querySelector(&quot;#div&quot;).onclick = function () &#123;</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//       alert(&quot;666&quot;);</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//     &#125;;</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//   &#125;;</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;fun()&quot;</span>&gt;</span>IDdiv<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div&quot;</span>&gt;</span>div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;input&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">    <span class="attr">src</span>=<span class="string">&quot;https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/tusiji.png&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">alt</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">width</span>=<span class="string">&quot;200&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 根据 id 获取元素</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">&quot;div&quot;</span>));</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 通过类名获取元素</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;div&quot;</span>));</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;div&quot;</span>)[<span class="number">0</span>]);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> divs = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; divs.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(divs[i]);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 通过标签名获取元素</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;div&quot;</span>)[<span class="number">0</span>]);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 通过name名获取元素</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementsByName(<span class="string">&quot;input&quot;</span>)[<span class="number">0</span>]);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 通过选择器的querySelector获取元素</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelector(<span class="string">&quot;#div&quot;</span>));</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelector(<span class="string">&quot;.div&quot;</span>));</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 通过选择器的querySelectorAll获取元素</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;.div&quot;</span>)[<span class="number">0</span>]);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.querySelector(<span class="string">&quot;.submit&quot;</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;666&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      alert(<span class="string">&quot;fun&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;div&quot;</span>)[<span class="number">0</span>].innerText = <span class="string">&quot;div666&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;div&quot;</span>)[<span class="number">1</span>].innerHTML = <span class="string">&quot;&lt;h1&gt;h1&lt;/h1&gt;&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.querySelector(<span class="string">&quot;img&quot;</span>).width = <span class="number">240</span>;</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./script.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>作业</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 作业1：利用className属性来完成开关灯效果</span></span><br><span class="line"><span class="keyword">var</span> islight = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&quot;.toggle&quot;</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (islight) &#123;</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">&quot;body&quot;</span>).className = <span class="string">&quot;dark&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.innerText = <span class="string">&quot;开灯&quot;</span>;</span><br><span class="line">    islight = !islight;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">&quot;body&quot;</span>).className = <span class="string">&quot;light&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.innerText = <span class="string">&quot;关灯&quot;</span>;</span><br><span class="line">    islight = !islight;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作业2：显示和隐藏元素</span></span><br><span class="line"><span class="keyword">var</span> display = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&quot;.ctrl&quot;</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (display) &#123;</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">&quot;div&quot;</span>).style.display = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">    display = !display;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">&quot;div&quot;</span>).style.display = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">    display = !display;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  作业3：单击按钮利用类名设置元素隔行换色;</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&quot;.zebracolor&quot;</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> lis = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">      lis[i].className = <span class="string">&quot;dark&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      lis[i].className = <span class="string">&quot;light&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="属性操作与事件"><a href="#属性操作与事件" class="headerlink" title="属性操作与事件"></a>属性操作与事件</h1><h2 id="画廊"><a href="#画廊" class="headerlink" title="画廊"></a>画廊</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.preview</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">160px</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.red</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.blue</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;preview&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">      <span class="attr">src</span>=<span class="string">&quot;https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/tusiji.png&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">alt</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">      <span class="attr">src</span>=<span class="string">&quot;https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/tusiji2.jpeg&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">alt</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;view&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">      <span class="attr">width</span>=<span class="string">&quot;480&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">src</span>=<span class="string">&quot;https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/tusiji.png&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">alt</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 画廊</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> imgList = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;.preview img&quot;</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> bigImg = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.view img&quot;</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; imgList.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">    imgList[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      bigImg.src = <span class="built_in">this</span>.src;</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="阻止-a-链接跳转"><a href="#阻止-a-链接跳转" class="headerlink" title="阻止 a 链接跳转"></a>阻止 a 链接跳转</h2><p><strong>三种写法</strong></p>
<h3 id="第一种-缺点-代码不分离-不符合低耦合-高内聚的规范"><a href="#第一种-缺点-代码不分离-不符合低耦合-高内聚的规范" class="headerlink" title="第一种 ( 缺点: 代码不分离,不符合低耦合,高内聚的规范 )"></a>第一种 ( 缺点: 代码不分离,不符合低耦合,高内聚的规范 )</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://codehhr.cn&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;console.log(&#x27;666&#x27;);return false&quot;</span>&gt;</span> HHR <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://codehhr.cn&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;return func2()&quot;</span>&gt;</span>HHR<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h3><p>直接 <code>ODM</code> 操作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;link&quot;</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="新事件"><a href="#新事件" class="headerlink" title="新事件"></a>新事件</h2><h3 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h3><p><code>onmouseover</code> 鼠标移入事件：当鼠标指针在元素上方时触发。<br><code>onmouseout</code> 鼠标移出事件：在鼠标指针移出元素后触发<br>二者搭配使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dtList = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;dt&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; dtList.length; i++) &#123;</span><br><span class="line">  dtList[i].onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.style.fontSize = <span class="string">&quot;20px&quot;</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  dtList[i].onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.style.fontSize = <span class="string">&quot;16px&quot;</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>onmouseenter</code> 鼠标进入事件：在鼠标指针进入到元素上时触发。<br><code>onmouseleave</code> 鼠标离开事件：在鼠标指针离开元素后触发</p>
<p><strong><code>onmouseover</code> 会冒泡</strong><br><strong><code>onmouseenter</code> 不会冒泡</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dtList = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;dt&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; dtList.length; i++) &#123;</span><br><span class="line">  dtList[i].onmouseenter = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.style.fontSize = <span class="string">&quot;20px&quot;</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  dtList[i].onmouseleave = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.style.fontSize = <span class="string">&quot;16px&quot;</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>onfocus</code> 获取焦点事件：在鼠标光标获取输入框焦点时触发<br><code>onblur</code> 失去焦点事件：在鼠标光标失去焦点时触发。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取焦点事件</span></span><br><span class="line">user.onfocus = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.style.border = <span class="string">&quot;1px solid red&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 失去焦点事件</span></span><br><span class="line">user.onblur = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.value);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>onclick</code> 单击事件：在鼠标指针单击时触发<br><code>ondblclick</code> 双击事件：在鼠标光标双击时触发。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">box.ondblclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.style.backgroundColor = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><p><code>onkeydown</code> : 键盘按下<br><code>onkeyup</code> : 键盘抬起</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;input2&quot;</span>).onkeydown = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;按下了！！1&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;input2&quot;</span>).onkeyup = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.value);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.value.length != <span class="number">11</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;请输入11位&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="浏览器事件"><a href="#浏览器事件" class="headerlink" title="浏览器事件"></a>浏览器事件</h3><p><code>onload</code> : 浏览器加载完成执行<br><code>onscroll</code> : 滚动浏览器滚动条时触发</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 滚动</span></span><br><span class="line"><span class="built_in">window</span>.onscroll = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;滚动 ing&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="文本内容属性"><a href="#文本内容属性" class="headerlink" title="文本内容属性"></a>文本内容属性</h2><h3 id="innerText-和-textContent"><a href="#innerText-和-textContent" class="headerlink" title="innerText 和 textContent"></a>innerText 和 textContent</h3><p><code>textContent</code> 属性,谷歌,火狐支持,IE8 及以下不支持<br>设置标签中的文本内容,应该使用 <code>innerText</code> 属性,谷歌,火狐,IE8 都支持</p>
<h3 id="innerText-和-innerHTML-的区别"><a href="#innerText-和-innerHTML-的区别" class="headerlink" title="innerText 和 innerHTML 的区别"></a>innerText 和 innerHTML 的区别</h3><p><code>innerText</code> 设置文本内容<br><code>innerHTML</code> 设置富文本</p>
<h2 id="元素的属性操作"><a href="#元素的属性操作" class="headerlink" title="元素的属性操作"></a>元素的属性操作</h2><h3 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h3><p>元素除了本身的属性之外可以设置自定义属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">name1</span>=<span class="string">&quot;div1&quot;</span>&gt;</span>盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h3><p><code>getAttribute(&quot;属性&quot;)</code> : 不仅可以获取元素本身的属性的属性值，还可以获取元素自定义的属性的属性值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;div&quot;</span>)[<span class="number">0</span>].getAttribute(<span class="string">&quot;name1&quot;</span>));</span><br></pre></td></tr></table></figure>

<h3 id="设置属性"><a href="#设置属性" class="headerlink" title="设置属性"></a>设置属性</h3><p><code>setAttribute(&quot;属性的名字&quot;,&quot;属性的值&quot;)</code> : 元素的属性的设置:不仅可以设置元素本身的属性，还可以设置元素自定义的属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;div&quot;</span>)[<span class="number">0</span>].setAttribute(<span class="string">&quot;name1&quot;</span>, <span class="string">&quot;newName&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;div&quot;</span>)[<span class="number">0</span>].getAttribute(<span class="string">&quot;name1&quot;</span>));</span><br></pre></td></tr></table></figure>

<p><strong>当然也可以添加<code>class</code></strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;setA&quot;</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;h1&quot;</span>)[<span class="number">0</span>].setAttribute(<span class="string">&quot;class&quot;</span>, <span class="string">&quot;blue&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="移除属性"><a href="#移除属性" class="headerlink" title="移除属性"></a>移除属性</h3><p><code>removeAttribute(&quot;属性&quot;)</code> : 不仅可以移除元素本身的属性，还可以移除元素自定义的属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;remA&quot;</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;h1&quot;</span>)[<span class="number">0</span>].removeAttribute(<span class="string">&quot;class&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="元素样式设置的几种方式"><a href="#元素样式设置的几种方式" class="headerlink" title="元素样式设置的几种方式"></a>元素样式设置的几种方式</h2><ul>
<li><code>对象.style</code></li>
<li><code>对象.className</code></li>
<li><code>对象.setAttribute(&quot;style&quot;)</code></li>
<li><code>对象.setAttribute(&quot;class&quot;)</code></li>
<li><code>对象.style.setProperty(&quot;CSS 属性&quot;, &quot;CSS 属性值&quot;)</code></li>
<li><code>对象.style.cssText</code></li>
</ul>
<p><strong>示例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// setAttribute(&quot;style&quot;,&quot;&quot;)</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;h1&quot;</span>)[<span class="number">1</span>].setAttribute(<span class="string">&quot;style&quot;</span>, <span class="string">&quot;color:red&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// style.setProperty()</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;h1&quot;</span>)[<span class="number">1</span>].style.setProperty(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;blue&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// style.cssText=&quot;&quot;</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;h1&quot;</span>)[<span class="number">1</span>].style.cssText = <span class="string">&quot;color:red&quot;</span>;</span><br></pre></td></tr></table></figure>

<h1 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h1><h2 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h2><p><strong>通过 <code>noteType</code> 属性可以获取节点的类型</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">&quot;nodeDIV&quot;</span>).nodeType); <span class="comment">// 标签的节点类型为 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.nodeType); <span class="comment">// document的节点类型为 9</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">&quot;nodeDIV&quot;</span>).getAttributeNode(<span class="string">&quot;id&quot;</span>).nodeType); <span class="comment">// 属性的节点类型为 2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(box1.firstChild.nodeType); <span class="comment">// 文本的节点类型为 3,元素的第一个子节点就是文本节点</span></span><br></pre></td></tr></table></figure>

<h2 id="节点名称"><a href="#节点名称" class="headerlink" title="节点名称"></a>节点名称</h2><p><strong>通过 <code>nodeName</code> 可以获取元素的节点名称</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">&quot;nodeDIV&quot;</span>).nodeName); <span class="comment">// 标签的节点名称:大写的标签名</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.nodeName); <span class="comment">// document的节点名称:#document</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">&quot;nodeDIV&quot;</span>).getAttributeNode(<span class="string">&quot;id&quot;</span>).nodeName); <span class="comment">// 属性的节点名称:属性名</span></span><br><span class="line"><span class="built_in">console</span>.log(box1.firstChild.nodeName); <span class="comment">// 文本的节点名称:#text</span></span><br></pre></td></tr></table></figure>

<h2 id="节点值"><a href="#节点值" class="headerlink" title="节点值"></a>节点值</h2><p><strong>通过 <code>nodeValue</code> 可以获取元素的节点的值</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">&quot;nodeDIV&quot;</span>).nodeValue); <span class="comment">// 标签的节点值:null</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.nodeValue); <span class="comment">// document的节点值:null</span></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&quot;nodeDIV&quot;</span>).getAttributeNode(<span class="string">&quot;id&quot;</span>).nodeValue</span><br><span class="line">); <span class="comment">// 属性的节点值:属性值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">&quot;nodeDIV&quot;</span>).firstChild.nodeValue); <span class="comment">// 文本的节点值:文本的内容</span></span><br></pre></td></tr></table></figure>

<h2 id="节点之间的关系"><a href="#节点之间的关系" class="headerlink" title="节点之间的关系"></a>节点之间的关系</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 节点之间的关系</span></span><br><span class="line"><span class="comment">// 父节点</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">&quot;d1&quot;</span>).parentNode);</span><br><span class="line"><span class="comment">// 父元素节点</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">&quot;d1&quot;</span>).parentElement);</span><br><span class="line"><span class="comment">// 子节点--childNode</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">&quot;dl&quot;</span>).childNodes);</span><br><span class="line"><span class="comment">// 子元素节点--children</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">&quot;dl&quot;</span>).children);</span><br><span class="line"><span class="comment">// 第一个子节点--firstChild</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">&quot;d1&quot;</span>).firstChild);</span><br><span class="line"><span class="comment">// firstElementChild</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">&quot;dl&quot;</span>).firstElementChild);</span><br><span class="line"><span class="comment">// lastChild:</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">&quot;dl&quot;</span>).lastChild);</span><br><span class="line"><span class="comment">// lastElementChild</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">&quot;dl&quot;</span>).lastElementChild);</span><br><span class="line"><span class="comment">// 上一个子节点--previousSibling:</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">&quot;dl&quot;</span>).previousSibling);</span><br><span class="line"><span class="comment">// previousElementSibling</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">&quot;dl&quot;</span>).previousElementSibling);</span><br><span class="line"><span class="comment">// 下一个子节点 --nextSibling</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">&quot;dl&quot;</span>).nextSibling);</span><br><span class="line"><span class="comment">// nextElementSibling</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">&quot;dl&quot;</span>).nextElementSibling);</span><br></pre></td></tr></table></figure>

<p><strong>总结 :</strong><br><code>firstChild</code>、<code>lastChild</code>、<code>previousSibling</code>、<code>nextSibling</code> 获取到的都是文本，如果没有就是文本节点名称<code>#text</code>， <code>firstElementChild</code>、<code>lastElementChild</code>、<code>previousElementSibling</code>、<code>nextElementSibling</code> 获取到的都是标签，如果没有就是空</p>
<h2 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h2><p><code>insertBefore()</code> 方法可在已有的子节点前插入一个新的子节点</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span> <span class="attr">id</span>=<span class="string">&quot;dl&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span> <span class="attr">id</span>=<span class="string">&quot;d2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span> <span class="attr">id</span>=<span class="string">&quot;d3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span> <span class="attr">id</span>=<span class="string">&quot;d4&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span> <span class="attr">id</span>=<span class="string">&quot;d5&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 插入节点</span></span><br><span class="line"><span class="keyword">var</span> d3 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;d3&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> d5 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;d5&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(d3);</span><br><span class="line"><span class="built_in">console</span>.log(d5);</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;dl&quot;</span>).insertBefore(d3, d5);</span><br></pre></td></tr></table></figure>

<h2 id="创建元素的三种方式"><a href="#创建元素的三种方式" class="headerlink" title="创建元素的三种方式"></a>创建元素的三种方式</h2><h3 id="document-write"><a href="#document-write" class="headerlink" title="document.write()"></a>document.write()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;div&gt;div&lt;/div&gt;&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>弊端</strong> : 只能往 <code>body</code> 中添加元素</p>
<h3 id="innerHTML"><a href="#innerHTML" class="headerlink" title="innerHTML"></a>innerHTML</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&quot;.box&quot;</span>).innerHTML = <span class="string">&quot;&lt;h1&gt;666&lt;/h1&gt;&quot;</span>;</span><br></pre></td></tr></table></figure>

<p><strong>弊端</strong> : 在同级下只能添加一种元素，多个会覆盖</p>
<h3 id="document-createElement"><a href="#document-createElement" class="headerlink" title="document.createElement()"></a>document.createElement()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.createElement(<span class="string">&quot;h1&quot;</span>);</span><br><span class="line">h1.innerHTML = <span class="string">&quot;666&quot;</span>;</span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&quot;.box&quot;</span>).appendChild(h1);</span><br></pre></td></tr></table></figure>

<p><strong>示例</strong> : 动态创建列表</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 点击创建列表</span></span><br><span class="line"><span class="keyword">var</span> list = [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>];</span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&quot;button&quot;</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ul = <span class="built_in">document</span>.createElement(<span class="string">&quot;ul&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">    li.innerHTML = list[i];</span><br><span class="line">    ul.appendChild(li);</span><br><span class="line">    li.onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.style.background = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    li.onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.style.background = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;box&quot;</span>)[<span class="number">0</span>].appendChild(ul);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="事件进阶"><a href="#事件进阶" class="headerlink" title="事件进阶"></a>事件进阶</h1><h2 id="事件三要素-1"><a href="#事件三要素-1" class="headerlink" title="事件三要素"></a>事件三要素</h2><p>事件源 : 是指那个元素引发的事件。<br>事件类型 : 例如，点击，鼠标划过，按下键盘，获得焦点。<br>事件处理程序</p>
<h2 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h2><p>绑定监听事件 <code>对象.addEventListener( &quot;事件的类型&quot; , 事件的处理程序 )</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span></span><br><span class="line">  .getElementsByClassName(<span class="string">&quot;box&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">  .addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;666&quot;</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p>任何事件都有内置对象 <code>event</code>,事件对象的兼容性写法为</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> event = event || <span class="built_in">window</span>.event;</span><br></pre></td></tr></table></figure>

<p><strong>示例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span></span><br><span class="line">  .getElementsByClassName(<span class="string">&quot;box&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">  .addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(event);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这两个元素都绑定了click事件，如果用户点击了p，它在div和p上都触发了click事件 --&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>如何阻止冒泡 ( 存在兼容性 )</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">e.stopPropagation(); <span class="comment">// 谷歌和火狐支持;</span></span><br><span class="line"><span class="built_in">window</span>.event.cancelBubble = <span class="literal">true</span>; <span class="comment">// IE特有的, 谷歌支持, 火狐不支持;</span></span><br></pre></td></tr></table></figure>

<h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><h2 id="BOM-的概念"><a href="#BOM-的概念" class="headerlink" title="BOM 的概念"></a>BOM 的概念</h2><p><code>BOM</code> ( Browser Object Model ) 是指浏览器对象模型<br>浏览器中的一些操作都可以使用 BOM 的方式进行处理</p>
<h2 id="BOM-的顶级对象"><a href="#BOM-的顶级对象" class="headerlink" title="BOM 的顶级对象"></a>BOM 的顶级对象</h2><p><code>window</code> 是浏览器的顶级对象，当调用 <code>window</code> 下的属性和方法时，可以省略 <code>window</code></p>
<h2 id="对话框"><a href="#对话框" class="headerlink" title="对话框"></a>对话框</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">alert(); <span class="comment">// 消息提示框</span></span><br><span class="line">prompt(); <span class="comment">// 输入框</span></span><br><span class="line">confirm(); <span class="comment">// 确认框</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">alert(<span class="string">&quot;A&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(prompt(<span class="string">&quot;请输入&quot;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> prompt(<span class="string">&quot;请输入&quot;</span>)); <span class="comment">// String</span></span><br><span class="line"><span class="built_in">console</span>.log(confirm(<span class="string">&quot;Are you sure ?&quot;</span>)); <span class="comment">// 确认 返回 true;取消 返回 false</span></span><br></pre></td></tr></table></figure>

<h2 id="加载事件"><a href="#加载事件" class="headerlink" title="加载事件"></a>加载事件</h2><p><code>onload</code> 事件会在页面或图像加载完成后立即发生</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;666&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Location-对象"><a href="#Location-对象" class="headerlink" title="Location 对象"></a>Location 对象</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 跳转</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&quot;btn1&quot;</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.location.href = <span class="string">&quot;https://www.baidu.com&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//地址栏上#及后面的内容</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.location.hash);</span><br><span class="line"><span class="comment">//主机名及端口号</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.location.host);</span><br><span class="line"><span class="comment">//主机名</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.location.hostname);</span><br><span class="line"><span class="comment">//文件的路径---相对路径</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.location.pathname);</span><br><span class="line"><span class="comment">//端口号</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.location.port);</span><br><span class="line"><span class="comment">//协议</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.location.protocol);</span><br><span class="line"><span class="comment">//搜索的内容</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.location.search);</span><br></pre></td></tr></table></figure>

<h2 id="History-对象"><a href="#History-对象" class="headerlink" title="History 对象"></a>History 对象</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//前进</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&quot;btn2&quot;</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.history.forward();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//后退</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&quot;btn&quot;</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.history.back();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Navigator-对象"><a href="#Navigator-对象" class="headerlink" title="Navigator 对象"></a>Navigator 对象</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.navigator);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.navigator.userAgent); <span class="comment">// 可以判断用户浏览器的类型;</span></span><br></pre></td></tr></table></figure>

<h1 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h1><h2 id="setInteval"><a href="#setInteval" class="headerlink" title="setInteval()"></a>setInteval()</h2><p><code>setInterval()</code> 方法会不停地调用函数,返回定时器 <code>ID</code><br><code>clearInterval()</code> 方法可取消由 <code>setInterval()</code> 函数设定的定时执行操作。<br><code>clearInterval()</code> 方法的参数必须是由 <code>setInterval()</code> 返回的 ID 值。<br>参数 1 : 函数<br>参数 2 : 时间为毫秒 , 1000 毫秒 = 1 秒</p>
<p><strong>示例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> IntervalId = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">  i++;</span><br><span class="line">  <span class="keyword">if</span> (i == <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(IntervalId);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<h2 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout()"></a>setTimeout()</h2><p>用于在指定一段时间后执行一次动作的方法<br>参数 1 : 函数<br>参数 2 : 时间为毫秒 , 1000 毫秒 = 1 秒</p>
<p><strong>示例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> timeOutId = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;666&quot;</span>);</span><br><span class="line">  <span class="built_in">clearInterval</span>(timeOutId);</span><br><span class="line">&#125;, <span class="number">5000</span>);</span><br></pre></td></tr></table></figure>

<h1 id="1-动画"><a href="#1-动画" class="headerlink" title="1 动画"></a>1 动画</h1><h2 id="定时器案例"><a href="#定时器案例" class="headerlink" title="定时器案例"></a>定时器案例</h2><h3 id="协议禁止按钮"><a href="#协议禁止按钮" class="headerlink" title="协议禁止按钮"></a>协议禁止按钮</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span>666<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;agree&quot;</span> <span class="attr">disabled</span>&gt;</span>同意该协议 (5)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> t = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    time--;</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">&quot;.agree&quot;</span>).innerText = <span class="string">&quot;同意该协议(&quot;</span> + time + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (time == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(t);</span><br><span class="line">      <span class="built_in">document</span>.querySelector(<span class="string">&quot;.agree&quot;</span>).removeAttribute(<span class="string">&quot;disabled&quot;</span>);</span><br><span class="line">      <span class="built_in">document</span>.querySelector(<span class="string">&quot;.agree&quot;</span>).innerText = <span class="string">&quot;同意&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="获取验证码按钮倒计时"><a href="#获取验证码按钮倒计时" class="headerlink" title="获取验证码按钮倒计时"></a>获取验证码按钮倒计时</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;code&quot;</span>&gt;</span>点击获取验证码<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> time2 = <span class="number">60</span>;</span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&quot;.code&quot;</span>).addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> that = <span class="built_in">this</span>;</span><br><span class="line">  that.setAttribute(<span class="string">&quot;disabled&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> t2 = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    time2--;</span><br><span class="line">    that.innerText = time2;</span><br><span class="line">    <span class="keyword">if</span> (time2 == <span class="number">0</span>) &#123;</span><br><span class="line">      that.removeAttribute(<span class="string">&quot;disabled&quot;</span>);</span><br><span class="line">      that.innerText = <span class="string">&quot;点击获取验证码&quot;</span>;</span><br><span class="line">      <span class="built_in">clearInterval</span>(t2);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">10</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="js-的动画"><a href="#js-的动画" class="headerlink" title="js 的动画"></a>js 的动画</h2><h3 id="案例-1：-物体渐变"><a href="#案例-1：-物体渐变" class="headerlink" title="案例 1： 物体渐变"></a>案例 1： 物体渐变</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;opacity&quot;</span>&gt;</span>透明度<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;opacityBox&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 改变透明度</span></span><br><span class="line"><span class="keyword">var</span> opacity = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&quot;.opacity&quot;</span>).addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> tt = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    opacity -= <span class="number">0.1</span>;</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">&quot;.opacityBox&quot;</span>).style.opacity = opacity;</span><br><span class="line">    <span class="keyword">if</span> (opacity &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(tt);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="案例-2：-按钮控制-div-宽度的变化"><a href="#案例-2：-按钮控制-div-宽度的变化" class="headerlink" title="案例 2： 按钮控制 div 宽度的变化"></a>案例 2： 按钮控制 div 宽度的变化</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> width = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&quot;.changeWidth&quot;</span>).addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> t3 = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    width += <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">&quot;.changeWidthBox&quot;</span>).style.width = width;</span><br><span class="line">    <span class="keyword">if</span> ((width = <span class="number">800</span>)) &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(t3);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="案例-3：-物体的移动"><a href="#案例-3：-物体的移动" class="headerlink" title="案例 3： 物体的移动"></a>案例 3： 物体的移动</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 利用 margin</span></span><br><span class="line"><span class="keyword">var</span> margin_left = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&quot;.move&quot;</span>).addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> t4 = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    margin_left += <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">&quot;.movableBox&quot;</span>).style.marginLeft = margin_left + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (margin_left &gt; <span class="number">800</span>) &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(t4);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">10</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 利用 position</span></span><br><span class="line"><span class="comment">// 父相子绝</span></span><br><span class="line"><span class="keyword">var</span> left = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&quot;.toRightButton&quot;</span>).addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> t5 = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    left += <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">&quot;.toRight&quot;</span>).style.left = left + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (left &gt; <span class="number">800</span>) &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(t5);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">10</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="js-动画的封装"><a href="#js-动画的封装" class="headerlink" title="js 动画的封装"></a>js 动画的封装</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 封装</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">moveToRight</span>(<span class="params">dom, limit</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> t6 = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    left += <span class="number">10</span>;</span><br><span class="line">    dom.style.left = left + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (left &gt; limit) &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(t6);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="offset-client-scroll"><a href="#offset-client-scroll" class="headerlink" title="offset client scroll"></a>offset client scroll</h2><h3 id="offset"><a href="#offset" class="headerlink" title="offset"></a>offset</h3><p><code>offsetLeft</code>: 获取元素距离最左边的距离：</p>
<p>(1) 如果父元素没有定位，就是距离浏览器最左侧的距离<br>(2) 如果父元素有定位，就是距离父元素最左侧的距离</p>
<p><code>offsetTop</code> : 获取元素距离最上边的距离:</p>
<p>(1) 如果父元素没有定位，就是距离浏览器最上侧的距离<br>(2) 如果父元素有定位，就是距离父元素最上侧的距离</p>
<p><code>offsetWidth</code> : 获取元素的宽度，包括 <code>border</code> 及以内，不包括 <code>margin</code><br><code>offsetHeight</code> : 获取元素的高度，包括 <code>border</code> 及以内，不包括 <code>margin</code><br><code>offsetParent</code> : 获取元素的定位父级元素：</p>
<p>如果元素是 <code>fixed</code> 定位，得到 <code>null</code><br>没有 <code>fixed</code>,也没有定位,得到 <code>body</code><br>如果父级元素有定位，得到离他最近的有定位的父级元素</p>
<h3 id="scroll-系列"><a href="#scroll-系列" class="headerlink" title="scroll 系列"></a>scroll 系列</h3><p><code>scrollTop</code> 和 <code>scrollLeft</code> : 获得的是内容卷曲的高度和宽度</p>
<p><code>scrollWidth</code> 和 <code>scrollHeight</code> : 获得元素的实际宽度和高度，在内容没有超出盒子时，获得的是盒子的内部高度和宽度。内容超出盒子时获得的是内容实际应有的高度和宽度。当盒子内部存在滚动条时，获得的高度和宽度不包括滚动条。</p>
<h3 id="client-系列"><a href="#client-系列" class="headerlink" title="client 系列"></a>client 系列</h3><p><code>clientTop</code> 和 <code>clientLeft</code> : 获取上边框和左边框的宽度。</p>
<p><code>clientWidth</code> 和 <code>clientHeight</code> : 获取可视范围的宽度高度，即边框内部的，不包括 <code>border</code>,包括 <code>padding</code> .当盒子内部存在滚动条时，获得的高度和宽度不包括滚动条。</p>
<h1 id="未完待续-…"><a href="#未完待续-…" class="headerlink" title="未完待续 …"></a>未完待续 …</h1>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>javascript</tag>
        <tag>api</tag>
      </tags>
  </entry>
  <entry>
    <title>Js 函数内置对象 arguments</title>
    <url>/2021/06/18/js/js-arguments/</url>
    <content><![CDATA[<h1 id="js-函数中有个内置的对象-arguments"><a href="#js-函数中有个内置的对象-arguments" class="headerlink" title="js 函数中有个内置的对象 arguments"></a>js 函数中有个内置的对象 arguments</h1><p>任何一个函数都有内置对象 <code>arguments</code> , <code>arguments</code> 前几个元素都是实参。<br><code>length</code> : 实参的个数<br><code>callee.length</code> : 形参的个数<br><code>callee.name</code> : 函数名<br><code>函数名.caller</code> : 函数的调用者</p>
<p><strong>案例 :</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 既然是伪数组,就可以遍历,利用这一点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">num</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">    sum += <span class="built_in">arguments</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(num(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>));</span><br></pre></td></tr></table></figure>

<h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>javascript</tag>
        <tag>arguments</tag>
      </tags>
  </entry>
  <entry>
    <title>Js 数组去重并排序</title>
    <url>/2021/06/15/js/js-array-sort/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组去重并从大到小排序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">7</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNewArr</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> newArr = [];</span><br><span class="line">  <span class="comment">// 去重</span></span><br><span class="line">  arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (newArr.indexOf(value) == -<span class="number">1</span>) &#123;</span><br><span class="line">      newArr.push(value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 从大到小排序</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历 n-1 次</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; newArr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 每次排序次数从 n-1 开始递减 (下标 n-2)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = newArr.length - <span class="number">2</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">      <span class="keyword">if</span> (j + <span class="number">1</span> &lt;= newArr.length - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (newArr[j] &lt; newArr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">          <span class="comment">// 两者交换</span></span><br><span class="line">          <span class="keyword">let</span> temp = newArr[j];</span><br><span class="line">          newArr[j] = newArr[j + <span class="number">1</span>];</span><br><span class="line">          newArr[j + <span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getNewArr(arr));</span><br></pre></td></tr></table></figure>

<h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>javascript</tag>
        <tag>数组去重</tag>
        <tag>数组排序</tag>
        <tag>sort</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Js 实现小球触壁反弹</title>
    <url>/2021/06/15/js/js-ball-wall-rebound/</url>
    <content><![CDATA[<h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/ball.gif" alt="The-wall-rebound"></p>
<h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ball&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;start&quot;</span>&gt;</span>开始<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;stop&quot;</span> <span class="attr">disabled</span>=<span class="string">&quot;true&quot;</span>&gt;</span>暂停<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#66555d</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ball</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#56c6d4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> goUp = <span class="literal">false</span>,</span><br><span class="line">  goLeft = <span class="literal">false</span>,</span><br><span class="line">  step = <span class="number">10</span>,</span><br><span class="line">  ballLeft = <span class="number">0</span>,</span><br><span class="line">  ballTop = <span class="number">0</span>,</span><br><span class="line">  timer = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> ballMaxLeft = $(<span class="string">&quot;.box&quot;</span>).clientWidth - $(<span class="string">&quot;.ball&quot;</span>).offsetWidth;</span><br><span class="line"><span class="keyword">var</span> ballMaxTop = $(<span class="string">&quot;.box&quot;</span>).clientHeight - $(<span class="string">&quot;.ball&quot;</span>).offsetHeight;</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;.start&quot;</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.setAttribute(<span class="string">&quot;disabled&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">  $(<span class="string">&quot;.stop&quot;</span>).disabled = <span class="literal">false</span>;</span><br><span class="line">  timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 垂直方向</span></span><br><span class="line">    <span class="keyword">if</span> (goUp) &#123;</span><br><span class="line">      <span class="keyword">if</span> (ballTop &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        goUp = <span class="literal">false</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ballTop -= step;</span><br><span class="line">        goUp = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (ballTop &gt;= ballMaxTop) &#123;</span><br><span class="line">        goUp = <span class="literal">true</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ballTop += step;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 水平方向</span></span><br><span class="line">    <span class="keyword">if</span> (goLeft) &#123;</span><br><span class="line">      <span class="keyword">if</span> (ballLeft &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        goLeft = <span class="literal">false</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ballLeft -= step;</span><br><span class="line">        goLeft = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (ballLeft &gt;= ballMaxLeft) &#123;</span><br><span class="line">        goLeft = <span class="literal">true</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ballLeft += step;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $(<span class="string">&quot;.ball&quot;</span>).style.top = ballTop + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">    $(<span class="string">&quot;.ball&quot;</span>).style.left = ballLeft + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">  &#125;, <span class="number">20</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;.stop&quot;</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">  <span class="built_in">this</span>.disabled = <span class="literal">true</span>;</span><br><span class="line">  $(<span class="string">&quot;.start&quot;</span>).disabled = <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>javascript</tag>
        <tag>触壁反弹</tag>
      </tags>
  </entry>
  <entry>
    <title>Js 中 call apply bind 的用法</title>
    <url>/2021/06/18/js/js-call-apply-bind/</url>
    <content><![CDATA[<h1 id="改变-this-指向的方法"><a href="#改变-this-指向的方法" class="headerlink" title="改变 this 指向的方法"></a>改变 this 指向的方法</h1><h2 id="1-call-方法"><a href="#1-call-方法" class="headerlink" title="(1) call 方法"></a>(1) call 方法</h2><p><strong>1. <code>call()</code>方法可以进行普通函数的调用</strong></p>
<p><strong>例如</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;666&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn.call();</span><br></pre></td></tr></table></figure>

<p><strong>2. <code>call()</code>方法可以改变 <code>this</code> 的指向 , 如果没有参数 , <code>this</code> 指向 <code>window</code></strong><br><strong>3. <code>call()</code>方法可以改变 <code>this</code> 的指向 , 如果有一个参数 , <code>this</code>指向该参数</strong><br><strong>4. <code>call()</code>方法可以改变 <code>this</code> 的指向 , 如果有多个参数 , <code>this</code> 指向第一个参数，剩下的是参数列表</strong></p>
<h2 id="2-apply-方法"><a href="#2-apply-方法" class="headerlink" title="(2) apply 方法"></a>(2) apply 方法</h2><ol>
<li><code>apply()</code>方法可以进行普通函数的调用</li>
<li><code>apply()</code>方法可以改变 <code>this</code> 的指向，如果没有参数 , <code>this</code> 指向 window</li>
<li><code>apply()</code>方法可以改变 <code>this</code> 的指向，如果有一个参数 , <code>this</code> 指向该参数</li>
<li><code>apply()</code>方法可以改变 <code>this</code> 的指向，如果有多个参数，第一个参数是 <code>null</code> 或者 <code>window</code> , 第二个参数是数组</li>
</ol>
<h2 id="3-bind-方法"><a href="#3-bind-方法" class="headerlink" title="(3) bind 方法"></a>(3) bind 方法</h2><p>bind() 除了返回是函数以外，它的参数和用法跟 <code>call()</code> 一样。</p>
<p><strong>案例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// call()</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;woman&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">40</span>;</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;man&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">say</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&quot; : &quot;</span> + <span class="built_in">this</span>.age);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// obj1.say();</span></span><br><span class="line"><span class="comment">// call() 无参数默认指向 windows</span></span><br><span class="line"><span class="comment">// obj1.say.call();</span></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;tom&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">12</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// call() 有参数指向第一个参数，后面的是参数列表</span></span><br><span class="line">obj1.say.call(obj2);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">boy</span>(<span class="params">score, name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.score = score;</span><br><span class="line">  <span class="comment">// Person.call(this, name, age);</span></span><br><span class="line">  Person.apply(<span class="built_in">this</span>, [name, age]); <span class="comment">// apply</span></span><br><span class="line">  <span class="built_in">this</span>.study = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(score, <span class="built_in">this</span>.name, <span class="built_in">this</span>.age);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> boyA = <span class="keyword">new</span> boy(<span class="number">100</span>, <span class="string">&quot;www&quot;</span>, <span class="number">10</span>);</span><br><span class="line">boyA.study();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bind</span></span><br><span class="line">boyA.study.bind()();</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>三者微妙的差距！</p>
<p><code>call</code> 、<code>bind</code> 、 <code>apply</code> 这三个函数的第一个参数都是 <code>this</code> 的指向对象，第二个参数差别就来了：</p>
<p><code>call</code> 的参数是直接放进去的，第二第三第 n 个参数全都用逗号分隔，直接放到后面 <code>obj.myFun.call(db,&#39;city&#39;, ... ,&#39;string&#39;...</code> )。</p>
<p><code>apply</code> 的所有参数都必须放在一个数组里面传进去 <code>obj.myFun.apply(db,[&#39;成都&#39;, ..., &#39;string&#39; ])</code>。</p>
<p><code>bind</code> 除了返回是函数以外，它 的参数和 <code>call</code> 一样。</p>
<p>当然，三者的参数不限定是 <code>string</code> 类型，允许是各种类型，包括函数 、 <code>object</code> 等等！</p>
<h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>javascript</tag>
        <tag>call</tag>
        <tag>apply</tag>
        <tag>bind</tag>
        <tag>this指向</tag>
      </tags>
  </entry>
  <entry>
    <title>Js 闭包</title>
    <url>/2021/06/19/js/js-closure/</url>
    <content><![CDATA[<h1 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h1><p>闭包就是能够读取其他函数内部变量的函数，由于在 <code>Javascript</code> 语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成 “ 定义在一个函数内部的函数 “。所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p>
<p><code>JavaScript</code> 变量可以是局部变量或全局变量。<br>私有变量可以用到闭包。</p>
<p><strong>闭包的用途 :</strong></p>
<p>可以在函数外部读取函数内部成员<br>让函数内成员始终存活在内存中</p>
<p><strong>案例 1</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.querySelector(<span class="string">&quot;button&quot;</span>).onclick = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> num = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(++num);</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">  &#125;)();</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>案例 2</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;this window&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;this object&quot;</span>,</span><br><span class="line">  <span class="attr">getName</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&quot;this func1&quot;</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name); <span class="comment">// this object (obj1调用它，this 指向 obj1)</span></span><br><span class="line">    <span class="built_in">console</span>.log(name); <span class="comment">// this func1 ( 作用域由内指向外 )</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 闭包函数</span></span><br><span class="line">      <span class="built_in">console</span>.log(name); <span class="comment">//this func1 ( 作用域由内指向外 )</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.name); <span class="comment">// this window ( this 指向 windows )</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name); <span class="comment">// retuen 后面的语句不会再执行</span></span><br><span class="line">    <span class="built_in">console</span>.log(name); <span class="comment">// 同上</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">obj1.getName()();</span><br></pre></td></tr></table></figure>

<p><strong>案例 3</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandom</span>(<span class="params">min, max</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>)) + min;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;num:&quot;</span> + num); <span class="comment">// 19行 getRandom 被调用,打印随机数</span></span><br><span class="line">  <span class="comment">// 闭包</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = getRandom(<span class="number">1</span>, <span class="number">10</span>); <span class="comment">// getRandom 被调用, 执行13行打印随机数,返回 function()&#123;&#125; 赋给 result</span></span><br><span class="line">result(); <span class="comment">// 相当于 ( function()&#123;console.log(num)&#125; )() , 打印 num , 作用域由内指向外, 打印 12行的生成的随机数</span></span><br><span class="line">result(); <span class="comment">// result 没变 , 同上</span></span><br></pre></td></tr></table></figure>

<h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>javascript</tag>
        <tag>closure</tag>
        <tag>闭包</tag>
      </tags>
  </entry>
  <entry>
    <title>Js 实现递归深拷贝</title>
    <url>/2021/06/19/js/js-deepclone/</url>
    <content><![CDATA[<h1 id="利用循环和递归的方式实现深拷贝"><a href="#利用循环和递归的方式实现深拷贝" class="headerlink" title="利用循环和递归的方式实现深拷贝"></a>利用循环和递归的方式实现深拷贝</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj, newObj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newObj = newObj || &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[key] == <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">      newObj[key] = obj[key].constructor === <span class="built_in">Array</span> ? [] : &#123;&#125;;</span><br><span class="line">      deepClone(obj[key], newObj[key]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      newObj[key] = obj[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>deepClone</tag>
        <tag>递归</tag>
        <tag>深拷贝</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Js 找出最长的单词并排序</title>
    <url>/2021/06/15/js/js-find-longest-word-and-sort/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 找出最长的单词并输出每个单词的长度</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;My name is Tom , I love jerry !&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> maxLength = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> maxLengthWord = [];</span><br><span class="line"><span class="keyword">var</span> strList = str.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; strList.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i + <span class="number">1</span> &lt;= strList.length - <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果后者长度大于前者长度 且 后者长度大于或等于已知的最大长度，就存于 maxLengthWord 数组</span></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      strList[i].length &lt; strList[i + <span class="number">1</span>].length &amp;&amp;</span><br><span class="line">      strList[i + <span class="number">1</span>].length &gt;= maxLength</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="comment">// 避免重复</span></span><br><span class="line">      <span class="comment">// 如果不存在就 push</span></span><br><span class="line">      <span class="keyword">if</span> (maxLengthWord.indexOf(strList[i + <span class="number">1</span>]) == -<span class="number">1</span>) &#123;</span><br><span class="line">        maxLengthWord.push(strList[i + <span class="number">1</span>]);</span><br><span class="line">        maxLength = strList[i + <span class="number">1</span>].length;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果后者长度等于前者长度 且 长度大于或等于已知的最大长度，就将两者都存于 maxLengthWord 数组</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">      strList.length == strList[i + <span class="number">1</span>].length &amp;&amp;</span><br><span class="line">      strList[i].length &gt;= maxLength</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="comment">// 避免重复</span></span><br><span class="line">      <span class="comment">// 如果不存在就 push</span></span><br><span class="line">      <span class="keyword">if</span> (maxLengthWord.indexOf(strList[i]) == -<span class="number">1</span>) &#123;</span><br><span class="line">        maxLengthWord.push(strList[i]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 避免重复</span></span><br><span class="line">      <span class="comment">// 如果不存在就 push</span></span><br><span class="line">      <span class="keyword">if</span> (maxLengthWord.indexOf(strList[i + <span class="number">1</span>]) == -<span class="number">1</span>) &#123;</span><br><span class="line">        maxLengthWord.push(strList[i + <span class="number">1</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">      maxLength = strList[i].length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 后者长度小于前者长度 且 前者长度大于已知的最大长度，就存于 maxLengthWord 数组</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">      strList[i].length &gt; strList[i + <span class="number">1</span>].length &amp;&amp;</span><br><span class="line">      strList[i].length &gt;= maxLength</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="comment">// 避免重复</span></span><br><span class="line">      <span class="comment">// 如果不存在就 push</span></span><br><span class="line">      <span class="keyword">if</span> (maxLengthWord.indexOf(strList[i]) == -<span class="number">1</span>) &#123;</span><br><span class="line">        maxLengthWord.push(strList[i]);</span><br><span class="line">        maxLength = strList[i].length;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;&quot; &#x27;</span> + str + <span class="string">&#x27; &quot;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">maxLengthWord.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;最长单词为: &quot;</span> + value + <span class="string">&quot; ,单词长度为&quot;</span> + value.length);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Js 面向对象继承</title>
    <url>/2021/06/16/js/js-object-oriented-inherit/</url>
    <content><![CDATA[<h1 id="1-原型继承"><a href="#1-原型继承" class="headerlink" title="1. 原型继承"></a>1. 原型继承</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Person</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Student</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">className, score</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.className = className;</span><br><span class="line">  <span class="built_in">this</span>.score = score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在 Person 原型上添加 play 方法</span></span><br><span class="line">Person.prototype.play = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Person_play&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 让 Student 继承 Person</span></span><br><span class="line">Student.prototype = <span class="keyword">new</span> Person(<span class="string">&quot;nameA&quot;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="comment">// 实例化一个 Student 对象</span></span><br><span class="line"><span class="keyword">var</span> stu1 = <span class="keyword">new</span> Student(<span class="string">&quot;A&quot;</span>, <span class="number">60</span>);</span><br><span class="line"></span><br><span class="line">stu1.play(); <span class="comment">// Person_play</span></span><br><span class="line"><span class="comment">// Student 实例化后</span></span><br><span class="line"><span class="comment">// 在 Student 对象原型上添加 play 方法</span></span><br><span class="line">Student.prototype.play = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Student_play&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">stu1.play(); <span class="comment">// Student_play</span></span><br><span class="line"><span class="built_in">console</span>.log(stu1.className); <span class="comment">// A</span></span><br><span class="line"><span class="built_in">console</span>.log(stu1.score); <span class="comment">// 60</span></span><br><span class="line"><span class="built_in">console</span>.log(stu1.name); <span class="comment">// nameA</span></span><br><span class="line"><span class="built_in">console</span>.log(stu1.age); <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过原型继承，子类本身构造函数中的属性和方法以及子类原型中的属性和方法都可以获取到，并且父类构造函数中的属性和方法以及父类原型中的属性和方法也可以获取到</span></span><br></pre></td></tr></table></figure>

<h1 id="2-构造函数继承"><a href="#2-构造函数继承" class="headerlink" title="2. 构造函数继承"></a>2. 构造函数继承</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// call(),this指向第一个参数,后面的依次传参</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Boy</span>(<span class="params">score, name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.score = score;</span><br><span class="line">  Person.call(<span class="built_in">this</span>, name, age);</span><br><span class="line">  <span class="built_in">this</span>.study = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(score);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> boyA = <span class="keyword">new</span> Boy(<span class="number">100</span>, <span class="string">&quot;tom&quot;</span>, <span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(boyA);</span><br></pre></td></tr></table></figure>

<h1 id="3-拷贝继承"><a href="#3-拷贝继承" class="headerlink" title="3. 拷贝继承"></a>3. 拷贝继承</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;tom&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;&#125;; <span class="comment">// 创建一个空对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj1) &#123;</span><br><span class="line">  obj2[key] = obj1[key];</span><br><span class="line">&#125;</span><br><span class="line">obj2.name = <span class="string">&quot;jerry&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj2);</span><br><span class="line"><span class="built_in">console</span>.log(obj2.name);</span><br></pre></td></tr></table></figure>

<h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续 . . ."></a>未完待续 . . .</h1>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>javascript</tag>
        <tag>面向对象</tag>
        <tag>继承</tag>
      </tags>
  </entry>
  <entry>
    <title>Js 面向对象</title>
    <url>/2021/06/15/js/js-object-oriented/</url>
    <content><![CDATA[<h1 id="1-JavaScript-面向对象的介绍"><a href="#1-JavaScript-面向对象的介绍" class="headerlink" title="1. JavaScript 面向对象的介绍"></a>1. JavaScript 面向对象的介绍</h1><h2 id="1-什么是对象"><a href="#1-什么是对象" class="headerlink" title="(1) 什么是对象"></a>(1) 什么是对象</h2><p>Everything is object （万物皆对象）<br>对象是一个容器，封装了属性（ <code>property</code> ）和方法（ <code>method</code> ）。</p>
<p>ECMAScript-262 把对象定义为：无序属性的集合，其属性可以包含基本值、对象或者函数。严格来讲，这就相当于说对象是一组没有特定顺序的值。对象的每个属性或方法都有一个名字，而每个名字都映射到一个值。</p>
<h2 id="2-什么是面向对象"><a href="#2-什么是面向对象" class="headerlink" title="(2) 什么是面向对象"></a>(2) 什么是面向对象</h2><p>面向对象是对过程式代码的一种高度封装，目的在于提高代码的开发效率和可维护性。</p>
<p>面向对象编程 —— Object Oriented Programming，简称 OOP ，是一种编程开发思想。它将真实世界各种复杂的关系，抽象为一个个对象，然后由对象之间的分工与合作，完成对真实世界的模拟。</p>
<h2 id="3-面向对象的特征"><a href="#3-面向对象的特征" class="headerlink" title="(3) 面向对象的特征"></a>(3) 面向对象的特征</h2><p><strong>封装性</strong></p>
<p><strong>继承性</strong></p>
<p><strong>多态性</strong></p>
<h1 id="2-基本类型与引用类型的区别"><a href="#2-基本类型与引用类型的区别" class="headerlink" title="2. 基本类型与引用类型的区别"></a>2. 基本类型与引用类型的区别</h1><h2 id="1-基本类型"><a href="#1-基本类型" class="headerlink" title="(1) 基本类型"></a>(1) 基本类型</h2><p><strong>占用空间固定，保存在栈中</strong>（当一个方法执行时，每个方法都会建立自己的内存栈，在这个方法内定义的变量将会逐个放入这块栈内存里，随着方法的执行结束，这个方法的内存栈也将自然销毁了。因此，所有在方法中定义的变量都是放在栈内存中的；栈中存储的是基础变量以及一些对象的引用变量，基础变量的值是存储在栈中，而引用变量存储在栈中的是指向堆中的数组或者对象的地址，这就是为何修改引用类型总会影响到其他指向这个地址的引用变量。<br>保存与复制的是值本身，使用 <code>typeof</code> 检测数据的类型，基本类型数据是值类型</p>
<h2 id="2-引用类型"><a href="#2-引用类型" class="headerlink" title="(2) 引用类型"></a>(2) 引用类型</h2><p><strong>占用空间不固定，保存在堆中</strong>（当我们在程序中创建一个对象时，这个对象将被保存到运行时数据区中，以便反复利用（因为对象的创建成本通常较大），这个运行时数据区就是堆内存。堆内存中的对象不会随方法的结束而销毁，即使方法结束后，这个对象还可能被另一个引用变量所引用（方法的参数传递时很常见），则这个对象依然不会被销毁，只有当一个对象没有任何引用变量引用它时，系统的垃圾回收机制才会在核实的时候回收它</p>
<p><strong>栈</strong>：自动分配内存空间，系统自动释放，里面存放的是基本类型的值和引用类型的地址</p>
<p><strong>堆</strong>：动态分配的内存，大小不定，也不会自动释放。里面存放引用类型的值。</p>
<h1 id="3-创建对象的四种方法"><a href="#3-创建对象的四种方法" class="headerlink" title="3. 创建对象的四种方法"></a>3. 创建对象的四种方法</h1><h2 id="1-对象字面量"><a href="#1-对象字面量" class="headerlink" title="1. 对象字面量"></a>1. 对象字面量</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;zs&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="literal">true</span></span><br><span class="line">  fun=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;fun&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="2-new-Object-创建对象"><a href="#2-new-Object-创建对象" class="headerlink" title="2. new Object()创建对象"></a>2. new Object()创建对象</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">person.name = <span class="string">&quot;lisi&quot;</span>;</span><br><span class="line">person.age = <span class="number">35</span>;</span><br><span class="line">person.job = <span class="string">&quot;codeman&quot;</span>;</span><br><span class="line">person.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="3-工厂函数创建对象"><a href="#3-工厂函数创建对象" class="headerlink" title="3. 工厂函数创建对象"></a>3. 工厂函数创建对象</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  person.name = name;</span><br><span class="line">  person.age = age;</span><br><span class="line">  person.job = job;</span><br><span class="line">  person.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> person;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = createPerson(<span class="string">&quot;张三&quot;</span>, <span class="number">22</span>, <span class="string">&quot;actor&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="4-自定义构造函数"><a href="#4-自定义构造函数" class="headerlink" title="4. 自定义构造函数"></a>4. 自定义构造函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.job = job;</span><br><span class="line">  <span class="built_in">this</span>.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>, <span class="number">22</span>, <span class="string">&quot;actor&quot;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="4-构造函数和实例对象的关系"><a href="#4-构造函数和实例对象的关系" class="headerlink" title="4. 构造函数和实例对象的关系"></a>4. 构造函数和实例对象的关系</h1><p>创建一个实例对象，须使用 new 操作符。以这种方式调用构造函数会经历以下 4 个步骤：</p>
<h2 id="1-解析构造函数代码的执行"><a href="#1-解析构造函数代码的执行" class="headerlink" title="(1) 解析构造函数代码的执行"></a>(1) 解析构造函数代码的执行</h2><ol>
<li>创建一个新对象</li>
<li>将构造函数的作用域赋给新对象（因此 <code>this</code> 就指向了这个新对象）</li>
<li>执行构造函数中的代码</li>
<li>返回新对象</li>
</ol>
<h2 id="2-constructor-属性"><a href="#2-constructor-属性" class="headerlink" title="(2) constructor 属性"></a>(2) constructor 属性</h2><p>可以通过实例的 <code>constructor</code> 属性判断实例和构造函数之间的关系<br>构造函数实例化对象的 <code>constructor</code> 属性指向的是构造函数本身</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj1.constructor == <span class="built_in">Object</span>);</span><br></pre></td></tr></table></figure>

<h2 id="3-instanceof-关键字"><a href="#3-instanceof-关键字" class="headerlink" title="(3) instanceof 关键字"></a>(3) instanceof 关键字</h2><p>如果要检测对象的类型，还是使用 <code>instanceof</code> 操作符更可靠一些,返回 <code>true</code> 为对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>);</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结 :"></a>总结 :</h2><p>构造函数是根据具体的事物抽象出来的抽象模板<br>实例对象是根据抽象的构造函数模板得到的具体实例对象<br>每一个实例对象都具有一个 <code>constructor</code> 属性，指向创建该实例的构造函数</p>
<h1 id="5-构造函数的问题"><a href="#5-构造函数的问题" class="headerlink" title="5. 构造函数的问题"></a>5. 构造函数的问题</h1><h2 id="内存浪费"><a href="#内存浪费" class="headerlink" title="内存浪费"></a>内存浪费</h2><p>对于每一个实例对象，如果我们在每一个实例对象的内部创建一个属性，值为函数。假如创建两个对象，属性名也许一致,看似都是一模一样的内容，但是其实每一次生成一个实例，都会多占用一些内存，如果实例对象很多，会造成极大的内存浪费。</p>
<h1 id="6-原型"><a href="#6-原型" class="headerlink" title="6. 原型"></a>6. 原型</h1><p>上述问题的更好的解决方案： <code>prototype</code></p>
<p><code>Javascript</code> 规定，每一个构造函数都有一个 <code>prototype</code> 属性，指向另一个对象。这个对象的所有属性和方法，都会被构造函数的实例继承。<br>这也就意味着，我们可以把所有对象实例需要共享的属性和方法直接定义在 <code>prototype</code> 对象上。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">&quot;Tom&quot;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">&quot;Jerry&quot;</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p1.say === p2.say); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><strong>构造函数、实例、原型三者之间的关系</strong></p>
<p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/jsprototype.png" alt="js-prototype"></p>
<p>任何函数都具有一个 <code>prototype</code> 属性，该属性是一个对象</p>
<p>构造函数的 <code>prototype</code> 对象默认都有一个 <code>constructor</code> 属性，指向 <code>prototype</code> 对象所在函数</p>
<p>通过构造函数得到的实例对象内部会包含一个指向构造函数的 <code>prototype</code> 对象的指针 __proto__<br>__proto__ 是非标准属性</p>
<p><strong>总结 :</strong></p>
<ol>
<li>任何函数都具有一个 <code>prototype</code> 属性，该属性是一个对象</li>
<li>构造函数有一个 <code>protoType</code> 属性，它本身是一个对象，我们称之为原型</li>
<li>构造函数的 <code>protoType</code> 原型对象的属性和方法，都可以被构造函数实例化的对象所继承</li>
<li>构造函数的 <code>protoType</code> 原型对象有个 <code>constructor</code> 属性，指向的是当前原型对象所在的构造函数</li>
<li>实例对象有__proto__属性，它是一个指针，指向的是构造函数的的原型 <code>prototype</code></li>
<li>实例对象都具有一个 <code>constructor</code> 属性，指向创建该实例的构造函数</li>
</ol>
<h1 id="7-把局部变量变为全局变量"><a href="#7-把局部变量变为全局变量" class="headerlink" title="7. 把局部变量变为全局变量"></a>7. 把局部变量变为全局变量</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="built_in">window</span>.a = a;</span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure>

<h1 id="未完待续-…"><a href="#未完待续-…" class="headerlink" title="未完待续 …"></a>未完待续 …</h1>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>javascript</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>Js 递归</title>
    <url>/2021/06/19/js/js-recursive/</url>
    <content><![CDATA[<h1 id="简单来说递归就是函数直接或间接调用自己"><a href="#简单来说递归就是函数直接或间接调用自己" class="headerlink" title="简单来说递归就是函数直接或间接调用自己"></a>简单来说递归就是函数直接或间接调用自己</h1><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><h2 id="1-递归实现-1-…-n"><a href="#1-递归实现-1-…-n" class="headerlink" title="1. 递归实现 1 + … + n"></a>1. 递归实现 1 + … + n</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> n + sum(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">3</span>));</span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">4</span>));</span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">100</span>));</span><br></pre></td></tr></table></figure>

<h2 id="2-递归实现-1-n"><a href="#2-递归实现-1-n" class="headerlink" title="2. 递归实现 1 * . . . * n"></a>2. 递归实现 1 * . . . * n</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum2</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> n * sum2(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum2(<span class="number">3</span>));</span><br><span class="line"><span class="built_in">console</span>.log(sum2(<span class="number">4</span>));</span><br><span class="line"><span class="built_in">console</span>.log(sum2(<span class="number">5</span>));</span><br><span class="line"><span class="built_in">console</span>.log(sum2(<span class="number">6</span>));</span><br></pre></td></tr></table></figure>

<h2 id="3-递归实现斐波那契数列"><a href="#3-递归实现斐波那契数列" class="headerlink" title="3. 递归实现斐波那契数列"></a>3. 递归实现斐波那契数列</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1,1,2,3,5,8 . . .</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">feiBoNaQi</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> feiBoNaQi(n - <span class="number">1</span>) + feiBoNaQi(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(feiBoNaQi(<span class="number">1</span>));</span><br><span class="line"><span class="built_in">console</span>.log(feiBoNaQi(<span class="number">2</span>));</span><br><span class="line"><span class="built_in">console</span>.log(feiBoNaQi(<span class="number">3</span>));</span><br><span class="line"><span class="built_in">console</span>.log(feiBoNaQi(<span class="number">4</span>));</span><br><span class="line"><span class="built_in">console</span>.log(feiBoNaQi(<span class="number">5</span>));</span><br><span class="line"><span class="built_in">console</span>.log(feiBoNaQi(<span class="number">6</span>));</span><br></pre></td></tr></table></figure>

<h2 id="4-一共-10-级楼梯，每次可以走一步或两步，求一共多少种走法"><a href="#4-一共-10-级楼梯，每次可以走一步或两步，求一共多少种走法" class="headerlink" title="4. 一共 10 级楼梯，每次可以走一步或两步，求一共多少种走法?"></a>4. 一共 10 级楼梯，每次可以走一步或两步，求一共多少种走法?</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1阶 =&gt; 1种</span></span><br><span class="line"><span class="comment">// 2阶 =&gt; 2种</span></span><br><span class="line"><span class="comment">// 3阶 =&gt; 3种</span></span><br><span class="line"><span class="comment">// 4阶 =&gt; 5种</span></span><br><span class="line"><span class="comment">// 假设有 5 阶,去掉一阶就是 4 阶,相当于假设最后走一步,然后加上 4 阶的走法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">feiBoNaQi</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> feiBoNaQi(n - <span class="number">1</span>) + feiBoNaQi(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(feiBoNaQi(<span class="number">5</span>));</span><br></pre></td></tr></table></figure>

<h2 id="5-假设一个细胞一小时后分裂成两个-生命周期为三个小时-若开始有一个细胞-n-小时后有多少个细胞"><a href="#5-假设一个细胞一小时后分裂成两个-生命周期为三个小时-若开始有一个细胞-n-小时后有多少个细胞" class="headerlink" title="5. 假设一个细胞一小时后分裂成两个 , 生命周期为三个小时 , 若开始有一个细胞 , n 小时后有多少个细胞?"></a>5. 假设一个细胞一小时后分裂成两个 , 生命周期为三个小时 , 若开始有一个细胞 , n 小时后有多少个细胞?</h2><p><strong>黑色代表那个细胞生命结束</strong></p>
<p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/celldivision.png" alt="cell-division"><br><strong>方法 1</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 白</span></span><br><span class="line"><span class="comment">// 绿，白</span></span><br><span class="line"><span class="comment">// 黄，白，绿，白</span></span><br><span class="line"><span class="comment">// 白，绿，白，黄，白，绿，白</span></span><br><span class="line"><span class="comment">// 绿，白，黄，白，绿，白，白，绿，白，黄，白，绿，白</span></span><br><span class="line"><span class="comment">// 黄，白，绿，白，白，绿，白，黄，白，绿，白，绿，白，黄，白，绿，白，白，绿，白，黄，白，绿，白</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 白 (1,1,2,4,7,13,24)</span></span><br><span class="line"><span class="comment">// 绿 (0,1,1,2,4,7,13)</span></span><br><span class="line"><span class="comment">// 黄 (0,0,1,1,2,4,7)</span></span><br><span class="line"><span class="comment">// 总 (1,2,4,7,13,24)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 找规律发现从第四项开始后者是前三项的和</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params">h</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (h) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">7</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> A(h - <span class="number">1</span>) + A(h - <span class="number">2</span>) + A(h - <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(A(<span class="number">7</span>));</span><br></pre></td></tr></table></figure>

<p><strong>方法 2</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 绿色细胞数量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">green</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> white(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 黄色细胞数量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">yellow</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">0</span> || n == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> green(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 白色细胞数量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">white</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> green(n - <span class="number">1</span>) + yellow(n - <span class="number">1</span>) + white(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 细胞数量总和</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">total</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> green(n) + yellow(n) + white(n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(total(<span class="number">0</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(total(<span class="number">1</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(total(<span class="number">2</span>)); <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(total(<span class="number">3</span>)); <span class="comment">// 7</span></span><br><span class="line"><span class="built_in">console</span>.log(total(<span class="number">4</span>)); <span class="comment">// 13</span></span><br><span class="line"><span class="built_in">console</span>.log(total(<span class="number">5</span>)); <span class="comment">// 24</span></span><br></pre></td></tr></table></figure>

<h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>javascript</tag>
        <tag>递归</tag>
        <tag>recursive</tag>
      </tags>
  </entry>
  <entry>
    <title>Js 正则表达式</title>
    <url>/2021/06/19/js/js-regexp/</url>
    <content><![CDATA[<h1 id="1-正则表达式的作用"><a href="#1-正则表达式的作用" class="headerlink" title="1. 正则表达式的作用"></a>1. 正则表达式的作用</h1><p>给定的字符串是否符合正则表达式的过滤逻辑 ( 匹配 )<br>可以通过正则表达式，从字符串中获取我们想要的特定部分 ( 提取 )<br>强大的字符串替换能力 ( 替换 )</p>
<h1 id="2-正则的组成"><a href="#2-正则的组成" class="headerlink" title="2. 正则的组成"></a>2. 正则的组成</h1><h2 id="1-特殊字符"><a href="#1-特殊字符" class="headerlink" title="(1) 特殊字符"></a>(1) 特殊字符</h2><p>普通数字 , 字母 , 中文 , 符号 , 特殊字符 . . .</p>
<h2 id="2-常用元字符"><a href="#2-常用元字符" class="headerlink" title="(2) 常用元字符"></a>(2) 常用元字符</h2><table>
<thead>
<tr>
<th align="center">元字符</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\d</td>
<td align="left">匹配至少一个数字</td>
</tr>
<tr>
<td align="center">\D</td>
<td align="left">匹配至少一个除数字外的任意字符</td>
</tr>
<tr>
<td align="center">\w</td>
<td align="left">匹配至少一个字母或数字或下划线 ( _ )</td>
</tr>
<tr>
<td align="center">\W</td>
<td align="left">匹配至少一个非字母或数字或下划线</td>
</tr>
<tr>
<td align="center">\s</td>
<td align="left">匹配至少一个空白字符</td>
</tr>
<tr>
<td align="center">\S</td>
<td align="left">匹配至少一个非空白任意字符</td>
</tr>
<tr>
<td align="center">.</td>
<td align="left">匹配除换行符以外的任意单个字符</td>
</tr>
<tr>
<td align="center">^</td>
<td align="left">匹配行首的文本 ( 以谁开始 )</td>
</tr>
<tr>
<td align="center">$</td>
<td align="left">匹配行尾的文本 ( 以谁结束 )</td>
</tr>
</tbody></table>
<h2 id="3-限定符"><a href="#3-限定符" class="headerlink" title="(3) 限定符"></a>(3) 限定符</h2><table>
<thead>
<tr>
<th align="center">限定符</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">*</td>
<td align="left">重复零次或更多次</td>
</tr>
<tr>
<td align="center">+</td>
<td align="left">重复一次或多次</td>
</tr>
<tr>
<td align="center">?</td>
<td align="left">重复零次或一次</td>
</tr>
<tr>
<td align="center">{n}</td>
<td align="left">重复 n 次</td>
</tr>
<tr>
<td align="center">{n,}</td>
<td align="left">至少重复 n 次</td>
</tr>
<tr>
<td align="center">{n,m}</td>
<td align="left">重复 n 到 m 次</td>
</tr>
</tbody></table>
<h2 id="4-其他符号"><a href="#4-其他符号" class="headerlink" title="(4) 其他符号"></a>(4) 其他符号</h2><table>
<thead>
<tr>
<th align="center">其他符号</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">[]</td>
<td align="left">字符串用中括号括起来，表示匹配其中的任一字符 , 相当于或的意思, 比如 0 到 9 : [0-9]</td>
</tr>
<tr>
<td align="center">[^]</td>
<td align="left">匹配除中括号以内的内容 , 比如 [^0-9] , 就是除了 0 到 9 之外的内容</td>
</tr>
<tr>
<td align="center">\</td>
<td align="left">转义符： \ 的用法主要是用法是在正则表达式中的特殊符号转换为它本身的意思</td>
</tr>
<tr>
<td align="center">|</td>
<td align="left">或者，选择两者中的一个。注意将左右两边分为两部分，而不管左右两边有多长多乱</td>
</tr>
<tr>
<td align="center">( )</td>
<td align="left">从两个直接量中选择一个</td>
</tr>
<tr>
<td align="center">[\u4e00-\u9fa5]</td>
<td align="left">匹配汉字</td>
</tr>
</tbody></table>
<h1 id="3-创建正则对象"><a href="#3-创建正则对象" class="headerlink" title="3. 创建正则对象"></a>3. 创建正则对象</h1><h2 id="1-字面量创建"><a href="#1-字面量创建" class="headerlink" title="(1) 字面量创建"></a>(1) 字面量创建</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d/</span>;</span><br></pre></td></tr></table></figure>

<h2 id="2-构造函数创建"><a href="#2-构造函数创建" class="headerlink" title="(2) 构造函数创建"></a>(2) 构造函数创建</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> regObj = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/\d/</span>);</span><br></pre></td></tr></table></figure>

<h1 id="4-正则匹配"><a href="#4-正则匹配" class="headerlink" title="4. 正则匹配"></a>4. 正则匹配</h1><p>在 <code>RegExp</code> 的原型上有个 <code>test</code> 方法,用类测试是否匹配成功</p>
<p><code>RegExp.prototype.test()</code></p>
<p><strong>语法</strong> :<code>reg.test(str)</code><br><strong>参数</strong> : <code>str</code> 与正则表达式匹配的字符串<br><strong>返回值</strong> : 如果正则表达式与指定的字符串匹配 , 返回 <code>true</code> ; 否则 <code>false</code></p>
<p><strong>案例 :</strong></p>
<p><strong>html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> /&gt;</span> <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 验证输入邮箱</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^([a-zA-Z]|[0-9])(\w|\-)+@[a-zA-Z0-9]+\.([a-zA-Z]&#123;2,4&#125;)$/</span>;</span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&quot;button&quot;</span>).addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> value = <span class="built_in">document</span>.querySelector(<span class="string">&quot;input&quot;</span>).value;</span><br><span class="line">  <span class="built_in">console</span>.log(reg.test(value));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="5-正则提取"><a href="#5-正则提取" class="headerlink" title="5. 正则提取"></a>5. 正则提取</h1><p><code>String.prototype.match()</code></p>
<p><strong>语法</strong> : <code>str.match(reg)</code><br><strong>参数</strong> : <code>reg</code><br><strong>返回值 :</strong> 如果使用 <code>g</code> 标志，则将返回与完整正则表达式匹配的所有结果 ( <code>Array</code> ), 但不会返回捕获组 , 或者未匹配返回 <code> null</code><br>如果未使用 <code>g</code> 标志，则仅返回第一个完整匹配及其相关的捕获组( <code>Array</code> ) 或者未匹配返回 <code> null</code></p>
<p><strong>案例 :</strong></p>
<p><strong>html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> /&gt;</span> <span class="tag">&lt;<span class="name">button</span>&gt;</span>提取<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 提取非数字</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[^\d]/g</span>;</span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&quot;button&quot;</span>).addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> value = <span class="built_in">document</span>.querySelector(<span class="string">&quot;input&quot;</span>).value;</span><br><span class="line">  <span class="built_in">console</span>.log(value.match(reg));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="6-正则替换"><a href="#6-正则替换" class="headerlink" title="6. 正则替换"></a>6. 正则替换</h1><p><code>String.prototype.replace()</code></p>
<p><strong>原字符串不会改变</strong></p>
<p><strong>语法</strong> : <code>str.replace(regexp|substr, newSubStr|function)</code></p>
<p><strong>返回值 :</strong> 替代后的新的字符串。</p>
<p><strong>案例 :</strong><br>全局匹配,将 “ l “ 替换为 “ L “</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="regexp">/l/g</span>, <span class="string">&quot;L&quot;</span>));</span><br></pre></td></tr></table></figure>

<h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>javascript</tag>
        <tag>RegExp</tag>
        <tag>正则</tag>
        <tag>test</tag>
        <tag>match</tag>
        <tag>replace</tag>
      </tags>
  </entry>
  <entry>
    <title>Js 数组去重方法总结</title>
    <url>/2021/06/19/js/js-remove-array-duplicates/</url>
    <content><![CDATA[<h1 id="利用-indexOf-方法判断当新数组里原数组某一项不存在时返回-1-就-push"><a href="#利用-indexOf-方法判断当新数组里原数组某一项不存在时返回-1-就-push" class="headerlink" title="利用 indexOf() 方法判断当新数组里原数组某一项不存在时返回 -1 就 push()"></a>利用 indexOf() 方法判断当新数组里原数组某一项不存在时返回 -1 就 push()</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> newArr = [];</span><br><span class="line">  arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (newArr.indexOf(value) == -<span class="number">1</span>) &#123;</span><br><span class="line">      newArr.push(value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// console.log(A(arr));</span></span><br></pre></td></tr></table></figure>

<h1 id="利用-indexOf-方法判断当原数组里某一项返回值与下标相同时就-push"><a href="#利用-indexOf-方法判断当原数组里某一项返回值与下标相同时就-push" class="headerlink" title="利用 indexOf() 方法判断当原数组里某一项返回值与下标相同时就 push"></a>利用 indexOf() 方法判断当原数组里某一项返回值与下标相同时就 push</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> newArr = [];</span><br><span class="line">  arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value, index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.indexOf(value) == index) &#123;</span><br><span class="line">      newArr.push(value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// console.log(B(arr));</span></span><br></pre></td></tr></table></figure>

<h1 id="利用对象属性不重复这一特点"><a href="#利用对象属性不重复这一特点" class="headerlink" title="利用对象属性不重复这一特点"></a>利用对象属性不重复这一特点</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">C</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> newArr = [];</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">  arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!obj[value]) &#123;</span><br><span class="line">      newArr.push(value);</span><br><span class="line">      obj[value] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// console.log(C(arr));</span></span><br></pre></td></tr></table></figure>

<h1 id="利用数组的-includes-方法"><a href="#利用数组的-includes-方法" class="headerlink" title="利用数组的 includes() 方法"></a>利用数组的 includes() 方法</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">D</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> newArr = [];</span><br><span class="line">  arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!newArr.includes(value)) &#123;</span><br><span class="line">      newArr.push(value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(D(arr));</span><br></pre></td></tr></table></figure>

<h1 id="利用-Set-结构成员不重复"><a href="#利用-Set-结构成员不重复" class="headerlink" title="利用 Set 结构成员不重复"></a>利用 Set 结构成员不重复</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deduplication</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(deduplication(arr));</span><br></pre></td></tr></table></figure>

<h1 id="未完待续-…"><a href="#未完待续-…" class="headerlink" title="未完待续 …"></a>未完待续 …</h1>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>javascript</tag>
        <tag>数组去重</tag>
      </tags>
  </entry>
  <entry>
    <title>原生 Js 实现轮播图</title>
    <url>/2021/06/04/js/js-swiper/</url>
    <content><![CDATA[<blockquote>
<h1 id="https-github-com-codehhr-web"><a href="#https-github-com-codehhr-web" class="headerlink" title="https://github.com/codehhr/web"></a><a href="https://github.com/codehhr/web">https://github.com/codehhr/web</a></h1></blockquote>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>javascript</tag>
        <tag>swiper</tag>
        <tag>轮播图</tag>
      </tags>
  </entry>
  <entry>
    <title>Js 获取并格式化当前日期</title>
    <url>/2021/06/15/js/js-today/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回当前日期</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">today</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    date.getFullYear() +</span><br><span class="line">    <span class="string">&quot;-&quot;</span> +</span><br><span class="line">    formatTime(date.getMonth() + <span class="number">1</span>) +</span><br><span class="line">    <span class="string">&quot;-&quot;</span> +</span><br><span class="line">    formatTime(date.getDate()) +</span><br><span class="line">    <span class="string">&quot; &quot;</span> +</span><br><span class="line">    formatTime(date.getHours()) +</span><br><span class="line">    <span class="string">&quot;:&quot;</span> +</span><br><span class="line">    formatTime(date.getMinutes()) +</span><br><span class="line">    <span class="string">&quot;:&quot;</span> +</span><br><span class="line">    formatTime(date.getSeconds())</span><br><span class="line">  );</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">formatTime</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + t : t;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(today());</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware 安装 CentOS7 后的简单配置</title>
    <url>/2020/10/06/linux/linux-centos/</url>
    <content><![CDATA[<h1 id="1-连网"><a href="#1-连网" class="headerlink" title="1.连网"></a>1.连网</h1><p>如果能连网,跳过此步<br>试着 ping 一下百度</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ping baidu.com</span><br></pre></td></tr></table></figure>

<h2 id="动态分配-IP"><a href="#动态分配-IP" class="headerlink" title="动态分配 IP"></a>动态分配 IP</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure>

<p>记得前面加上 <code>sudo</code> ,其实你不加根本编辑不了,哈哈哈哈哈哈 !<br>后面的 <code>ens33</code> 可能不太一样,是网卡名,输入的时候按 <code>Tab</code> 补全就行了</p>
<p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/centos/dhcp.png" alt="dhcp"></p>
<p>如上图所示需要改动两个地方</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">BOOTPROTO=dhcp</span><br><span class="line">ONBOOT=yes</span><br></pre></td></tr></table></figure>

<p>顺便说一下<code>vim</code>这个编辑器,按<code>i</code>,<code>o</code>,<code>I</code>,<code>A</code>都可以进入插入模式，退出保存先按<code>esc</code>,然后按 <code>ZZ</code> (大写的) 就可以了,或者按 <code>esc</code> 后输入<code>:wq</code>再按回车</p>
<p>然后重启网络服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart network</span><br></pre></td></tr></table></figure>

<p>输入<code>ip addr</code>可以查看 ip,试着 ping 一下 baidu ,已经有网了</p>
<p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/centos/ipaddr.png" alt="ipaddr"></p>
<h1 id="2-换为国内软件源-方便快速下载-其实有好几种方式"><a href="#2-换为国内软件源-方便快速下载-其实有好几种方式" class="headerlink" title="2.换为国内软件源,方便快速下载(其实有好几种方式)"></a>2.换为国内软件源,方便快速下载(其实有好几种方式)</h1><blockquote>
<h2 id="作为参考-https-mirrors-cnnic-cn-help-centos"><a href="#作为参考-https-mirrors-cnnic-cn-help-centos" class="headerlink" title="作为参考: https://mirrors.cnnic.cn/help/centos/"></a>作为参考: <a href="https://mirrors.cnnic.cn/help/centos/">https://mirrors.cnnic.cn/help/centos/</a></h2></blockquote>
<h2 id="可以先把原来的源文件备份一下"><a href="#可以先把原来的源文件备份一下" class="headerlink" title="可以先把原来的源文件备份一下"></a>可以先把原来的源文件备份一下</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure>

<h2 id="下载阿里和网易的-CentOS-Base-repo"><a href="#下载阿里和网易的-CentOS-Base-repo" class="headerlink" title="下载阿里和网易的 CentOS-Base.repo"></a>下载阿里和网易的 CentOS-Base.repo</h2><h3 id="我用的-CentOS-7"><a href="#我用的-CentOS-7" class="headerlink" title="我用的 CentOS-7"></a>我用的 CentOS-7</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">或者</span><br><span class="line">sudo curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.163.com/.<span class="built_in">help</span>/CentOS7-Base-163.repo</span><br></pre></td></tr></table></figure>

<h2 id="清除-yum-缓存并生成新的-yum-缓存"><a href="#清除-yum-缓存并生成新的-yum-缓存" class="headerlink" title="清除 yum 缓存并生成新的 yum 缓存"></a>清除 yum 缓存并生成新的 yum 缓存</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum clean all</span><br><span class="line">sudo yum makecache</span><br></pre></td></tr></table></figure>

<h2 id="安装-epel-源"><a href="#安装-epel-源" class="headerlink" title="安装 epel 源"></a>安装 epel 源</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum list | grep epel-release</span><br><span class="line">sudo yum install -y epel-release</span><br></pre></td></tr></table></figure>

<h2 id="使用阿里镜像提供的-epel-源"><a href="#使用阿里镜像提供的-epel-源" class="headerlink" title="使用阿里镜像提供的 epel 源"></a>使用阿里镜像提供的 epel 源</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo wget -O /etc/yum.repos.d/epel-7.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br></pre></td></tr></table></figure>

<h2 id="重新清除-yum-缓存并生成新的-yum-缓存"><a href="#重新清除-yum-缓存并生成新的-yum-缓存" class="headerlink" title="重新清除 yum 缓存并生成新的 yum 缓存"></a>重新清除 yum 缓存并生成新的 yum 缓存</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum clean all</span><br><span class="line">sudo yum makecache</span><br></pre></td></tr></table></figure>

<h2 id="系统升级"><a href="#系统升级" class="headerlink" title="系统升级"></a>系统升级</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum -y update</span><br></pre></td></tr></table></figure>

<p>会更新所有软件<br><code>-y</code>可选,加上会同意所有项,即默认 <code>yes</code></p>
<h1 id="3-安装-卸载软件"><a href="#3-安装-卸载软件" class="headerlink" title="3.安装,卸载软件"></a>3.安装,卸载软件</h1><p>比如安装<code>git</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum -y install git</span><br></pre></td></tr></table></figure>

<p>卸载 <code>git</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum -y remove git</span><br></pre></td></tr></table></figure>

<h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
      <categories>
        <category>linux</category>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Kali 下用 swaks 发送邮件</title>
    <url>/2019/06/01/linux/linux-kaliSwaks/</url>
    <content><![CDATA[<h1 id="kali-下的邮件发送工具-swaks"><a href="#kali-下的邮件发送工具-swaks" class="headerlink" title="kali 下的邮件发送工具 swaks"></a>kali 下的邮件发送工具 swaks</h1><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/kali/kali.jpg" alt="kali.jpg"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Swaks 是一个功能强大，灵活，可编写脚本，面向事务的 SMTP 测试工具，目前 Swaks 托管在私有 svn 存储库中。</span><br><span class="line">    官方项目 http：//jetmore.org/john/code/swaks/</span><br></pre></td></tr></table></figure>

<h2 id="1-测试邮箱的连通性"><a href="#1-测试邮箱的连通性" class="headerlink" title="1.测试邮箱的连通性"></a>1.测试邮箱的连通性</h2><p>kali 自带 swaks 工具，无需安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">swaks --to xxx@qq.com</span><br></pre></td></tr></table></figure>

<p>拿我的 QQ 举例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~</span><br><span class="line">➤ swaks --to 1871973389@qq.com                                          01:59:06</span><br><span class="line">=== Trying mx3.qq.com:25...</span><br><span class="line">=== Connected to mx3.qq.com.</span><br><span class="line">&lt;-  220 newxmmxsza22.qq.com MX QQ Mail Server.</span><br><span class="line"> -&gt; EHLO kali.lan</span><br><span class="line">&lt;-  250-newxmmxsza22.qq.com</span><br><span class="line">&lt;-  250-STARTTLS</span><br><span class="line">&lt;-  250-SIZE 73400320</span><br><span class="line">&lt;-  250 OK</span><br><span class="line"> -&gt; MAIL FROM:&lt;root@kali.lan&gt;</span><br><span class="line">&lt;-  250 OK.</span><br><span class="line"> -&gt; RCPT TO:&lt;1871973389@qq.com&gt;</span><br><span class="line">&lt;-  250 OK 1</span><br><span class="line"> -&gt; DATA</span><br><span class="line">&lt;-  354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;.</span><br><span class="line"> -&gt; Date: Sat, 07 Dec 2019 01:59:07 -0500</span><br><span class="line"> -&gt; To: 1871973389@qq.com</span><br><span class="line"> -&gt; From: root@kali.lan</span><br><span class="line"> -&gt; Subject: <span class="built_in">test</span> Sat, 07 Dec 2019 01:59:07 -0500</span><br><span class="line"> -&gt; Message-Id: &lt;20191207015907.007285@kali.lan&gt;</span><br><span class="line"> -&gt; X-Mailer: swaks v20190914.0 jetmore.org/john/code/swaks/</span><br><span class="line"> -&gt;</span><br><span class="line"> -&gt; This is a <span class="built_in">test</span> mailing</span><br><span class="line"> -&gt;</span><br><span class="line"> -&gt;</span><br><span class="line"> -&gt; .</span><br><span class="line">&lt;-  250 Ok: queued as</span><br><span class="line"> -&gt; QUIT</span><br><span class="line">&lt;-  221 Bye.</span><br><span class="line">=== Connection closed with remote host.</span><br></pre></td></tr></table></figure>

<p>返回 250 Ok，说明该邮箱可以正常通信。</p>
<hr>
<h2 id="2-开启-SMTP-服务"><a href="#2-开启-SMTP-服务" class="headerlink" title="2.开启 SMTP 服务"></a>2.开启 SMTP 服务</h2><p>QQ 的 或 163 官网的都可以,个人感觉 163 的还方便些</p>
<p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/kali/screenshot_smtp.png" alt="SMTP_server"></p>
<p>记住 smtp 的密码</p>
<h2 id="3-利用-SMTP-发送邮件"><a href="#3-利用-SMTP-发送邮件" class="headerlink" title="3.利用 SMTP 发送邮件"></a>3.利用 SMTP 发送邮件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">swaks --to 收件箱 --from 发件箱 --body 邮件内容 --header <span class="string">&quot;Subject:hello&quot;</span> --server smtp.qq.com -p 25 -au 发件箱 -ap SMTP的密码</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">   --to //收件人邮箱;</span><br><span class="line">   --from //发件人邮箱;</span><br><span class="line">   --ehlo qq.com //伪造邮件的ehlo头，即发件人邮箱的域名，身法认证;</span><br><span class="line">   --body <span class="string">&quot;https://goobe.io&quot;</span> //引号内为邮件正文;</span><br><span class="line">   --header <span class="string">&quot;Subject:hello&quot;</span> //邮件头信息，Subject为邮件标题;</span><br><span class="line">   --data email.txt //将正常邮件内容保存成TXT文件，再作为正常邮件发出;</span><br><span class="line">   --<span class="built_in">help</span> 显示命令帮助</span><br><span class="line">   --verison 显示版本信息</span><br><span class="line"></span><br><span class="line">输出内容的含义:</span><br><span class="line">   “===”:swaks输出的信息行</span><br><span class="line">   “*“:swaks中产生的错误</span><br><span class="line">   ” -&gt;”:发送到目标的预期行(无错误)</span><br><span class="line">   “&lt;- “:服务器的预期回复(无错误)</span><br><span class="line">   “&lt;**”:服务器返回的错误信息</span><br></pre></td></tr></table></figure>

<h2 id="4-发送附件"><a href="#4-发送附件" class="headerlink" title="4.发送附件"></a>4.发送附件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">swaks --to 收件箱 --from 发件箱  --body 邮件内容  --header <span class="string">&quot;Subject:hello&quot;</span> --attach example.doc --server smtp.qq.com -p 25 -au 发件箱 -ap SMTP密码</span><br></pre></td></tr></table></figure>

<h2 id="5-伪造邮件"><a href="#5-伪造邮件" class="headerlink" title="5.伪造邮件"></a>5.伪造邮件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--data email.txt //将正常邮件内容保存成TXT文件，再作为正常邮件发出</span><br></pre></td></tr></table></figure>

<p>发送内容为 email.txt (记得添加文件路经) 里的全部内容<br>= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =</p>
<p>先找一分邮件，查看邮件原文，复制里面的内容，存为 .txt</p>
<p>= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =<br>去掉 Received 和 To 两行 （发送时用 –from 和 –to 代替）<br>= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">swaks --data ./email.txt --to 收件箱 --from 发件箱 --server smtp.qq.com -p 25 -au 发件箱 -ap SMTP密码</span><br></pre></td></tr></table></figure>

<p>收件箱收到的是 email.txt 里的内容</p>
<h3 id="好了-到这就结束了-其实理论上-swaks-可以伪造邮件里的任何一个参数"><a href="#好了-到这就结束了-其实理论上-swaks-可以伪造邮件里的任何一个参数" class="headerlink" title="好了,到这就结束了,其实理论上 swaks 可以伪造邮件里的任何一个参数"></a>好了,到这就结束了,其实理论上 swaks 可以伪造邮件里的任何一个参数</h3><h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
      <categories>
        <category>linux</category>
        <category>kali</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>kali</tag>
        <tag>swaks</tag>
      </tags>
  </entry>
  <entry>
    <title>Manjaro安装后简单配置</title>
    <url>/2019/06/01/linux/linux-manjaro/</url>
    <content><![CDATA[<h2 id="一个相见恨晚的-Linux-操作系统"><a href="#一个相见恨晚的-Linux-操作系统" class="headerlink" title="一个相见恨晚的 Linux 操作系统"></a>一个相见恨晚的 Linux 操作系统</h2><p>Manjaro 到底有多受欢迎?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DistroWatch是一个包含了各种Linux发行版及其他自由/开放源代码的类Unix操作系统。</span><br><span class="line">( 如OpenSolaris、MINIX及BSD等 ) 的新闻、人气排名、以及其他一般信息等的网站。</span><br><span class="line">它包含了数百种发行版的信息。</span><br><span class="line">原文链接：https://distrowatch.com/table.php?distribution=manjaro</span><br></pre></td></tr></table></figure>

<hr>
<p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/i3/i3.png" alt="screenshot"></p>
<h1 id="Manjaro-安装后简单配置"><a href="#Manjaro-安装后简单配置" class="headerlink" title="Manjaro 安装后简单配置"></a>Manjaro 安装后简单配置</h1><h2 id="1-添加-archlinuxcn-源"><a href="#1-添加-archlinuxcn-源" class="headerlink" title="1. 添加 archlinuxcn 源"></a>1. 添加 <code>archlinuxcn</code> 源</h2><p>编辑这个文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/pacman.conf</span><br></pre></td></tr></table></figure>

<p>在文末添加以下内容,添加清华源,或者别的也行,里面有国内的一些软件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">SigLevel = Never</span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/<span class="variable">$arch</span></span><br></pre></td></tr></table></figure>

<p>保存退出</p>
<h4 id="按照地区自动更新为最快最稳定的软件源镜像地址"><a href="#按照地区自动更新为最快最稳定的软件源镜像地址" class="headerlink" title="按照地区自动更新为最快最稳定的软件源镜像地址"></a>按照地区自动更新为最快最稳定的软件源镜像地址</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman-mirrors -c China</span><br></pre></td></tr></table></figure>

<h4 id="强制更新一下"><a href="#强制更新一下" class="headerlink" title="强制更新一下 :"></a>强制更新一下 :</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -Syyu</span><br></pre></td></tr></table></figure>

<p>========================一路回车就行= = = = = = = = = = = = = = = = = = =</p>
<h2 id="2-安装软件"><a href="#2-安装软件" class="headerlink" title="2.安装软件"></a>2.安装软件</h2><p>需要安装的软件 <code>pacman</code> 里基本都有</p>
<h3 id="1-安装-vim"><a href="#1-安装-vim" class="headerlink" title="1.安装 vim"></a>1.安装 vim</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S vim</span><br></pre></td></tr></table></figure>

<h3 id="2-更换-shell"><a href="#2-更换-shell" class="headerlink" title="2.更换 shell"></a>2.更换 shell</h3><p>默认为 <code>bash</code>,我比较喜欢 <code>fish</code>,方便好用,配置也简单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">安装fish</span><br><span class="line">sudo pacman -S fish</span><br><span class="line">---</span><br><span class="line">更改shell为fish</span><br><span class="line">chsh -s /usr/bin/fish</span><br><span class="line">---</span><br><span class="line">安装oh-my-fish(一个友好的shell)</span><br><span class="line">curl -L https://get.oh-my.fish | fish</span><br></pre></td></tr></table></figure>

<h4 id="可能国内原因-raw-githubusercontent-com-访问不了-安装-oh-my-fish-会失败-可以先尝试-clone-到本地再安装-或者添加-raw-githubusercontent-的-ip-到-hosts-文件"><a href="#可能国内原因-raw-githubusercontent-com-访问不了-安装-oh-my-fish-会失败-可以先尝试-clone-到本地再安装-或者添加-raw-githubusercontent-的-ip-到-hosts-文件" class="headerlink" title="可能国内原因,raw.githubusercontent.com 访问不了,安装 oh-my-fish 会失败,可以先尝试 clone 到本地再安装,或者添加 raw.githubusercontent 的 ip 到 hosts 文件"></a>可能国内原因,raw.githubusercontent.com 访问不了,安装 oh-my-fish 会失败,可以先尝试 clone 到本地再安装,或者添加 raw.githubusercontent 的 ip 到 hosts 文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/oh-my-fish/oh-my-fish</span><br><span class="line"><span class="comment"># 如果你网不好,可以克隆镜像仓库(比如:https://github.com.cnpmjs.org/oh-my-fish/oh-my-fish)</span></span><br><span class="line"><span class="built_in">cd</span> oh-my-fish</span><br><span class="line">bin/install --offline</span><br></pre></td></tr></table></figure>

<h4 id="简单配置一下-fish"><a href="#简单配置一下-fish" class="headerlink" title="简单配置一下 fish"></a>简单配置一下 fish</h4><p>终端输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fish_config</span><br></pre></td></tr></table></figure>

<p>然后它会自动打开浏览器</p>
<h5 id="选一个主题，然后点set-theme"><a href="#选一个主题，然后点set-theme" class="headerlink" title="选一个主题，然后点set theme"></a>选一个主题，然后点<code>set theme</code></h5><p>在<code>promt</code>栏里选个提示符，然后点<code>promt set</code><br>然后就可以关闭浏览器了<br>回到终端，回车即可</p>
<h3 id="3-安装-录屏软件（推荐simplescreenrecorder这个比较小）"><a href="#3-安装-录屏软件（推荐simplescreenrecorder这个比较小）" class="headerlink" title="3.安装 录屏软件（推荐simplescreenrecorder这个比较小）"></a>3.安装 录屏软件（推荐<code>simplescreenrecorder</code>这个比较小）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S simplescreenrecorder</span><br></pre></td></tr></table></figure>

<h3 id="4-安装-VScode"><a href="#4-安装-VScode" class="headerlink" title="4.安装 VScode"></a>4.安装 VScode</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S visual-studio-code-bin</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S code</span><br></pre></td></tr></table></figure>

<h3 id="5-安装网易云音乐"><a href="#5-安装网易云音乐" class="headerlink" title="5.安装网易云音乐"></a>5.安装网易云音乐</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S netease-cloud-music</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="6-安装中文输入法"><a href="#6-安装中文输入法" class="headerlink" title="6.安装中文输入法"></a>6.安装中文输入法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S fcitx5 fcitx5-im fcitx5-rime</span><br><span class="line">sudo pacman -S fcitx5-material-color <span class="comment"># 主题</span></span><br><span class="line">sudo pacman -S fcitx5-configtool  <span class="comment"># 图形化配置界面</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="添加配置文件-xprofile-填入以下几句"><a href="#添加配置文件-xprofile-填入以下几句" class="headerlink" title="添加配置文件 ~/.xprofile 填入以下几句"></a>添加配置文件 <code>~/.xprofile</code> 填入以下几句</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> GTK_IM_MODULE=fcitx5</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> QT_IM_MODULE=fcitx5</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> XMODIFIERS=<span class="string">&quot;@im=fcitx5&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="然后重启-建议设置为开机让-fcitx5-自启"><a href="#然后重启-建议设置为开机让-fcitx5-自启" class="headerlink" title="然后重启 ( 建议设置为开机让 fcitx5 自启 )"></a>然后重启 ( 建议设置为开机让 <code>fcitx5</code> 自启 )</h5><h5 id="重启后你应该会看见一个小键盘的图标-右击选-config-添加-rime-输入法-默认应该是-ctrl-space-切换输入法"><a href="#重启后你应该会看见一个小键盘的图标-右击选-config-添加-rime-输入法-默认应该是-ctrl-space-切换输入法" class="headerlink" title="重启后你应该会看见一个小键盘的图标,右击选 config,添加 rime 输入法,默认应该是 ctrl+space 切换输入法"></a>重启后你应该会看见一个小键盘的图标,右击选 <code>config</code>,添加 <code>rime</code> 输入法,默认应该是 <code>ctrl+space</code> 切换输入法</h5><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/manjaro/fcitx-configtool.png" alt="fcitx-configtool"></p>
<p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/manjaro/rime.png" alt="rime"></p>
<h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
      <categories>
        <category>linux</category>
        <category>manjaro</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>manjaro</tag>
      </tags>
  </entry>
  <entry>
    <title>Js 基础总结及案例</title>
    <url>/2021/05/13/js/js/</url>
    <content><![CDATA[<h1 id="一-JavaScript-介绍"><a href="#一-JavaScript-介绍" class="headerlink" title="一. JavaScript 介绍"></a>一. JavaScript 介绍</h1><h2 id="1-、JavaScript-是什么"><a href="#1-、JavaScript-是什么" class="headerlink" title="(1) 、JavaScript 是什么"></a>(1) 、JavaScript 是什么</h2><h3 id="1-JavaScript-的历史"><a href="#1-JavaScript-的历史" class="headerlink" title="1. JavaScript 的历史"></a>1. JavaScript 的历史</h3><p>Netscape（网景）在最初将其脚本语言命名为 LiveScript，是布兰登.艾克发明的。后来 Netscape 在与 Sun 合作之后将其改名为 JavaScript。JavaScript 最初受 Java 启发而开始设计的，目的之一就是“看上去像 Java”，因此语法上有类似之处，一些名称和命名规范也借自 Java。JavaScript 与 Java 名称上的近似，是当时 Netscape 为了营销考虑与 Sun 微系统达成协议的结果。</p>
<h3 id="2-JavaScript-是什么语言"><a href="#2-JavaScript-是什么语言" class="headerlink" title="2. JavaScript 是什么语言"></a>2. JavaScript 是什么语言</h3><p>可以说：Java 服务器端的编程语言，JavaScript 运行在客户端(浏览器)的编程语言<br>JavaScript(简称 JS)是一种运行在客户端的脚本语言，JavaScript 的解释器被称为 JavaScript 引擎，为浏览器的一部分，广泛用于客户端的脚本语言，最早是在 HTML（标准通用标记语言下的一个应用）网页上使用，用来给 HTML 网页增加动态功能。<br>也可以说，是一门脚本语言、是一门解释性语言、是一门动态类型的语言、是一门基于<br>对象的语言。（不是面向对象）、是一门弱性语言</p>
<h3 id="3-JavaScript-的发展和意义"><a href="#3-JavaScript-的发展和意义" class="headerlink" title="3. JavaScript 的发展和意义"></a>3. JavaScript 的发展和意义</h3><p>最初的目的是为了处理表单的验证操作。JavaScript 发展到现在几乎无所不能，例如：做网页特效、与交互（表单的提交），比如：轮播图、tab 切换、返回顶部。。。<br>例如：网页特效、服务端开发(Node.js)、命令行工具(Node.js)、桌面程序(Electron)、App(Cordova)、控制硬件-物联网(Ruff)、游戏开发(cocos2d-js)</p>
<h3 id="4-JavaScript-和-HTML、CSS-的区别"><a href="#4-JavaScript-和-HTML、CSS-的区别" class="headerlink" title="4. JavaScript 和 HTML、CSS 的区别"></a>4. JavaScript 和 HTML、CSS 的区别</h3><p><code>HTML</code> - 提供网页的结构，提供网页中的内容<br><code>CSS</code> - 用来美化网页<br><code>JavaScript</code> - 可以用来控制网页内容，给网页增加动态的效果</p>
<h3 id="5-JavaScript-的组成"><a href="#5-JavaScript-的组成" class="headerlink" title="5. JavaScript 的组成"></a>5. JavaScript 的组成</h3><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/jscontent.png" alt="js"></p>
<h4 id="（1）ECMAScript-JavaScript-的核心"><a href="#（1）ECMAScript-JavaScript-的核心" class="headerlink" title="（1）ECMAScript - JavaScript 的核心"></a>（1）ECMAScript - JavaScript 的核心</h4><p>ECMA 欧洲计算机制造联合会。JavaScript 的核心，描述了语言的基本语法和数据类型，ECMAScript 是一套标准，定义了一种语言的标准与具体实现无关。</p>
<h4 id="（2）BOM-浏览器对象模型"><a href="#（2）BOM-浏览器对象模型" class="headerlink" title="（2）BOM - 浏览器对象模型"></a>（2）BOM - 浏览器对象模型</h4><p>一套操作浏览器功能的 API。通过 BOM 可以操作浏览器窗口，比如：弹出框、控制浏览器跳转、获取分辨率等。Borswer object model</p>
<h4 id="（3）DOM-文档对象模型"><a href="#（3）DOM-文档对象模型" class="headerlink" title="（3）DOM - 文档对象模型"></a>（3）DOM - 文档对象模型</h4><p>一套操作页面元素的 API。DOM 可以把 HTML 看做是文档树，通过 DOM 提供的 API 可以对树上的节点进行操作。Document object model</p>
<h2 id="2-JavaScript-代码写法"><a href="#2-JavaScript-代码写法" class="headerlink" title="(2) JavaScript 代码写法"></a>(2) JavaScript 代码写法</h2><p>CSS 代码写法分为行内样式、嵌入样式（内部）、外部样式、控制台书写。那么，js 的代码可以分四个地方写：<br>1.在 html 的文件中,script 的标签中写 js 代码<br>2.js 代码可以在 html 的标签中写<br>3.在 js 文件中可以写 js 代码,但是需要在 html 页面中引入 script 的标签中的 src=”js 的路径”<br>4.还可以在控制台直接书写 js 代码</p>
<h3 id="3-JavaScript-问题总结"><a href="#3-JavaScript-问题总结" class="headerlink" title="(3) JavaScript 问题总结"></a>(3) JavaScript 问题总结</h3><ol>
<li>在一对 script 的标签中有错误的 js 代码,那么该错误的代码后面的 js 代码不会执行</li>
<li>如果第一对的 script 标签中有错误,不会影响后面的 script 标签中的 js 代码执行</li>
<li>script 的标签中可以写 type=”text/javascript”标准写法或者写 language=”JavaScript”都可以。但是，目前在我们的 html 页面中，type 和 language 都可以省略，原因：html 是遵循 h5 的标准。</li>
<li>有可能会出现这种情况：script 标签中可能同时出现 type 和 language 的写法。</li>
<li>script 标签在页面中可以出现多对。</li>
<li>script 标签一般是放在 body 的标签的最后的，有的时候会在 head 标签中，目前讲课的时候都在 body 标签的后面(body 中的最后)。</li>
<li>如果 script 标签是引入外部 js 文件的作用，那么这对标签中不要写任何的 js 代码，如果要写，重新写一对 script 标签，里面写代码。</li>
</ol>
<h3 id="4-注释"><a href="#4-注释" class="headerlink" title="(4) 注释"></a>(4) 注释</h3><p>单行注释</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// var a;</span></span><br></pre></td></tr></table></figure>

<p>多行注释</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">var a = 1</span></span><br><span class="line"><span class="comment">var b = 1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h1 id="二-JavaScript-变量"><a href="#二-JavaScript-变量" class="headerlink" title="二. JavaScript 变量"></a>二. JavaScript 变量</h1><h2 id="1-变量引入"><a href="#1-变量引入" class="headerlink" title="(1) 变量引入"></a>(1) 变量引入</h2><p><strong>什么是变量</strong><br>变量是计算机内存中存储数据的标识符，根据变量名称可以获取到内存中存储的数据<br><strong>为什么要使用变量</strong><br>使用变量可以方便的获取或者修改内存中的数据</p>
<h2 id="2-变量声明和初始化"><a href="#2-变量声明和初始化" class="headerlink" title="(2) 变量声明和初始化"></a>(2) 变量声明和初始化</h2><p><code>var</code> 声明变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age;</span><br></pre></td></tr></table></figure>

<p>变量的赋值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age;</span><br><span class="line">age = <span class="number">18</span>;</span><br></pre></td></tr></table></figure>

<p>同时声明多个变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age, name, sex;</span><br><span class="line">age = <span class="number">10</span>;</span><br><span class="line">name = <span class="string">&quot;zs&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>同时声明多个变量并赋值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>,</span><br><span class="line">  name = <span class="string">&quot;zs&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>变量在内存中的存储</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br></pre></td></tr></table></figure>

<h2 id="3-变量的命名规则和规范"><a href="#3-变量的命名规则和规范" class="headerlink" title="(3) 变量的命名规则和规范"></a>(3) 变量的命名规则和规范</h2><p><strong>规则 - 必须遵守的，不遵守会报错</strong><br>1、由字母、数字、下划线、$符号组成，不能以数字开头<br>2、不能是关键字和保留字，例如：for、while。<br>3、区分大小写<br><strong>规范 - 建议遵守的，不遵守不会报错</strong><br>1、变量名必须有意义<br>2、遵守驼峰命名法。首字母小写，后面单词的首字母需要大写。</p>
<h2 id="4-字面量"><a href="#4-字面量" class="headerlink" title="(4) 字面量"></a>(4) 字面量</h2><p>在源代码中一个固定值的表示法，也叫字面量。<br>数值字面量：8, 9, 10<br>字符串字面量：<code>&#39;程序员&#39;</code>, <code>&quot;大前端&quot;</code><br>布尔字面量：<code>true</code>，<code>false</code></p>
<h1 id="三-JavaScript-数据类型"><a href="#三-JavaScript-数据类型" class="headerlink" title="三. JavaScript 数据类型"></a>三. JavaScript 数据类型</h1><h2 id="1-基本数据类型"><a href="#1-基本数据类型" class="headerlink" title="(1) 基本数据类型"></a>(1) 基本数据类型</h2><p><code>Number</code>、<code>String</code>、<code>Boolean</code>、<code>Undefined</code>、<code>Null</code></p>
<h3 id="1-Number-类型"><a href="#1-Number-类型" class="headerlink" title="1. Number 类型"></a>1. Number 类型</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 十进制</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">9</span>;</span><br><span class="line"><span class="comment">//进行算数计算时，八进制和十六进制表示的数值最终都被转换成十进制数值。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 十六进制</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0xA</span>;<span class="comment">//数字序列范围：0~9 以及 A~F</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 八进制</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">07</span>;  <span class="comment">// 对应十进制的 7</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">011</span>; <span class="comment">// 对应十进制的 9</span></span><br><span class="line"><span class="keyword">var</span> num3 = <span class="number">021</span>; <span class="comment">// 对应十进制的 17 //数字序列范围：0~7</span></span><br><span class="line"><span class="comment">// 如果字面值中的数值超出了范围，那么前导零将被忽略，后面的数值将被当作十进制数值解析</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 浮点数</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="number">5e-5</span>;   <span class="comment">// 科学计数法 5 乘以 10 的-5 次方  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 浮点数值的最高精度是 17 位小数，但在进行算术计算时其精确度远远不如整数</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="number">0.1</span> + <span class="number">0.2</span>; <span class="comment">// 结果不是 0.3，而是：0.30000000000000004</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0.07</span> * <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：不要判断两个浮点数是否相等</span></span><br><span class="line"><span class="comment">// 就是说由于 0.1 转换成二进制时是无限循环的，所以在计算机中 0.1 只能存储成一个近似值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 最小值：</span></span><br><span class="line"><span class="comment">// 这个值为： 5e-324</span></span><br><span class="line"><span class="built_in">Number</span>.MIN_VALUE</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最大值：</span></span><br><span class="line"><span class="comment">// 这个值为： 1.7976931348623157e+308</span></span><br><span class="line"><span class="built_in">Number</span>.MAX_VALUE</span><br><span class="line"></span><br><span class="line">无穷大：<span class="literal">Infinity</span></span><br><span class="line">无穷小：-<span class="literal">Infinity</span></span><br></pre></td></tr></table></figure>

<h3 id="数值判断"><a href="#数值判断" class="headerlink" title="数值判断"></a>数值判断</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可以通过 Number()方法判断</span></span><br><span class="line"><span class="literal">NaN</span>：not a number</span><br><span class="line"><span class="literal">NaN</span> 与任何值都不相等，包括他本身</span><br><span class="line"><span class="built_in">isNaN</span>(): is not a number</span><br><span class="line"><span class="comment">// 如果 x 是特殊的非数字值 NaN (或者能被转换为这样的值 )，返回的值就是 true。如果 x 是其他值,则返回 false</span></span><br></pre></td></tr></table></figure>

<h3 id="2、String-类型"><a href="#2、String-类型" class="headerlink" title="2、String 类型"></a>2、String 类型</h3><p>字符串可以使用单引号,也可以使用双引号，例如：<code>&#39;abc&#39;</code>、<code>&quot;abc&quot;</code><br>字符串字面量：<code>&#39;I am Happy&#39;</code>、<code>&quot;Hello World&quot;</code></p>
<h4 id="转义符"><a href="#转义符" class="headerlink" title="转义符"></a>转义符</h4><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/striingtranslate.png" alt="striingtranslate"></p>
<h4 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// length属性用来获取字符串的长度;</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.length);</span><br></pre></td></tr></table></figure>

<h4 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串拼接使用 + 连接;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">11</span> + <span class="number">11</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;hello&quot;</span> + <span class="string">&quot; world&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;100&quot;</span> + <span class="string">&quot;100&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;11&quot;</span> + <span class="number">11</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;male:&quot;</span> + <span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 两边只要有一个是字符串，那么+就是字符串拼接功能</span></span><br><span class="line"><span class="comment">// 两边如果都是数字，那么就是算术功能。</span></span><br></pre></td></tr></table></figure>

<p>语言具有隐式转换 ( 隐式类型转换就是指，数据的类型在不用人工干预的情况下进行转换的行为，原因：<code>js</code> 是一门弱类型（动态类型）的语言，他在声明变量的时候不需要指定类型，对变量赋值也没有类型的检测，所以 <code>js</code> 是非常的灵活的，)</p>
<h3 id="3-Boolean-类型"><a href="#3-Boolean-类型" class="headerlink" title="3. Boolean 类型"></a>3. Boolean 类型</h3><p><code>Boolean</code> 字面量： <code>true</code> 和 <code>false</code>，区分大小写<br>计算机内部存储：<code>true</code> 为 <code>1</code>，<code>false</code> 为 <code>0</code></p>
<h3 id="4-Undefined-和-Null"><a href="#4-Undefined-和-Null" class="headerlink" title="4. Undefined 和 Null"></a>4. Undefined 和 Null</h3><p><code>undefined</code> 表示一个声明了没有赋值的变量，变量只声明的时候值默认是 <code>undefined</code><br><code>null</code> 表示一个空，变量的值如果想为 <code>null</code>，必须手动设置</p>
<h2 id="2-复杂数据类型"><a href="#2-复杂数据类型" class="headerlink" title="(2) 复杂数据类型"></a>(2) 复杂数据类型</h2><p><code>Object</code></p>
<h2 id="3-数据类型转换"><a href="#3-数据类型转换" class="headerlink" title="(3) 数据类型转换"></a>(3) 数据类型转换</h2><h3 id="typeof-关键字"><a href="#typeof-关键字" class="headerlink" title="typeof 关键字"></a><code>typeof</code> 关键字</h3><p>获取变量的类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> age); <span class="comment">// number</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">null</span>); <span class="comment">// Object</span></span><br></pre></td></tr></table></figure>

<p><strong>一个 bug，<code>null</code> 为什么是引用类型（复杂类型）？</strong></p>
<p>在 JS 的最初版本中使用的是 32 位系统，为了性能考虑使用低位存储变量的类型信息，000 开头的是对象，<code>null</code> 是全 0，所以将 <code>null</code> 误判为 <code>Object</code> 了，虽然现在的内部类型判断代码已经改变了，但 bug 永久的遗留下来了</p>
<h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h3><p>转换成字符串类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.toString()); <span class="comment">// String(&quot;5&quot;)</span></span><br></pre></td></tr></table></figure>

<h3 id="String"><a href="#String" class="headerlink" title="String()"></a>String()</h3><p><code>String()</code> 函数存在的意义：有些值没有 <code>toString()</code>, 这个时候可以使用 <code>String()</code>.比如：<code>undefined</code> 和 <code>null</code></p>
<h3 id="拼接字符串方式"><a href="#拼接字符串方式" class="headerlink" title="拼接字符串方式"></a>拼接字符串方式</h3><p><code>num + &quot;&quot;</code>，当 + 两边一个操作符是字符串类型，一个操作符是其它类型的时候，会先把其它类型转换成字符串再进行字符串拼接，返回字符串</p>
<h3 id="转换成数值类型"><a href="#转换成数值类型" class="headerlink" title="转换成数值类型"></a>转换成数值类型</h3><p><code>Number()</code> 可以把任意值转换成数值，如果要转换的字符串中有一个不是数值的字符，返回 <code>NaN</code><br>#### Number()转化规则<br>a. 如果字符串中只包含数字时，将其转换为十进制数值，忽略前导 0<br>b. 如果字符串中包含有效浮点格式，如“1.1”，将其转换为对应的浮点数字，忽略前导 0<br>c. 如果字符串中包含有效的十六进制格式，如“0xf”，将其转换为相同大小的十进制数值<br>d. 如果字符串为空，或者是空内容，将其转换为 0<br>e. 如果字符串中包含除上述格式之外的字符，则将其转换为 NaN</p>
<h4 id="parseInt"><a href="#parseInt" class="headerlink" title="parseInt()"></a>parseInt()</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回 12，如果第一个字符是数字会解析知道遇到第一个小数点结束</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="built_in">parseInt</span>(<span class="string">&quot;12.3abc&quot;</span>);</span><br><span class="line"><span class="comment">// 返回 NaN，如果第一个字符不是数字或者符号就返回 NaN</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="built_in">parseInt</span>(<span class="string">&quot;abc123&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="parseFloat"><a href="#parseFloat" class="headerlink" title="parseFloat()"></a>parseFloat()</h4><p><code>parseFloat()</code> 把字符串转换成浮点数，<code>parseFloat()</code> 和 <code>parseInt()</code> 非常相似，不同之处在与<br><code>parseFloat()</code> 会解析第一个<code>.</code> 遇到第二个 <code>.</code> 或者非数字结束<br>如果解析的内容里只有整数，解析成整数</p>
<h4 id="正负运算"><a href="#正负运算" class="headerlink" title="正负运算"></a>正负运算</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;500&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(+str); <span class="comment">// 取正</span></span><br><span class="line"><span class="built_in">console</span>.log(-str); <span class="comment">// 取负</span></span><br></pre></td></tr></table></figure>

<h3 id="转换成布尔类型"><a href="#转换成布尔类型" class="headerlink" title="转换成布尔类型"></a>转换成布尔类型</h3><p><strong><code>Boolean()</code></strong><br><code>0</code>, <code>&#39;&#39;</code>, <code>null</code>, <code>undefined</code>, <code>NaN</code>, 会转换成 <code>false</code>,其它都会转换成 <code>true</code></p>
<h1 id="四-JavaScript-运算"><a href="#四-JavaScript-运算" class="headerlink" title="四. JavaScript 运算"></a>四. JavaScript 运算</h1><h2 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="(1) 算术运算符"></a>(1) 算术运算符</h2><p><code>+ - * / %</code></p>
<h2 id="2-一元运算符"><a href="#2-一元运算符" class="headerlink" title="(2) 一元运算符"></a>(2) 一元运算符</h2><p>一元运算符：只有一个操作数的运算符<br><code>5 + 6</code> 两个操作数的运算符是二元运算符<br><code>++</code> 自身加 1, <code>--</code> 自身减 1</p>
<p><strong>前置 <code>++</code> 先将自身的值自增 1，再将自增后的值赋值给变量</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">5</span>;</span><br><span class="line">++num1;</span><br><span class="line"><span class="built_in">console</span>.log(num1); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>

<p><strong>后置 <code>++</code> 先将自身的值赋值给变量，然后再自增 1</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num2 = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num2++); <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(num2); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>

<p><strong>总结：</strong><br>前置 <code>++</code>： 先加后输出<br>后置 <code>++</code>： 先输出后加</p>
<h2 id="3-逻辑运算符-布尔运算符"><a href="#3-逻辑运算符-布尔运算符" class="headerlink" title="(3) 逻辑运算符 (布尔运算符)"></a>(3) 逻辑运算符 (布尔运算符)</h2><p><code>&amp;&amp;</code> (与) 两个操作数同时为 <code>true</code>，结果为 <code>true</code>，否则都是 <code>false</code><br><code>||</code> (或) 两个操作数有一个为 <code>true</code>，结果为 <code>true</code>，否则为 <code>false</code><br><code>!</code> (非) 取反</p>
<h2 id="4-关系运算符-比较运算符"><a href="#4-关系运算符-比较运算符" class="headerlink" title="(4) 关系运算符(比较运算符)"></a>(4) 关系运算符(比较运算符)</h2><p><code>&lt; &gt; &gt;= &lt;= == != === !==</code><br><code>==</code> 与 <code>===</code> 的区别：<code>==</code> 只进行值得比较，<code>===</code> 类型和值同时相等，则相等</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">&quot;55&quot;</span> == <span class="number">55</span>; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="string">&quot;55&quot;</span> === <span class="number">55</span>; <span class="comment">// false 值相等，类型不相等</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="number">55</span> === <span class="number">55</span>; <span class="comment">// true 值和类型都相等</span></span><br></pre></td></tr></table></figure>

<h2 id="5-赋值运算符"><a href="#5-赋值运算符" class="headerlink" title="(5) 赋值运算符"></a>(5) 赋值运算符</h2><p><code>= += -= *= /= %=</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">num += <span class="number">5</span>; <span class="comment">//相当于 num = num + 5;</span></span><br><span class="line">num *= <span class="number">5</span>; <span class="comment">//相当于 num = num * 5;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-运算符的优先级"><a href="#6-运算符的优先级" class="headerlink" title="(6) 运算符的优先级"></a>(6) 运算符的优先级</h2><p><strong>优先级从高到底如下：</strong></p>
<p>括号&gt;点运算符&gt;一元运算符&gt; 算数运算符 &gt;关系运算符&gt;逻辑运算符 &gt;赋值运算符</p>
<p><strong>注意：同级运算符先后顺序如下：</strong><br>一元运算符 <code>++</code> <code>--</code> <code>!</code><br>算数运算符 先 <code>*</code> <code>/</code> <code>%</code> 后 <code>+</code> <code>-</code><br>关系运算符 <code>&gt;</code> <code>&gt;=</code> <code>&lt;</code> <code>&lt;=</code> <code>==</code> <code>!=</code> <code>===</code> <code>!==</code><br>逻辑运算符 先 <code>&amp;&amp;</code> 后 <code>||</code></p>
<h2 id="运算优先级练习"><a href="#运算优先级练习" class="headerlink" title="运算优先级练习"></a>运算优先级练习</h2><p><strong>优先级： 括号&gt;点运算符&gt;一元运算符&gt; 算数运算符 &gt;关系运算符&gt;逻辑运算符 &gt;赋值运算符</strong><br>(1)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span> &gt;= <span class="number">6</span> || (<span class="string">&quot;人&quot;</span> != <span class="string">&quot;阿凡达&quot;</span> &amp;&amp; !(<span class="number">12</span> * <span class="number">2</span> == <span class="number">144</span>) &amp;&amp; <span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 第一轮 4 &gt;= 6 || (&quot;人&quot; != &quot;阿凡达&quot; &amp;&amp; !(false) &amp;&amp; true)</span></span><br><span class="line"><span class="comment">// 第二轮 4 &gt;= 6 || (&quot;人&quot; != &quot;阿凡达&quot; &amp;&amp; true &amp;&amp; true)</span></span><br><span class="line"><span class="comment">// 第三轮 false || (true &amp;&amp; true &amp;&amp; true)</span></span><br><span class="line"><span class="comment">// 第四轮 false || true</span></span><br><span class="line"><span class="comment">// 结果为 true</span></span><br></pre></td></tr></table></figure>

<p>(2)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">100.2</span> &gt;= <span class="number">52</span> || (<span class="string">&quot;蛇&quot;</span> != <span class="string">&quot;眼镜蛇&quot;</span> &amp;&amp; !(<span class="number">25</span> * <span class="number">4</span> == <span class="number">120</span>)) || <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 结果为 true</span></span><br><span class="line"><span class="comment">// 第一轮 : 100.2 &gt;= 52 || (&quot;蛇&quot; != &quot;眼镜蛇&quot; &amp;&amp; !false) || true</span></span><br><span class="line"><span class="comment">// 第二轮 : 100.2 &gt;= 52 || (&quot;蛇&quot; != &quot;眼镜蛇&quot; &amp;&amp; true) || true</span></span><br><span class="line"><span class="comment">// 第三轮 : true || (true &amp;&amp; true) || true</span></span><br><span class="line"><span class="comment">// 第四轮 : true</span></span><br></pre></td></tr></table></figure>

<h1 id="五-流程控制"><a href="#五-流程控制" class="headerlink" title="五. 流程控制"></a>五. 流程控制</h1><p>程序的三种基本结构<br>顺序结构：从上到下执行的代码就是顺序结构(程序默认就是由上到下顺序执行的)<br>分支结构：根据不同的情况，执行对应代码<br>循环结构：重复做一件事情</p>
<h2 id="1-分支结构"><a href="#1-分支结构" class="headerlink" title="1. 分支结构"></a>1. 分支结构</h2><h3 id="1-if-语句"><a href="#1-if-语句" class="headerlink" title="(1) if 语句"></a>(1) if 语句</h3><p><code>if</code> 语句  - 只有当指定条件为 true 时，使用该语句来执行代码<br><code>if...else</code> 语句  - 当条件为 true 时执行代码，当条件为 false 时执行其他代码<br><code>if...else if....else</code> 语句- 使用该语句来选择多个代码块之一来执行</p>
<p><strong>if 案例判断一个人的年龄是否满 18 岁(是否成年)</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="comment">// 判断</span></span><br><span class="line"><span class="keyword">if</span> <span class="comment">// (条件) &#123;执行语句&#125;</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">19</span>;</span><br><span class="line"><span class="keyword">if</span> (age &gt;= <span class="number">18</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;成年了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (age &lt; <span class="number">18</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;未成年&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 弹出输入框</span></span><br><span class="line">prompt(<span class="string">&quot;参数会展示在页面上&quot;</span>) <span class="comment">// 点击确认会返回输入内容，点击取消会返回 null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = prompt();</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> age = prompt();</span><br><span class="line"><span class="keyword">if</span> (age &gt;= <span class="number">18</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;成年了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (age &lt; <span class="number">18</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;未成年&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>if 案例百分制转换成等级制</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> grade = prompt(<span class="string">&quot;请输入成绩&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (grade &gt; <span class="number">0</span> &amp;&amp; grade &lt; <span class="number">60</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;不及格&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (grade &lt; <span class="number">70</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;及格&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (grade &lt; <span class="number">80</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;良&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (grade &lt; <span class="number">90</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;良好&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (grade &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;请输入0-100&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-三元运算符"><a href="#2-三元运算符" class="headerlink" title="(2) 三元运算符"></a>(2) 三元运算符</h3><p><code>表达式 1</code> ? <code>表达式 2</code> : <code>表达式 3</code><br>是对 <code>if ... else</code> 语句的一种简化写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">age &gt;= <span class="number">18</span> ? <span class="built_in">console</span>.log(<span class="string">&quot;成年&quot;</span>) : <span class="built_in">console</span>.log(<span class="string">&quot;未成年&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="3-switch-语句"><a href="#3-switch-语句" class="headerlink" title="(3) switch 语句"></a>(3) switch 语句</h3><p><code>switch</code> 语句<br><code>break</code> 可以省略，如果省略，代码会继续执行下一个 <code>case</code><br><code>default</code> 关键词来规定匹配不存在时做的事情。<br><code>switch case</code> 使用严格比较（===），值必须与要匹配的类型相同</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> day = prompt(<span class="string">&quot;请输入数字&quot;</span>);</span><br><span class="line"><span class="comment">// prompt 返回类型为字符串</span></span><br><span class="line"><span class="keyword">switch</span> (<span class="built_in">Number</span>(day)) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;周一&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;周二&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;周三&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;周四&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;周五&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;周六&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;周日&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;666&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>百分制转换成等级制</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> grade = prompt();</span><br><span class="line"><span class="keyword">var</span> g = <span class="built_in">parseInt</span>(grade / <span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(g);</span><br><span class="line"><span class="keyword">switch</span> (g) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;NB&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;良好&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;良&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;及格&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;不及格&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>能用 <code>switch</code> 语句实现的就一定可以使用 <code>if</code> 实现，但是反之不一定，如果是区间范围就采用 <code>if</code> .如果是等值判断使用 <code>switch</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// If 语句会把后面的值隐式转换成布尔类型</span></span><br><span class="line"><span class="comment">// 转换为 true ： 非空字符串 非 0 数字 true 任何对象</span></span><br><span class="line"><span class="comment">// 转换成 false ： 空字符串, 0, false, null, undefined</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">undefined</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-循环结构"><a href="#2-循环结构" class="headerlink" title="2. 循环结构"></a>2. 循环结构</h2><p>在 <code>javascript</code> 中，循环语句有三种，<code>while</code>、<code>do..while</code>、<code>for</code> 循环。</p>
<h3 id="1-while-语句"><a href="#1-while-语句" class="headerlink" title="(1) while 语句"></a>(1) while 语句</h3><p>while 循环会在指定条件为真时循环执行代码块</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//   死循环</span></span><br><span class="line"><span class="comment">// while (true) &#123;</span></span><br><span class="line"><span class="comment">//   console.log();</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印 1-100</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (a &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  a++;</span><br><span class="line">  <span class="built_in">console</span>.log(a++);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印 1-100 的和</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (b &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">  sum += b;</span><br><span class="line">  b++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印 100 以内 7 的倍数</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (c &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (c % <span class="number">7</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(c);</span><br><span class="line">  &#125;</span><br><span class="line">  c++;</span><br><span class="line">  <span class="comment">// ++c;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 100 以内偶数及和</span></span><br><span class="line"><span class="keyword">var</span> d = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> sum2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (d &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (d % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(d + <span class="string">&quot;是偶数&quot;</span>);</span><br><span class="line">    sum2 += d;</span><br><span class="line">  &#125;</span><br><span class="line">  d++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 100 以内奇数及和</span></span><br><span class="line"><span class="keyword">var</span> e = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> sum3 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (e &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (e % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e + <span class="string">&quot;是奇数&quot;</span>);</span><br><span class="line">    sum3 += e;</span><br><span class="line">  &#125;</span><br><span class="line">  e++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum3);</span><br></pre></td></tr></table></figure>

<h3 id="2-do…while-语句"><a href="#2-do…while-语句" class="headerlink" title="(2) do…while 语句"></a>(2) do…while 语句</h3><p><code>do..while</code> 循环和 <code>while</code> 循环非常像，二者经常可以相互替代，但是 <code>do..while</code> 的特点是不管条件成不成立，都会执行一次。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// do ... while</span></span><br><span class="line"><span class="comment">// 打印 1-100 之间所有数的和</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> sum4 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(f);</span><br><span class="line">  sum4 += f;</span><br><span class="line">  f++;</span><br><span class="line">&#125; <span class="keyword">while</span> (f &lt;= <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印 100 以内 7的倍数</span></span><br><span class="line"><span class="keyword">var</span> g = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (g % <span class="number">7</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(g);</span><br><span class="line">  &#125;</span><br><span class="line">  g++;</span><br><span class="line">&#125; <span class="keyword">while</span> (g &lt;= <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印 100 以内所有偶数</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i + <span class="string">&quot;是偶数&quot;</span>);</span><br><span class="line">    sum += i;</span><br><span class="line">  &#125;</span><br><span class="line">  i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt;= <span class="number">100</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br></pre></td></tr></table></figure>

<h3 id="3-for-语句"><a href="#3-for-语句" class="headerlink" title="(3) for 语句"></a>(3) for 语句</h3><p><code>while</code> 和 <code>do...while</code> 一般用来解决无法确认次数的循环。<code>for</code> 循环一般在循环次数确定的时候比较方便</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// for 循环</span></span><br><span class="line"><span class="comment">// 1-100 和</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt; <span class="number">101</span>; j++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(j);</span><br><span class="line">  sum += j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1-100 偶数和</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    sum += i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双层 for 循环</span></span><br><span class="line"><span class="comment">// 正方形</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">&quot;&lt;br /&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三角形</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;#&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">&quot;&lt;br /&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-continue-和-break"><a href="#4-continue-和-break" class="headerlink" title="(4) continue 和 break"></a>(4) continue 和 break</h3><p><code>break</code> :立即跳出整个循环，即循环结束，开始执行循环后面的内容（直接跳到大括号）<br><code>continue</code> :立即跳出当前循环，继续下一次循环（跳到 <code>i++</code> 的地方）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// break</span></span><br><span class="line"><span class="comment">// continue</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">10</span> == <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// continue;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">sum += i;</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br></pre></td></tr></table></figure>

<h3 id="5-循环语句区别"><a href="#5-循环语句区别" class="headerlink" title="(5) 循环语句区别"></a>(5) 循环语句区别</h3><h4 id="1-循环结构的表达式不同"><a href="#1-循环结构的表达式不同" class="headerlink" title="1. 循环结构的表达式不同"></a>1. 循环结构的表达式不同</h4><p><code>do-while</code> 循环结构表达式为：<code>do</code>{循环体;}<br><code>for</code> 循环的结构表达式为：<code>for</code>（单次表达式;条件表达式;末尾循环体）{中间循环体；}。<br><code>while</code> 循环的结构表达式为：<code>while</code>（表达式）{循环体}</p>
<h4 id="2-执行时判断方式不同"><a href="#2-执行时判断方式不同" class="headerlink" title="2. 执行时判断方式不同"></a>2. 执行时判断方式不同</h4><p><code>do-while</code> 循环将先运行一次，因为经过第一次 <code>do</code> 循环后，当检查条件表达式的值时，其值为   不成立时而会退出循环。保证了至少执行 <code>do</code>{ }内的语句一次。<br><code>for</code> 循环执行的中间循环体可以为一个语句，也可以为多个语句，当中间循环体只有一个语句时，其大括号{}可以省略，执行完中间循环体后接着执行末尾循环体。<br><code>while</code> 循环执行时当满足条件时进入循环，进入循环后，当条件不满足时，执行完循环体内全部语句后再跳出（而不是立即跳出循环）。</p>
<h4 id="3-执行次数不同"><a href="#3-执行次数不同" class="headerlink" title="3. 执行次数不同"></a>3. 执行次数不同</h4><p><code>do-while</code> 循环是先执行后判断，执行次数至少为一次。<br><code>for</code> 循环是先判断后执行，可以不执行中间循环体。<br><code>while</code> 循环先判断后执行，可以不执行中间循环体。</p>
<h4 id="4-执行末尾循环体的顺序不同"><a href="#4-执行末尾循环体的顺序不同" class="headerlink" title="4. 执行末尾循环体的顺序不同"></a>4. 执行末尾循环体的顺序不同</h4><p><code>do-while</code> 循环是在中间循环体中加入末尾循环体，并在执行中间循环体时执行末尾循环体。<br><code>for</code> 循环的中间循环体在条件判断语句里，执行末尾循环体后自动执行中间循环体。<br><code>while</code> 循环的末尾循环体也是在中间循环体里，并在中间循环体中执行。</p>
<h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 作业 1</span></span><br><span class="line"><span class="comment">// 求 1-100 所有数的乘积</span></span><br><span class="line"><span class="keyword">var</span> sum1 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> a = <span class="number">1</span>; a &lt;= <span class="number">100</span>; a++) &#123;</span><br><span class="line">  sum1 *= a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum1);</span><br><span class="line"><span class="comment">// ---------------------------------------------</span></span><br><span class="line"><span class="comment">// 作业 2</span></span><br><span class="line"><span class="comment">// 求 1-100 之间所有奇数的和</span></span><br><span class="line"><span class="keyword">var</span> sum2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> b = <span class="number">1</span>; b &lt;= <span class="number">100</span>; b++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (b % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">    sum2 += b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------------------------------------------</span></span><br><span class="line"><span class="comment">// 作业 3</span></span><br><span class="line"><span class="comment">// 计算 1-100 之间能被 3 整除的数的和</span></span><br><span class="line"><span class="keyword">var</span> sum3 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> c = <span class="number">1</span>; c &lt;= <span class="number">100</span>; c++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (c % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    sum3 += c;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------------------------------------------</span></span><br><span class="line"><span class="comment">// 作业 4</span></span><br><span class="line"><span class="comment">// 计算 1-100 之间不能被7整除的数的和</span></span><br><span class="line"><span class="keyword">var</span> sum4 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> d = <span class="number">1</span>; d &lt;= <span class="number">100</span>; d++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (d % <span class="number">7</span> == <span class="number">0</span>) &#123;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    sum4 += d;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum4);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------------------------------------------</span></span><br><span class="line"><span class="comment">// 作业 5</span></span><br><span class="line"><span class="comment">// 本金10000元存入银行，年利率是千分之三，每过1年，将本金和利息相加作为新的本金。计算5年后，获得的本金是多少？</span></span><br><span class="line"><span class="keyword">var</span> money = <span class="number">10000</span>,</span><br><span class="line">  rate = <span class="number">0.003</span>,</span><br><span class="line">  years = <span class="number">5</span>,</span><br><span class="line">  sum5 = <span class="number">0</span>;</span><br><span class="line">sum5 += money;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> year = <span class="number">1</span>; year &lt;= years; year++) &#123;</span><br><span class="line">  sum5 *= <span class="number">1</span> + rate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum5);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------------------------------------------</span></span><br><span class="line"><span class="comment">// 作业 6</span></span><br><span class="line"><span class="comment">// 有个人想知道，一年之内一对兔子能繁殖多少对？</span></span><br><span class="line"><span class="comment">// 于是就筑了一道围墙把一对兔子关在里面。已知一对兔子每个月可以生一对小兔子，而一对兔子从出生后第3个月起每月生一对小兔子。假如一年内没有发生死亡现象，那么，一对兔子一年内（12个月）能繁殖成多少对？</span></span><br><span class="line"><span class="comment">// (兔子的规律为数列，1，1，2，3，5，8，13，21)</span></span><br><span class="line"><span class="keyword">var</span> sum6,</span><br><span class="line">  r1 = <span class="number">1</span>,</span><br><span class="line">  r2 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> month = <span class="number">1</span>; month &lt;= <span class="number">12</span>; month++) &#123;</span><br><span class="line">  sum6 = r1 + r2;</span><br><span class="line">  r1 = r2;</span><br><span class="line">  r2 = sum6;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;第&quot;</span> + month + <span class="string">&quot;个月 : &quot;</span> + sum6 + <span class="string">&quot; 只&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ---------------------------------------------</span></span><br><span class="line"><span class="comment">// 作业 7</span></span><br><span class="line"><span class="comment">// 求 1-100 之间不能被 7 整除的整数的和（用continue）</span></span><br><span class="line"><span class="keyword">var</span> sum7 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> e = <span class="number">1</span>; e &lt;= <span class="number">100</span>; e++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (e % <span class="number">7</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    sum7 += e;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum7);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------------------------------------------</span></span><br><span class="line"><span class="comment">// 作业 8</span></span><br><span class="line"><span class="comment">// 求 200-300 之间所有的奇数的和（用continue）</span></span><br><span class="line"><span class="keyword">var</span> sum8 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">200</span>; i &lt;= <span class="number">300</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    sum8 += i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum8);</span><br><span class="line"><span class="comment">// ---------------------------------------------</span></span><br><span class="line"><span class="comment">// 作业 9</span></span><br><span class="line"><span class="comment">// 求 200-300之间第一个能被7整数的数（break）</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">200</span>; j &lt;= <span class="number">300</span>; j++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (j % <span class="number">7</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(j);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-调试"><a href="#2-调试" class="headerlink" title="2. 调试"></a>2. 调试</h2><h3 id="1-alert"><a href="#1-alert" class="headerlink" title="(1) alert()"></a>(1) alert()</h3><h3 id="2-console-log"><a href="#2-console-log" class="headerlink" title="(2) console.log()"></a>(2) console.log()</h3><h3 id="3-debugger-关键字"><a href="#3-debugger-关键字" class="headerlink" title="(3) debugger 关键字"></a>(3) debugger 关键字</h3><p>debugger  关键字用于停止执行 JavaScript，并调用调试函数。这个关键字与在调试工具中设置断点的效果是一样的</p>
<h3 id="4-断点调试"><a href="#4-断点调试" class="headerlink" title="(4) 断点调试"></a>(4) 断点调试</h3><h1 id="六-数组"><a href="#六-数组" class="headerlink" title="六. 数组"></a>六. 数组</h1><h2 id="1-为什么要学习数组"><a href="#1-为什么要学习数组" class="headerlink" title="(1) 为什么要学习数组"></a>(1) 为什么要学习数组</h2><p>之前学习的数据类型，只能存储一个值,比如：<code>Number</code>,<code>String</code></p>
<h2 id="2-数组的定义"><a href="#2-数组的定义" class="headerlink" title="(2) 数组的定义"></a>(2) 数组的定义</h2><p>所谓数组，就是将多个元素（通常是同一类型）按一定顺序排列放到一个集合中，那么这个集合我们就称之为数组。<br>数组是一个有序的列表，可以在数组中存放任意的数据，并且数组的长度可以动态的调整</p>
<h2 id="3-通过数组字面量创建数组"><a href="#3-通过数组字面量创建数组" class="headerlink" title="(3) 通过数组字面量创建数组"></a>(3) 通过数组字面量创建数组</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个空数组</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [];</span><br><span class="line"><span class="comment">// 创建一个包含3个数值的数组，多个数组项以逗号隔开</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="comment">// 创建一个包含2个字符串的数组</span></span><br><span class="line"><span class="keyword">var</span> arr3 = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"><span class="comment">// 可以通过数组的length属性获取数组的长度</span></span><br><span class="line"><span class="built_in">console</span>.log(arr3.length);</span><br><span class="line"><span class="comment">// 可以设置length属性改变数组中元素的个数</span></span><br><span class="line">arr3.length = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<h2 id="4-获取数组元素"><a href="#4-获取数组元素" class="headerlink" title="(4) 获取数组元素"></a>(4) 获取数组元素</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取数组元素</span></span><br><span class="line"><span class="comment">// 按下标取值,从0开始</span></span><br><span class="line"><span class="comment">// 取值未定义的下标，值为 undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(arr2[<span class="number">10</span>]); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<h2 id="5-遍历数组"><a href="#5-遍历数组" class="headerlink" title="(5) 遍历数组"></a>(5) 遍历数组</h2><p>遍历：遍及所有，对数组的每一个元素都访问一次就叫遍历。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-数组中新增元素"><a href="#6-数组中新增元素" class="headerlink" title="(6) 数组中新增元素"></a>(6) 数组中新增元素</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组中新增元素</span></span><br><span class="line"><span class="comment">// 赋值</span></span><br><span class="line">arr2[arr2.length] = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// push()</span></span><br><span class="line"><span class="comment">// 在数组末尾添加，返回数组长度</span></span><br><span class="line">arr2.push(<span class="number">101</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// unshift()</span></span><br><span class="line"><span class="comment">// 在数组开始添加任意元素,返回数组长度</span></span><br><span class="line">arr2.unshift(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// shift()</span></span><br><span class="line"><span class="comment">// 从数组中删除第一个元元素，并返回该元素的值.此方法会更改数组的长度</span></span><br><span class="line"><span class="keyword">var</span> r = arr2.shift();</span><br><span class="line"><span class="built_in">console</span>.log(r);</span><br><span class="line"><span class="built_in">console</span>.log(arr2);</span><br></pre></td></tr></table></figure>

<h2 id="数组练习案例"><a href="#数组练习案例" class="headerlink" title="数组练习案例"></a>数组练习案例</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 求数组所有数平均值</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class="line">  sum += arr1[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br><span class="line"><span class="built_in">console</span>.log(sum / arr1.length);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组最大值，最小值 (第一种)</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">0</span>, <span class="number">1</span>, , <span class="number">32</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">var</span> min = arr2[<span class="number">0</span>], <span class="comment">// 假设第一个元素是最小值</span></span><br><span class="line">  max = arr2[<span class="number">0</span>]; <span class="comment">// 假设第一个元素是最大值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr2.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr2[i] &gt; max) &#123;</span><br><span class="line">    max = arr2[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (arr2[i] &lt; min) &#123;</span><br><span class="line">    min = arr2[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(max);</span><br><span class="line"><span class="built_in">console</span>.log(min);</span><br><span class="line"><span class="comment">// 数组最大值，最小值 (第二种)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr2.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr2[i] &gt; arr2[i + <span class="number">1</span>]) &#123;</span><br><span class="line">    <span class="keyword">var</span> temp = arr2[i + <span class="number">1</span>];</span><br><span class="line">    arr2[i + <span class="number">1</span>] = arr2[i];</span><br><span class="line">    arr2[i] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">max = arr2[arr2.length - <span class="number">1</span>];</span><br><span class="line"><span class="built_in">console</span>.log(max);</span><br><span class="line"></span><br><span class="line"><span class="comment">// indexOf()</span></span><br><span class="line"><span class="comment">// 返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回 -1</span></span><br><span class="line"><span class="comment">// 数组去重</span></span><br><span class="line"><span class="comment">// 第一种</span></span><br><span class="line"><span class="keyword">var</span> arr3 = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">22</span>, <span class="number">22</span>, <span class="number">55</span>, <span class="number">55</span>, <span class="number">9</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr3.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr3.indexOf(arr3[i]) == i) &#123;</span><br><span class="line">    newArr.push(arr3[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种</span></span><br><span class="line"><span class="comment">// 遍历新数组,indexOf 返回判断 -1, 即不存在就 push()</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr3.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (newArr.indexOf(arr3[i]) == -<span class="number">1</span>) &#123;</span><br><span class="line">    newArr.push(arr3[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br></pre></td></tr></table></figure>

<h1 id="七-函数"><a href="#七-函数" class="headerlink" title="七. 函数"></a>七. 函数</h1><h2 id="1-为什么要有函数"><a href="#1-为什么要有函数" class="headerlink" title="(1) 为什么要有函数"></a>(1) 为什么要有函数</h2><p>如果要在多个地方求 1-100 之间所有数的和，应该怎么做？</p>
<h2 id="2-什么是函数"><a href="#2-什么是函数" class="headerlink" title="(2) 什么是函数"></a>(2) 什么是函数</h2><p>把一段相对独立的具有特定功能的代码块封装起来，形成一个独立实体，就是函数。<br>起个名字（函数名），在后续开发中可以反复调用。<br>函数的作用就是封装一段代码，将来可以重复使用。</p>
<h2 id="3-函数的定义"><a href="#3-函数的定义" class="headerlink" title="(3) 函数的定义"></a>(3) 函数的定义</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.具名函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.匿名函数</span></span><br><span class="line"><span class="keyword">var</span> fun = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;fun&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="4-函数的调用"><a href="#4-函数的调用" class="headerlink" title="(4) 函数的调用"></a>(4) 函数的调用</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数调用，加 (),即函数名();</span></span><br><span class="line"><span class="comment">// 特点：函数体只有在调用的时候才会执行，调用需要()进行调用。可以调用多次(重复使用)</span></span><br><span class="line">name();</span><br><span class="line">fun();</span><br></pre></td></tr></table></figure>

<p><strong>示例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;吃了没？&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">sayHi();</span><br><span class="line">​</span><br><span class="line"><span class="comment">// 求1-100之间所有数的和</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span>  i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    sum += i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">getSum();</span><br></pre></td></tr></table></figure>

<h2 id="5-函数的参数"><a href="#5-函数的参数" class="headerlink" title="(5) 函数的参数"></a>(5) 函数的参数</h2><p><strong>形参和实参</strong></p>
<ol>
<li>形式参数：在声明一个函数的时候，为了函数的功能更加灵活，有些值是固定不了的，对于这些固定不了的值。我们可以给函数设置参数。这个参数没有具体的值，仅仅起到一个占位置的作用，我们通常称之为形式参数，也叫形参</li>
<li>实际参数：如果函数在声明时，设置了形参，那么在函数调用的时候就需要传入对应的参数，我们把传入的参数叫做实际参数，也叫实参。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">5</span>,</span><br><span class="line">  y = <span class="number">6</span>;</span><br><span class="line">fn(x, y);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a + b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//x,y实参，有具体的值。函数执行的时候会把x,y复制一份给函数内部的a和b，函数内部的值是复制的新值，无法修改外部的x,y</span></span><br><span class="line"><span class="comment">// 不传值为 undefined;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-函数的返回值"><a href="#6-函数的返回值" class="headerlink" title="(6) 函数的返回值"></a>(6) 函数的返回值</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数通过return返回一个返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">re</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(re(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值总结</span></span><br><span class="line"><span class="comment">// 1.如果函数没有使用 return语句 ，那么函数有默认的返回值：undefined</span></span><br><span class="line"><span class="comment">// 2.如果函数使用 return语句，那么跟再 return 后面的值，就成了函数的返回值</span></span><br><span class="line"><span class="comment">// 3.如果函数使用 return语句，但是return后面没有任何值，那么函数的返回值也是：undefined</span></span><br><span class="line"><span class="comment">// 4.函数使用 return 语句后，这个函数会在执行完 return 语句之后停止并立即退出，也就是说 return 后面的所有其他代码都不会再执行</span></span><br><span class="line"><span class="comment">// 推荐的做法是要么让函数始终都返回一个值，要么永远都不要返回值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 求阶乘</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jieCh</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> j = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      j *= i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(jieCh(<span class="number">4</span>));</span><br></pre></td></tr></table></figure>

<h2 id="函数案例"><a href="#函数案例" class="headerlink" title="函数案例"></a>函数案例</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 求 1-n 之间所有的和</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumN</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    sum += i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(sum);</span><br><span class="line">&#125;</span><br><span class="line">sumN(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 圆的面积</span></span><br><span class="line"><span class="comment">// toFixed : 四舍五入,指定小数位数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">circle</span>(<span class="params">r</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log((<span class="built_in">Math</span>.PI * r * r).toFixed(<span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line">circle(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求俩数中的最大值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMaxNum</span>(<span class="params">numA, numB</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (numA &gt; numB) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;最大值 : &quot;</span> + numA);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (numA &lt; numB) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;最大值 : &quot;</span> + numB);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(numA + <span class="string">&quot;=&quot;</span> + numB);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">getMaxNum(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">getMaxNum(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求三个数的最大值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMaxNumInThreeNum</span>(<span class="params">numX, numY, numZ</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (numX == numY) &#123;</span><br><span class="line">    <span class="keyword">if</span> (numX == numZ) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;三者相等&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (numX &gt; numZ) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;最大值 ：&quot;</span> + numX);</span><br><span class="line">      <span class="comment">// 或者: console.log(&quot;最大值 ：&quot; + numY);</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;最大值 : &quot;</span> + numZ);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (numX &gt; numY) &#123;</span><br><span class="line">    <span class="keyword">if</span> (numX &gt; numZ) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;最大值 : &quot;</span> + numX);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;最大值 : &quot;</span> + numZ);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (numY &gt; numZ) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;最大值 ：&quot;</span> + numY);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;最大值 ：&quot;</span> + numZ);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">getMaxNumInThreeNum(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断一个数是否为素数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPrime</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">0</span> || n == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(n + <span class="string">&quot; 是素数&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(n + <span class="string">&quot; 不是素数&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (n % i != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(n + <span class="string">&quot; 是素数&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(n + <span class="string">&quot; 不是素数&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">isPrime(<span class="number">4</span>);</span><br></pre></td></tr></table></figure>

<h2 id="作业-1"><a href="#作业-1" class="headerlink" title="作业"></a>作业</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 作业1：</span></span><br><span class="line"><span class="comment">// 数组去重，返回一个新数组</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">duplicateRemoval</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newArr = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (newArr.indexOf(arr[i]) == -<span class="number">1</span>) &#123;</span><br><span class="line">      newArr.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(duplicateRemoval(arr1));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作业2：</span></span><br><span class="line"><span class="comment">// 将数组[10,1,35,61,89,36,55]冒泡排序，从小到大</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">10</span>, <span class="number">1</span>, <span class="number">35</span>, <span class="number">61</span>, <span class="number">89</span>, <span class="number">36</span>, <span class="number">55</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr2.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr2.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr2[j] &gt; arr2[j + <span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="keyword">var</span> temp = arr2[j];</span><br><span class="line">      arr2[j] = arr2[j + <span class="number">1</span>];</span><br><span class="line">      arr2[j + <span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作业3：</span></span><br><span class="line"><span class="comment">// 求1!+2!+3!+....+n!</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumJieCh</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sumJie = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// n 轮</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="comment">// 每轮从 1 开始累乘</span></span><br><span class="line">    jie = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">      jie *= j;</span><br><span class="line">    &#125;</span><br><span class="line">    sumJie += jie;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sumJie;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sumJieCh(<span class="number">1</span>), sumJieCh(<span class="number">2</span>), sumJieCh(<span class="number">3</span>), sumJieCh(<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作业4：</span></span><br><span class="line"><span class="comment">// 输入一个年份，判断是否是闰年[闰年：能被4整数并且不能被100整数，或者能被400整数]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isLeapYear</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> year = prompt(<span class="string">&quot;请输入年份&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(year + <span class="string">&quot; 是闰年&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (year % <span class="number">400</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(year + <span class="string">&quot; 是世纪闰年&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(year + <span class="string">&quot; 不是闰年&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">isLeapYear();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作业5：</span></span><br><span class="line"><span class="comment">// 输入某年某月某日，判断这一天是这一年的第几天？（不用做）</span></span><br><span class="line"><span class="comment">// 😁</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 作业6：</span></span><br><span class="line"><span class="comment">// 利用函数的返回值，求1+2+3+4+………+n</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    result += i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作业7：</span></span><br><span class="line"><span class="comment">// 斐波那契数列函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> f = [<span class="number">1</span>, <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; n - <span class="number">2</span>; i++) &#123;</span><br><span class="line">    f.push(f[i] + f[i + <span class="number">1</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fibonacci(<span class="number">5</span>));</span><br></pre></td></tr></table></figure>

<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 冒泡排序</span></span><br><span class="line"><span class="comment">// 从小到大</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">7</span>];</span><br><span class="line"><span class="comment">// 第一层 for 循环是比较多少轮</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr1.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// 第二层 for 循环是每轮比较多少次,递减</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr1.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr1[j] &gt; arr1[j + <span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="keyword">var</span> temp = arr1[j + <span class="number">1</span>];</span><br><span class="line">      arr1[j + <span class="number">1</span>] = arr1[j];</span><br><span class="line">      arr1[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从大到小</span></span><br><span class="line"><span class="comment">// 俩数判断后交换顺序改一下就行</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr2.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr2.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr2[j] &lt; arr2[j + <span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="keyword">var</span> temp = arr2[j + <span class="number">1</span>];</span><br><span class="line">      arr2[j + <span class="number">1</span>] = arr2[j];</span><br><span class="line">      arr2[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr2);</span><br></pre></td></tr></table></figure>

<!-- -------------------------------- -->

<h1 id="八-预解析"><a href="#八-预解析" class="headerlink" title="八. 预解析"></a>八. 预解析</h1><p><code>JavaScript</code> 引擎在对 <code>JavaScript</code> 代码进行解释执行之前，会对 <code>JavaScript</code> 代码进行预解析，在预解析阶段，会将以关键字 <code>var</code> 和 <code>function</code> 开头的语句块提前进行处理。<br>当变量和函数的声明处在作用域比较靠后的位置的时候，变量和函数的声明会被提升到作用域的开头。</p>
<h2 id="1-函数提升"><a href="#1-函数提升" class="headerlink" title="(1) 函数提升"></a>(1) 函数提升</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">func();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;fun&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 由于 JavaScript 的预解析机制，上面的代码就等效于：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;fun&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">func();</span><br></pre></td></tr></table></figure>

<h2 id="2-变量提升"><a href="#2-变量提升" class="headerlink" title="(2) 变量提升"></a>(2) 变量提升</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 变量声明被提升,赋值并没有提升</span></span><br><span class="line"><span class="built_in">console</span>.log(e); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> e = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line"><span class="keyword">var</span> e;</span><br><span class="line"><span class="built_in">console</span>.log(e);</span><br><span class="line">e = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h2 id="3-函数同名"><a href="#3-函数同名" class="headerlink" title="(3) 函数同名"></a>(3) 函数同名</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">func1();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;func1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">func1();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;func2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 由于预解析机制，func1的声明会被提升，提升之后的代码为</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;func2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">func1();</span><br><span class="line">func1();</span><br><span class="line"><span class="comment">// 同名的函数，后面的会覆盖前面的，所以两次输出结果都是 func2</span></span><br></pre></td></tr></table></figure>

<h2 id="4-变量和函数同名"><a href="#4-变量和函数同名" class="headerlink" title="(4) 变量和函数同名"></a>(4) 变量和函数同名</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(f);</span><br><span class="line"><span class="keyword">var</span> f = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 当出现变量声明和函数同名的时候，只会对函数声明进行提升，变量会被忽略。所以上面的代码的输出结果为</span></span><br><span class="line"><span class="comment">// ƒ f() &#123;&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">num</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(num);</span><br><span class="line">&#125;</span><br><span class="line">num(); <span class="comment">// num is not a function</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当变量和函数同名时,只会对函数声明进行提升，变量会被忽略。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 同名的变量和函数，变量会覆盖函数，导致函数无法调用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通俗来讲就是只要出现同名的函数和变量，优先对函数进行提升。但没用，变量会覆盖函数，最终只有变量声明语句生效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照常规的书写顺序，同名的函数与变量，变量会覆盖函数</span></span><br></pre></td></tr></table></figure>

<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先提升</span></span><br><span class="line"><span class="comment">// 再看顺序</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 变量提升后的顺序:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  <span class="keyword">var</span> b;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  a = <span class="number">3</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">  b = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 所以结果为</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// ƒ b() &#123;&#125;</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">234</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">  a = <span class="number">123</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  <span class="keyword">var</span> a;</span><br><span class="line">  b = <span class="number">234</span>;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line"><span class="comment">// 变量提升后的顺序:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  <span class="keyword">var</span> a;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">  b = <span class="number">234</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">  a = <span class="number">123</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  b = <span class="number">234</span>;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line"><span class="comment">// 所以结果为:</span></span><br><span class="line"><span class="comment">// ƒ a() &#123;&#125;</span></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// 234</span></span><br><span class="line"><span class="comment">// 123</span></span><br><span class="line"><span class="comment">// 123</span></span><br><span class="line"><span class="comment">// ƒ () &#123;&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-预解析是分作用域的"><a href="#5-预解析是分作用域的" class="headerlink" title="(5) 预解析是分作用域的"></a>(5) 预解析是分作用域的</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">m</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> m = <span class="string">&quot;m&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(m); <span class="comment">// m 未定义</span></span><br><span class="line"><span class="comment">// 解析后的代码:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">m</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> m;</span><br><span class="line">  m = <span class="string">&quot;m&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(m); <span class="comment">// m 未定义</span></span><br></pre></td></tr></table></figure>

<h2 id="6-函数表达式不会提升"><a href="#6-函数表达式不会提升" class="headerlink" title="(6) 函数表达式不会提升"></a>(6) 函数表达式不会提升</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fun1();</span><br><span class="line"><span class="keyword">var</span> fun1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;666&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 结果是 : func1 is not a function，原因就是函数表达式，并不会被提升。只是简单地当做变量声明进行了处理，如下</span></span><br><span class="line"><span class="keyword">var</span> fun1;</span><br><span class="line">fun1();</span><br><span class="line">fun1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;666&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="7-作用域"><a href="#7-作用域" class="headerlink" title="(7)作用域"></a>(7)作用域</h2><h3 id="1-全局作用域"><a href="#1-全局作用域" class="headerlink" title="(1) 全局作用域"></a>(1) 全局作用域</h3><p>直接编写在 <code>script</code> 标签之中的 <code>JS</code> 代码，都是全局作用域；或者是一个单独的 <code>JS</code> 文件中的。<br>全局作用域在页面打开时创建，页面关闭时销毁；<br>在全局作用域中有一个全局对象 <code>window</code>（代表的是一个浏览器的窗口，由浏览器创建），可以直接使用。<br>所有创建的变量都会作为 <code>window</code> 对象的属性保存。</p>
<h3 id="2-局部作用域-函数作用域"><a href="#2-局部作用域-函数作用域" class="headerlink" title="(2) 局部作用域 ( 函数作用域 )"></a>(2) 局部作用域 ( 函数作用域 )</h3><p>在函数内部就是局部作用域，这个代码的名字只在函数的内部起作用</p>
<h3 id="3-隐式全局变量"><a href="#3-隐式全局变量" class="headerlink" title="(3) 隐式全局变量"></a>(3) 隐式全局变量</h3><p>声明变量使用<code>var</code>, 如果不使用 <code>var</code> 声明的变量就是全局变量( 禁用 )<br>因为在任何代码结构中都可以使用该语法. 那么再代码维护的时候会有问题. 所以除非特殊原因不要这么用.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fun2();</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  b = <span class="number">1</span>;</span><br><span class="line">  c = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">  <span class="built_in">console</span>.log(c);</span><br><span class="line">&#125;</span><br><span class="line">fun2 执行后获得隐式全局变量 <span class="string">`b`</span> 和 <span class="string">`c`</span></span><br></pre></td></tr></table></figure>

<h1 id="九-对象"><a href="#九-对象" class="headerlink" title="九. 对象"></a>九. 对象</h1><h2 id="1-为什么要有对象"><a href="#1-为什么要有对象" class="headerlink" title="(1) 为什么要有对象"></a>(1) 为什么要有对象</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printPerson</span>(<span class="params">name, age, sex....</span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 函数的参数如果特别多的话，可以使用对象简化</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printPerson</span>(<span class="params">person</span>) </span>&#123;  </span><br><span class="line">   <span class="built_in">console</span>.log(person.name);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-什么是对象"><a href="#2-什么是对象" class="headerlink" title="(2) 什么是对象"></a>(2) 什么是对象</h2><p>现实生活中：万物皆对象，对象是一个具体的事物，一个具体的事物就会有行为和特征。<br>举例： 一辆车、一部手机、一台电脑、一张桌子<br>车是一类事物，门口停的那辆车才是对象。特征：红色、四个轮子，行为：驾驶、刹车</p>
<h2 id="3-JavaScript-中的对象"><a href="#3-JavaScript-中的对象" class="headerlink" title="(3) JavaScript 中的对象"></a>(3) JavaScript 中的对象</h2><p>JavaScript 的对象是无序属性的集合。<br>其属性可以包含基本值、对象或函数。对象就是一组没有顺序的值。我们可以把 JavaScript 中的对象想象成键值对，其中值可以是数据和函数。<br><code>Key</code> = <code>value</code><br>对象的行为和特征<br>特征—属性<br>行为—方法<br>Tips：<br>事物的特征在对象中用属性来表示。<br>事物的行为在对象中用方法来表示。</p>
<h2 id="4-对象创建方式"><a href="#4-对象创建方式" class="headerlink" title="(4) 对象创建方式"></a>(4) 对象创建方式</h2><h3 id="1-对象字面量"><a href="#1-对象字面量" class="headerlink" title="1. 对象字面量"></a>1. 对象字面量</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;zs&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="literal">true</span></span><br><span class="line">  fun=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;fun&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="2-new-Object-创建对象"><a href="#2-new-Object-创建对象" class="headerlink" title="2. new Object()创建对象"></a>2. new Object()创建对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">person.name = <span class="string">&quot;lisi&quot;</span>;</span><br><span class="line">person.age = <span class="number">35</span>;</span><br><span class="line">person.job = <span class="string">&quot;codeman&quot;</span>;</span><br><span class="line">person.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="3-工厂函数创建对象"><a href="#3-工厂函数创建对象" class="headerlink" title="3. 工厂函数创建对象"></a>3. 工厂函数创建对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  person.name = name;</span><br><span class="line">  person.age = age;</span><br><span class="line">  person.job = job;</span><br><span class="line">  person.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> person;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = createPerson(<span class="string">&quot;张三&quot;</span>, <span class="number">22</span>, <span class="string">&quot;actor&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="4-自定义构造函数"><a href="#4-自定义构造函数" class="headerlink" title="4. 自定义构造函数"></a>4. 自定义构造函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.job = job;</span><br><span class="line">  <span class="built_in">this</span>.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>, <span class="number">22</span>, <span class="string">&quot;actor&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="5-属性和方法"><a href="#5-属性和方法" class="headerlink" title="(5) 属性和方法"></a>(5) 属性和方法</h2><ol>
<li><p>如果一个变量属于一个对象所有，那么该变量就可以称之为该对象的一个属性</p>
</li>
<li><p>如果一个函数属于一个对象所有，那么该函数就可以称之为该对象的一个方法</p>
</li>
</ol>
<h2 id="6-new-关键字"><a href="#6-new-关键字" class="headerlink" title="(6) new 关键字"></a>(6) new 关键字</h2><p>构造函数，是一种特殊的函数。主要用来在创建对象时初始化对象，即为对象成员变量赋初始值，总与 new 运算符一起使用在创建对象的语句中。</p>
<ol>
<li><p>构造函数用于创建一类对象，首字母要大写。</p>
</li>
<li><p>构造函数要和 <code>new</code> 一起使用才有意义。</p>
</li>
</ol>
<p><strong><code>new</code> 在执行时会做四件事情：</strong></p>
<p>1、new 会在内存中创建一个新的空对象<br>2、new 会让 this 指向这个新的对象<br>3、new 会返回这个新对象</p>
<h2 id="7-this"><a href="#7-this" class="headerlink" title="(7) this"></a>(7) this</h2><p>函数内部的 <code>this</code> 几个特点：</p>
<ol>
<li>函数在定义的时候 <code>this</code> 是不确定的，只有在调用的时候才可以确定</li>
<li>一般函数直接执行，内部 <code>this</code> 指向全局 window</li>
<li>函数作为一个对象的方法，被该对象所调用，那么 <code>this</code> 指向的是该对象</li>
<li>构造函数中的 <code>this</code> 其实是一个隐式对象，类似一个初始化的模型，所有方法和属性都挂载到了这个隐式对象身上，后续通过 new 关键字来调用，从而实现实例化</li>
</ol>
<h2 id="8-对象的使用"><a href="#8-对象的使用" class="headerlink" title="(8) 对象的使用"></a>(8) 对象的使用</h2><p>遍历对象的属性<br>通过 for..in 语法可以遍历一个对象<br>删除对象的属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过 for ... in 遍历对象的属性</span></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;man&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj1) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历对象的属性值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj1) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(obj1[key]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 删除对象的属性</span></span><br><span class="line"><span class="keyword">delete</span> obj1.name;</span><br></pre></td></tr></table></figure>

<h1 id="十-JavaScript-错误"><a href="#十-JavaScript-错误" class="headerlink" title="十. JavaScript  错误"></a>十. JavaScript  错误</h1><h2 id="1-JavaScript-try-和-catch"><a href="#1-JavaScript-try-和-catch" class="headerlink" title="(1) JavaScript try 和 catch"></a>(1) JavaScript <code>try</code> 和 <code>catch</code></h2><p><code>try</code>  语句允许我们定义在执行时进行错误测试的代码块。<br><code>catch</code>  语句允许我们定义当 <code>try</code> 代码块发生错误时，所执行的代码块。<br><code>JavaScript</code> 语句  <code>try</code>  和  <code>catch</code>  是成对出现的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    alertt(<span class="string">&quot;666&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error.message); <span class="comment">// alertt is not defined</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">t();</span><br><span class="line"><span class="comment">// catch 块会捕捉到 try 块中的错误，会执行 catch 里的部分</span></span><br></pre></td></tr></table></figure>

<h2 id="2-finally-语句"><a href="#2-finally-语句" class="headerlink" title="(2) finally 语句"></a>(2) finally 语句</h2><p><code>finally</code> 语句不论之前的 <code>try</code> 和 <code>catch</code> 中是否产生异常都会执行该代码块</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    alertt(<span class="string">&quot;666&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error.message); <span class="comment">// alertt is not defined</span></span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;finally&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">t();</span><br></pre></td></tr></table></figure>

<h2 id="3-Throw-语句"><a href="#3-Throw-语句" class="headerlink" title="(3) Throw 语句"></a>(3) Throw 语句</h2><p><code>throw</code> 语句允许我们创建自定义错误。<br>正确的技术术语是：创建或抛出异常（exception）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检测输入变量的值。如果值是错误的，会抛出一个异常（错误）。catch 会捕捉到这个错误，并显示一段自定义的错误消息</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = prompt();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="string">&quot;&quot;</span>) <span class="keyword">throw</span> <span class="string">&quot;值为空&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isNaN</span>(x)) <span class="keyword">throw</span> <span class="string">&quot;请输入数字&quot;</span>;</span><br><span class="line">    x = <span class="built_in">Number</span>(x);</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">5</span>) <span class="keyword">throw</span> <span class="string">&quot;太小&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">10</span>) <span class="keyword">throw</span> <span class="string">&quot;太大&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;good&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">myFunction();</span><br></pre></td></tr></table></figure>

<h2 id="作业-2"><a href="#作业-2" class="headerlink" title="作业"></a>作业</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 作业1;</span></span><br><span class="line"><span class="comment">// 创建一个电脑对象,有颜色,有重量,有品牌,有型号,可以看电影,可以听音乐,可以打游戏,可以敲代码;</span></span><br><span class="line"><span class="keyword">var</span> computer = &#123;</span><br><span class="line">  <span class="attr">color</span>: <span class="string">&quot;#494f5c&quot;</span>,</span><br><span class="line">  <span class="attr">weight</span>: <span class="string">&quot;120&quot;</span>,</span><br><span class="line">  <span class="attr">brand</span>: <span class="string">&quot;Brand&quot;</span>,</span><br><span class="line">  <span class="attr">model</span>: <span class="string">&quot;model&quot;</span>,</span><br><span class="line">  <span class="attr">seeMovies</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;看电影&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">listenMusics</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;听音乐&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">gaming</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;打游戏&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">coding</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;coding&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(computer);</span><br><span class="line">computer.gaming();</span><br><span class="line">computer.coding();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作业2;</span></span><br><span class="line"><span class="comment">// 创建一个按钮对象, 宽, 高, 背景颜色, 点击行为, 按钮有鼠标进入的行为;</span></span><br><span class="line"><span class="keyword">var</span> button = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">button.width = <span class="string">&quot;120px&quot;</span>;</span><br><span class="line">button.height = <span class="string">&quot;40px&quot;</span>;</span><br><span class="line">button.backgroundColor = <span class="string">&quot;#494f5c&quot;</span>;</span><br><span class="line">button.click = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;click&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">button.hover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;hover&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(button);</span><br><span class="line">button.click();</span><br><span class="line">button.hover();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作业3;</span></span><br><span class="line"><span class="comment">// 创建一个车的对象, 有重量, 颜色, 牌子, 可以载人, 拉货;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCar</span>(<span class="params">weight, color, brand, canBeManned, pickUpTheGoods</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> car = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  car.weight = weight;</span><br><span class="line">  car.color = color;</span><br><span class="line">  car.brand = brand;</span><br><span class="line">  car.canBeManned = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;可以载人&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  car.pickUpTheGoods = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;可拉货&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> car;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> car1 = createCar(<span class="string">&quot;2000kg&quot;</span>, <span class="string">&quot;#494f5c&quot;</span>, <span class="string">&quot;brand&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(car1);</span><br><span class="line">car1.canBeManned();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作业4;</span></span><br><span class="line"><span class="comment">// 利用对象属性不能重复的特性给数组去重;</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">9</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">duplicateRemoval</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> newArr = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!obj[arr[i]]) &#123;</span><br><span class="line">      newArr.push(arr[i]);</span><br><span class="line">      obj[arr[i]] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(duplicateRemoval(arr));</span><br></pre></td></tr></table></figure>

<h1 id="十一-js-内置对象"><a href="#十一-js-内置对象" class="headerlink" title="十一. js 内置对象"></a>十一. js 内置对象</h1><h2 id="1-内置对象"><a href="#1-内置对象" class="headerlink" title="1.内置对象"></a>1.内置对象</h2><p><code>JavaScript</code> 中的对象分为 4 种：内置对象、浏览器对象、自定义对象、DOM 对象。<br><code>JavaScript</code> 提供多个内置对象：Math/Array/Number/String/Boolean …<br>对象只是带有属性和方法的特殊数据类型。学习一个内置对象的使用，只要学会其常用的成员的使用(通过查文档学习)。内置对象的方法很多，我们只需要知道内置对象提供的常用方法，使用的时候查询文档。</p>
<h2 id="2-Math-对象"><a href="#2-Math-对象" class="headerlink" title="2. Math 对象"></a>2. Math 对象</h2><p><code>Math</code> 对象不是构造函数，它具有数学常数和函数的属性和方法，都以静态成员的方式提供。<br>跟数学相关的运算来找 <code>Math</code> 中的成员(求绝对值，取整)。</p>
<h3 id="1-常用属性"><a href="#1-常用属性" class="headerlink" title="(1) 常用属性"></a>(1) 常用属性</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.PI; <span class="comment">// 圆周率</span></span><br></pre></td></tr></table></figure>

<h3 id="2-常用方法"><a href="#2-常用方法" class="headerlink" title="(2) 常用方法"></a>(2) 常用方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.random(); <span class="comment">// 生成随机数</span></span><br><span class="line"><span class="built_in">Math</span>.floor(); <span class="comment">// 向下取整</span></span><br><span class="line"><span class="built_in">Math</span>.ceil(); <span class="comment">// 向上取整</span></span><br><span class="line"><span class="built_in">Math</span>.round(); <span class="comment">// 取整，四舍五入</span></span><br><span class="line"><span class="built_in">Math</span>.abs(); <span class="comment">// 绝对值</span></span><br><span class="line"><span class="built_in">Math</span>.max(); <span class="comment">// 最大值</span></span><br><span class="line"><span class="built_in">Math</span>.min(); <span class="comment">// 最小值</span></span><br><span class="line"><span class="built_in">Math</span>.sin(); <span class="comment">// 正弦</span></span><br><span class="line"><span class="built_in">Math</span>.cos(); <span class="comment">// 余弦</span></span><br><span class="line"><span class="built_in">Math</span>.pow(); <span class="comment">// 求指数次幂</span></span><br><span class="line"><span class="built_in">Math</span>.sqrt(); <span class="comment">// 求平方根</span></span><br></pre></td></tr></table></figure>

<h2 id="3-Date-对象"><a href="#3-Date-对象" class="headerlink" title="3. Date 对象"></a>3. Date 对象</h2><p>创建 <code>Date</code> 实例用来处理日期和时间。<code>Date</code> 对象基于 1970 年 1 月 1 日（世界标准时间）起的毫秒数。</p>
<h3 id="1-创建日期对象"><a href="#1-创建日期对象" class="headerlink" title="(1) 创建日期对象"></a>(1) 创建日期对象</h3><p><code>Date()</code> 是构造函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">// 获取到的是 1970 年 1 月 1 日至今的毫秒数</span></span><br></pre></td></tr></table></figure>

<h3 id="2-日期原始值"><a href="#2-日期原始值" class="headerlink" title="(2) 日期原始值"></a>(2) 日期原始值</h3><p>getTime()：获取 1970 年 1 月 1 日至今的毫秒数<br>valueOf();原始值，获取 1970 年 1 月 1 日至今的毫秒数</p>
<h3 id="3-获取日期指定部分"><a href="#3-获取日期指定部分" class="headerlink" title="(3) 获取日期指定部分"></a>(3) 获取日期指定部分</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">date.getMilliseconds();</span><br><span class="line">date.getSeconds(); <span class="comment">// 返回 0-59</span></span><br><span class="line">date.getMinutes(); <span class="comment">// 返回 0-59</span></span><br><span class="line">date.getHours(); <span class="comment">// 返回 0-23</span></span><br><span class="line">date.getDay(); <span class="comment">// 返回星期几 0 周日   6 周 6</span></span><br><span class="line">date.getDate(); <span class="comment">// 返回当前月的第几天</span></span><br><span class="line">date.getMonth(); <span class="comment">// 返回月份，从 0 开始</span></span><br><span class="line">date.getFullYear(); <span class="comment">//返回 4 位的年份 如 2016</span></span><br></pre></td></tr></table></figure>

<h2 id="4-Array-对象"><a href="#4-Array-对象" class="headerlink" title="4. Array 对象"></a>4. Array 对象</h2><h3 id="1-创建数组对象的两种方式"><a href="#1-创建数组对象的两种方式" class="headerlink" title="(1) 创建数组对象的两种方式"></a>(1) 创建数组对象的两种方式</h3><p>1、字面量方式<br>2、new Array()</p>
<h3 id="2-检测一个对象是否是数组"><a href="#2-检测一个对象是否是数组" class="headerlink" title="(2) 检测一个对象是否是数组"></a>(2) 检测一个对象是否是数组</h3><p><code>instanceof</code> 如果返回 <code>true</code> 就是数组，<code>false</code> 是非数组 ( 这玩意儿很少用 )<br><code>Array.isArray()</code> 如果返回 <code>true</code> 就是数组，<code>false</code> 是非数组 ( 常用 )<br><code>valueOf()</code> 返回数组对象本身</p>
<h3 id="3-栈操作-先进后出"><a href="#3-栈操作-先进后出" class="headerlink" title="(3) 栈操作 (先进后出)"></a>(3) 栈操作 (先进后出)</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">push(); <span class="comment">// 添加元素</span></span><br><span class="line">pop(); <span class="comment">// 删除元素</span></span><br></pre></td></tr></table></figure>

<p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/stack.png" alt="stack"></p>
<h3 id="4-队列操作-先进先出"><a href="#4-队列操作-先进先出" class="headerlink" title="(4) 队列操作 (先进先出)"></a>(4) 队列操作 (先进先出)</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">shift(); <span class="comment">// 删除元素</span></span><br><span class="line">unshift(); <span class="comment">// 添加元素</span></span><br></pre></td></tr></table></figure>

<h3 id="5-排序方法"><a href="#5-排序方法" class="headerlink" title="(5) 排序方法"></a>(5) 排序方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">reverse(); <span class="comment">// 翻转数组</span></span><br><span class="line">sort(); <span class="comment">// 只看第一位数来排序</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//   var arr = [1, 2, 3, 4, 9, 8, 7, 6, 5];</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">100</span>, <span class="number">200</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr1.sort()); <span class="comment">// 然而排序后的结果不是咱想要的</span></span><br></pre></td></tr></table></figure>

<p><strong>可以这样</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr1.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a - b; <span class="comment">// 从小到大排序</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr1.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> b - a; <span class="comment">// 从大到小排序</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="6-操作方法"><a href="#6-操作方法" class="headerlink" title="(6) 操作方法"></a>(6) 操作方法</h3><h4 id="concat-把参数拼接到当前数组、-或者用于连接两个或多个数组"><a href="#concat-把参数拼接到当前数组、-或者用于连接两个或多个数组" class="headerlink" title="concat() 把参数拼接到当前数组、  或者用于连接两个或多个数组"></a><code>concat()</code> 把参数拼接到当前数组、  或者用于连接两个或多个数组</h4><h4 id="slice-start-end"><a href="#slice-start-end" class="headerlink" title="slice(start,end)"></a><code>slice(start,end)</code></h4><p>1、从 <code>start</code> 开始截取元素，到 <code>end</code> 结束，包括 <code>start</code>,不包括 <code>end</code>,返回新数组，<code>start</code>,<code>end</code> 是索引,<br>2、不会改变原始数组</p>
<h4 id="splice"><a href="#splice" class="headerlink" title="splice()"></a><code>splice()</code></h4><p><code>splice(start,length)</code><br>1、从 <code>start</code> 开始截取元素，截取 <code>length</code> 个，,<code>返回新数组，start</code> 是索引,<code>length</code> 是个数, <strong>如果不写<code>length</code>参数,会从<code>start</code>一直删到最后</strong><br>2、会改变元素的数组</p>
<h3 id="7-位置方法"><a href="#7-位置方法" class="headerlink" title="(7) 位置方法"></a>(7) 位置方法</h3><p><code>indexOf()</code> 寻找元素位置,返回第一次出现的位置的索引值,没有找到返回 -1，<br><code>lastIndexOf()</code>   从后往前找<br>上述方法只是查找顺序不一样 结果都是索引值</p>
<h3 id="8-数组迭代方法"><a href="#8-数组迭代方法" class="headerlink" title="(8) 数组迭代方法"></a>(8) 数组迭代方法</h3><p>1、<code>forEach()</code> 方法用于调用数组的每个元素，并将元素传递给回调函数</p>
<p>可以拿到每个数组中的值，没有返回值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">array.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value, index</span>))</span></span><br><span class="line"><span class="function">// <span class="title">value</span> 必需,当前元素</span></span><br><span class="line"><span class="function">// <span class="title">Index</span> 可选,当前元素索引值</span></span><br></pre></td></tr></table></figure>

<p>2、<code>every()</code>, <code>some()</code> 方法用于检测数组所有元素是否都符合指定条件（通过函数提供）<br><code>some()</code>,<code>every()</code> 方法的参数是一个回调函数，回调函数中的第一个参数是数组的元素，第二个参数是数组的索引<br><code>some()</code>,<code>every()</code> 方法都会返回新的数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> flag1 = arr3.every(<span class="function"><span class="keyword">function</span> (<span class="params">value, index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">55</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(flag1);</span><br><span class="line"><span class="keyword">var</span> flag2 = arr3.some(<span class="function"><span class="keyword">function</span> (<span class="params">value, index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt;= <span class="number">88</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(flag2);</span><br></pre></td></tr></table></figure>

<p><code>every()</code> :判断回调函数中的表达式是否全部满足，如果满足，返回值就是 <code>true</code>,只要有一个不满足就是 <code>false</code></p>
<p><code>some</code> 判断回调函数中的表达式是否有一个满足，如果至少一个满足，返回值就是 <code>true</code></p>
<h3 id="9-清空数组"><a href="#9-清空数组" class="headerlink" title="(9) 清空数组"></a>(9) 清空数组</h3><h4 id="方式-1-推荐"><a href="#方式-1-推荐" class="headerlink" title="方式 1 推荐"></a>方式 1 推荐</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr = [];</span><br></pre></td></tr></table></figure>

<h4 id="方式-2"><a href="#方式-2" class="headerlink" title="方式 2"></a>方式 2</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.length = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<h4 id="方式-3"><a href="#方式-3" class="headerlink" title="方式 3"></a>方式 3</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.splice(<span class="number">0</span>, arr.length);</span><br><span class="line"><span class="comment">// 或者,不写 length ,会一直删到最后</span></span><br><span class="line">arr.splice(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<h3 id="10-数组转化字符串"><a href="#10-数组转化字符串" class="headerlink" title="(10) 数组转化字符串"></a>(10) 数组转化字符串</h3><p><code>join()</code> 将数组转化为字符串，以参数分割</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;31423412&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.split(<span class="string">&quot;&quot;</span>).join()); <span class="comment">// 3,1,4,2,3,4,1,2</span></span><br><span class="line"><span class="built_in">console</span>.log(str.split(<span class="string">&quot;&quot;</span>).join(<span class="string">&quot;&quot;</span>)); <span class="comment">// 31423412</span></span><br><span class="line"><span class="built_in">console</span>.log(str.split(<span class="string">&quot;&quot;</span>).join(<span class="string">&quot;-&quot;</span>)); <span class="comment">// 3-1-4-2-3-4-1-2</span></span><br></pre></td></tr></table></figure>

<h2 id="5-基本包装类型"><a href="#5-基本包装类型" class="headerlink" title="5. 基本包装类型"></a>5. 基本包装类型</h2><p>为了方便操作基本数据类型，<code>JavaScript</code> 还提供了三个特殊的引用类型：<code>String</code>,<code>Number</code>,<code>Boolean</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// s1是基本类型，基本类型是没有方法来操作的</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="string">&#x27;zhangsan&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> s2 = s1.substring(<span class="number">5</span>);</span><br><span class="line">​</span><br><span class="line"><span class="comment">// 当调用 s1.substring(5) 的时候，先把 s1 包装成 String 类型的临时对象，再调用 substring 方法，最后销毁临时对象, 相当于：</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&#x27;zhangsan&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> s2 = s1.substring(<span class="number">5</span>);</span><br><span class="line">s1 = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建基本包装类型的对象</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">18</span>; <span class="comment">//数值，基本类型</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="built_in">Number</span>(<span class="string">&quot;18&quot;</span>); <span class="comment">//类型转换</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">18</span>); <span class="comment">//基本包装类型，对象</span></span><br><span class="line"><span class="comment">// Number 和 Boolean 基本包装类型基本不用，使用的话可能会引起歧义。例如：</span></span><br><span class="line"><span class="keyword">var</span> b1 = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">var</span> b2 = b1 &amp;&amp; <span class="literal">true</span>; <span class="comment">// 结果是 true, 因为 object &amp;&amp; true = true</span></span><br></pre></td></tr></table></figure>

<h2 id="6-String-对象"><a href="#6-String-对象" class="headerlink" title="6. String 对象"></a>6. String 对象</h2><h3 id="1-字符串的不可变"><a href="#1-字符串的不可变" class="headerlink" title="(1) 字符串的不可变"></a>(1) 字符串的不可变</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="comment">// 当重新给 str 赋值的时候，常量 &#x27;abc&#x27;不会被修改，依然在内存中</span></span><br><span class="line"><span class="comment">// 重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变</span></span><br><span class="line"><span class="comment">// 由于字符串的不可变，在大量拼接字符串的时候会有效率问题</span></span><br></pre></td></tr></table></figure>

<h3 id="2-创建字符串对象"><a href="#2-创建字符串对象" class="headerlink" title="(2) 创建字符串对象"></a>(2) 创建字符串对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line"><span class="comment">// 获取字符串中字符的个数</span></span><br><span class="line"><span class="built_in">console</span>.log(str.length);</span><br></pre></td></tr></table></figure>

<h3 id="3-字符串对象的常用方法"><a href="#3-字符串对象的常用方法" class="headerlink" title="(3) 字符串对象的常用方法"></a>(3) 字符串对象的常用方法</h3><p>字符串所有的方法，都不会修改字符串本身(字符串是不可变的)，操作完成会返回一个新的字符串</p>
<h4 id="1-字符方法"><a href="#1-字符方法" class="headerlink" title="1. 字符方法"></a>1. 字符方法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">charAt(); <span class="comment">//获取指定位置处字符</span></span><br><span class="line">charCodeAt(); <span class="comment">//获取指定位置处字符的 ASCII 码</span></span><br><span class="line">str[<span class="number">0</span>]; <span class="comment">//HTML5，IE8+支持 和 charAt()等效</span></span><br></pre></td></tr></table></figure>

<h4 id="2-字符串操作方法"><a href="#2-字符串操作方法" class="headerlink" title="2. 字符串操作方法"></a>2. 字符串操作方法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">concat()   <span class="comment">//拼接字符串，等效于+，+更常用</span></span><br><span class="line">slice(start,end)   <span class="comment">//从 start 位置开始，截取到 end 位置，end 取不到</span></span><br><span class="line">substring(start,end) <span class="comment">//从 start 位置开始，截取到 end 位置，end 取不到</span></span><br><span class="line">substr(start,length)   <span class="comment">//// 从 start 位置开始，截取 length 个字符</span></span><br><span class="line">indexOf()   <span class="comment">//返回指定内容在元字符串中的位置,,如果没有，返回-1；(从前往后，检索到第一个就结束)</span></span><br><span class="line">lastIndexOf() <span class="comment">//返回指定内容在元字符串中的位置,,如果没有，返回-1；(从后往前，检索到第一个就结束)</span></span><br><span class="line">trim() <span class="comment">//只能去除字符串前后的空白</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 大小写转换方法</span></span><br><span class="line">toUpperCase() <span class="comment">//转换大写</span></span><br><span class="line">toLowerCase() <span class="comment">//转换小写</span></span><br><span class="line">search()<span class="comment">//方法用于检索字符串中指定的子字符串，返回子字符串的起始位置</span></span><br><span class="line">replace(old,<span class="keyword">new</span>) <span class="comment">//替换字符串替换字符串 new 替换 old</span></span><br><span class="line">split() <span class="comment">//分割字符串 返回的是一个数组。。数组的元素就是以参数的分割的</span></span><br></pre></td></tr></table></figure>

<p><strong>演示</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;uy weiu ryqi w-u-q-wey82374192739    &quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">0</span>)); <span class="comment">// //获取指定位置处字符</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.charCodeAt(<span class="number">0</span>)); <span class="comment">//获取指定位置处字符的ASCII码</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str[<span class="number">0</span>]); <span class="comment">//HTML5，IE8+支持 和charAt()等效</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&quot;&quot;</span>;</span><br><span class="line">str2 = str.concat(str); <span class="comment">//拼接字符串，等效于+，+更常用</span></span><br><span class="line"><span class="built_in">console</span>.log(str2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">0</span>, <span class="number">1</span>)); <span class="comment">//从start位置开始，截取到end位置，end取不到</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">2</span>, <span class="number">4</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">2</span>, <span class="number">4</span>)); <span class="comment">//从start位置开始，截取到end位置，end取不到</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">2</span>, <span class="number">4</span>)); <span class="comment">// 从start位置开始，截取 length 个字符</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">&quot;u&quot;</span>)); <span class="comment">//返回指定内容在元字符串中的位置,,如果没有，返回-1；(从前往后，检索到第一个就结束)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(<span class="string">&quot;u&quot;</span>)); <span class="comment">//返回指定内容在元字符串中的位置,,如果没有，返回-1；(从后往前，检索到第一个就结束)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.trim()); <span class="comment">//只能去除字符串前后的空白</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 大小写转换方法</span></span><br><span class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">0</span>).toUpperCase()); <span class="comment">//转换大写</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">0</span>).toLowerCase()); <span class="comment">//转换小写</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.search(<span class="string">&quot;u&quot;</span>)); <span class="comment">//方法用于检索字符串中指定的子字符串，返回子字符串的起始位置</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="string">&quot;u&quot;</span>, <span class="string">&quot;new&quot;</span>)); <span class="comment">//替换字符串替换字符串 new替换old</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.split()); <span class="comment">//分割字符串 返回的是一个数组。。数组的元素就是以参数的分割的</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.split(<span class="string">&quot;&quot;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(str.split(<span class="string">&quot; &quot;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(str.split(<span class="string">&quot;-&quot;</span>));</span><br></pre></td></tr></table></figure>

<p><strong>作业</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//   -------------------------</span></span><br><span class="line"><span class="comment">// Wechat收购 Baidu，电话号码相同的人当作是同一个人，合并后salary相加，其他属性保留Wechat的数据，新的Baidu的员工重新生成id,salary涨幅20%</span></span><br><span class="line"><span class="comment">// 统计收购后的员工平均工资，最高工资，最低工资，male的平均工资，female的平均工资</span></span><br><span class="line"><span class="comment">// 找出收购后工资高于8000的员工姓名和电话号码，按薪水从高到低排序</span></span><br><span class="line"><span class="comment">// 找出收购前后工资涨幅最高的员工姓名和电话号码，以及涨幅的百分比</span></span><br><span class="line"><span class="comment">// 找出收购后重名最多的三个姓名，统一出他们的平均年龄</span></span><br><span class="line"><span class="keyword">var</span> BaiduUsers = [],</span><br><span class="line">  WechatUsers = [];</span><br><span class="line"><span class="keyword">var</span> User = <span class="function"><span class="keyword">function</span> (<span class="params">id, name, phone, gender, age, salary</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.id = id;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.phone = phone;</span><br><span class="line">  <span class="built_in">this</span>.gender = gender;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.salary = salary;</span><br><span class="line">&#125;;</span><br><span class="line">User.create = <span class="function"><span class="keyword">function</span> (<span class="params">id, name, phone, gender, age, salary</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> User(id, name, phone, gender, age, salary);</span><br><span class="line">&#125;;</span><br><span class="line">BaiduUsers.push(User.create(<span class="number">1</span>, <span class="string">&quot;tommy&quot;</span>, <span class="string">&quot;1111&quot;</span>, <span class="string">&quot;male&quot;</span>, <span class="number">18</span>, <span class="number">10000</span>));</span><br><span class="line">BaiduUsers.push(User.create(<span class="number">2</span>, <span class="string">&quot;jerry&quot;</span>, <span class="string">&quot;2222&quot;</span>, <span class="string">&quot;male&quot;</span>, <span class="number">28</span>, <span class="number">10000</span>));</span><br><span class="line">BaiduUsers.push(User.create(<span class="number">3</span>, <span class="string">&quot;raobin&quot;</span>, <span class="string">&quot;3333&quot;</span>, <span class="string">&quot;female&quot;</span>, <span class="number">14</span>, <span class="number">1200</span>));</span><br><span class="line">BaiduUsers.push(User.create(<span class="number">4</span>, <span class="string">&quot;binbin&quot;</span>, <span class="string">&quot;4444&quot;</span>, <span class="string">&quot;male&quot;</span>, <span class="number">23</span>, <span class="number">9800</span>));</span><br><span class="line">BaiduUsers.push(User.create(<span class="number">5</span>, <span class="string">&quot;arthur&quot;</span>, <span class="string">&quot;5555&quot;</span>, <span class="string">&quot;female&quot;</span>, <span class="number">22</span>, <span class="number">10000</span>));</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">WechatUsers.push(User.create(<span class="number">1</span>, <span class="string">&quot;tommy&quot;</span>, <span class="string">&quot;1111&quot;</span>, <span class="string">&quot;male&quot;</span>, <span class="number">20</span>, <span class="number">40000</span>));</span><br><span class="line">WechatUsers.push(User.create(<span class="number">2</span>, <span class="string">&quot;allen&quot;</span>, <span class="string">&quot;6666&quot;</span>, <span class="string">&quot;male&quot;</span>, <span class="number">34</span>, <span class="number">15800</span>));</span><br><span class="line">WechatUsers.push(User.create(<span class="number">3</span>, <span class="string">&quot;raobin&quot;</span>, <span class="string">&quot;3333&quot;</span>, <span class="string">&quot;female&quot;</span>, <span class="number">16</span>, <span class="number">2300</span>));</span><br><span class="line">WechatUsers.push(User.create(<span class="number">4</span>, <span class="string">&quot;harvey&quot;</span>, <span class="string">&quot;7777&quot;</span>, <span class="string">&quot;male&quot;</span>, <span class="number">30</span>, <span class="number">29800</span>));</span><br><span class="line">WechatUsers.push(User.create(<span class="number">5</span>, <span class="string">&quot;yuyu&quot;</span>, <span class="string">&quot;8888&quot;</span>, <span class="string">&quot;female&quot;</span>, <span class="number">27</span>, <span class="number">7000</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 电话号码相同的人当作是同一个人，合并后salary相加，其他属性保留Wechat的数据</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> b = <span class="number">0</span>; b &lt; BaiduUsers.length; b++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> w = <span class="number">0</span>; w &lt; WechatUsers.length; w++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (BaiduUsers[b].phone == WechatUsers[w].phone) &#123;</span><br><span class="line">      WechatUsers[w].oldsalary = WechatUsers[w].salary;</span><br><span class="line">      WechatUsers[w].salary = WechatUsers[w].oldsalary + BaiduUsers[b].salary;</span><br><span class="line">      BaiduUsers.splice(b, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新的Baidu的员工重新生成id,salary涨幅20%</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; BaiduUsers.length; i++) &#123;</span><br><span class="line">  BaiduUsers[i].oldsalary = BaiduUsers[i].salary;</span><br><span class="line">  BaiduUsers[i].salary = BaiduUsers[i].salary * <span class="number">1.2</span>;</span><br><span class="line">  BaiduUsers[i].id = WechatUsers.length + <span class="number">1</span> + i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有 weChat 员工</span></span><br><span class="line">newWechatUsers = WechatUsers.concat(BaiduUsers);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 统计收购后的员工平均工资，最高工资，最低工资，male的平均工资，female的平均工资</span></span><br><span class="line"><span class="keyword">var</span> sumSalary = <span class="number">0</span>, <span class="comment">// 所有员工薪资和</span></span><br><span class="line">  usersSalary = [], <span class="comment">// 所有员工薪资</span></span><br><span class="line">  averageSalary = <span class="number">0</span>, <span class="comment">// 平均薪资</span></span><br><span class="line">  max = <span class="number">0</span>, <span class="comment">// 最高薪资</span></span><br><span class="line">  min = <span class="number">0</span>, <span class="comment">// 最低薪资</span></span><br><span class="line">  maleSalary = [], <span class="comment">// 男员工薪资集合</span></span><br><span class="line">  femaleSalary = [], <span class="comment">// 女员工薪资集合</span></span><br><span class="line">  sumMaleSalary = <span class="number">0</span>,</span><br><span class="line">  sumFemaleSalary = <span class="number">0</span>;</span><br><span class="line">newWechatUsers.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">user, userIndex</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 把所有员工薪资放到一个新数组里</span></span><br><span class="line">  usersSalary.push(newWechatUsers[userIndex].salary);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 把所有男员工薪资放到一个新数组里</span></span><br><span class="line">  <span class="keyword">if</span> (user.gender == <span class="string">&quot;male&quot;</span>) &#123;</span><br><span class="line">    maleSalary.push(newWechatUsers[userIndex].salary);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 把所有女员工薪资放到一个新数组里</span></span><br><span class="line">  <span class="keyword">if</span> (user.gender == <span class="string">&quot;female&quot;</span>) &#123;</span><br><span class="line">    femaleSalary.push(newWechatUsers[userIndex].salary);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有员工的薪资</span></span><br><span class="line">usersSalary.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">userSalary</span>) </span>&#123;</span><br><span class="line">  sumSalary += userSalary;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 平均薪资</span></span><br><span class="line">averageSalary = sumSalary / newWechatUsers.length;</span><br><span class="line"><span class="built_in">console</span>.log(averageSalary);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最高工资，最低工资</span></span><br><span class="line">max = usersSalary[<span class="number">0</span>];</span><br><span class="line">min = usersSalary[<span class="number">0</span>];</span><br><span class="line">usersSalary.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (max &lt; value) &#123;</span><br><span class="line">    max = value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (min &gt; value) &#123;</span><br><span class="line">    min = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(max, min);</span><br><span class="line"></span><br><span class="line"><span class="comment">// male的平均工资</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; maleSalary.length; i++) &#123;</span><br><span class="line">  sumMaleSalary += maleSalary[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sumMaleSalary / maleSalary.length);</span><br><span class="line"></span><br><span class="line"><span class="comment">// female的平均工资</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; femaleSalary.length; i++) &#123;</span><br><span class="line">  sumFemaleSalary += femaleSalary[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sumFemaleSalary / femaleSalary.length);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找出收购后工资高于8000的员工姓名和电话号码，按薪水从高到低排序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先把整体重新排序</span></span><br><span class="line">newWechatUsers.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> b[<span class="string">&quot;salary&quot;</span>] - a[<span class="string">&quot;salary&quot;</span>];</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> more8000 = [];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">UserList</span>(<span class="params">name, phone</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.phone = phone;</span><br><span class="line">  <span class="keyword">return</span> &#123; name, phone &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; newWechatUsers.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (newWechatUsers[i].salary &gt; <span class="number">8000</span>) &#123;</span><br><span class="line">    more8000.push(UserList(newWechatUsers[i].name, newWechatUsers[i].phone));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找出收购前后工资涨幅最高的员工姓名和电话号码，以及涨幅的百分比</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; newWechatUsers.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (newWechatUsers[i].oldsalary != <span class="literal">undefined</span>) &#123;</span><br><span class="line">    newWechatUsers[i].riseSalary =</span><br><span class="line">      newWechatUsers[i].salary - newWechatUsers[i].oldsalary;</span><br><span class="line">    newWechatUsers[i].percentRise =</span><br><span class="line">      (newWechatUsers[i].riseSalary / newWechatUsers[i].oldsalary) * <span class="number">100</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 因为有的员工薪资没有合并，也没有涨薪，所以 oldsalary 会是 undefined</span></span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    newWechatUsers.splice(i, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">newWechatUsers.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> b[<span class="string">&quot;percentRise&quot;</span>] - a[<span class="string">&quot;percentRise&quot;</span>];</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  newWechatUsers[<span class="number">0</span>].name,</span><br><span class="line">  newWechatUsers[<span class="number">0</span>].phone,</span><br><span class="line">  <span class="string">&quot;涨幅百分比 :&quot;</span> + newWechatUsers[<span class="number">0</span>].percentRise + <span class="string">&quot;%&quot;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;-------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;abaasdffggghhjjkkgfddsssss3444343&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、 字符串的长度</span></span><br><span class="line"><span class="built_in">console</span>.log(str.length);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、 取出指定位置的字符，如：0,3,5,9等</span></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">4</span>, <span class="number">5</span>));</span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">8</span>, <span class="number">9</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、 查找指定字符是否在以上字符串中存在，如：i，c ，b等</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">searchStr</span>(<span class="params">string, element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (string.search(element) == -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;没找到&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;存在&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">searchStr(str, <span class="string">&quot;i&quot;</span>);</span><br><span class="line">searchStr(str, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">searchStr(str, <span class="string">&quot;b&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、 替换指定的字符，如：g替换为22,ss替换为b等操作方法</span></span><br><span class="line"><span class="keyword">var</span> str2 = str;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  str2 = str2.replace(<span class="string">&quot;g&quot;</span>, <span class="number">22</span>);</span><br><span class="line">&#125; <span class="keyword">while</span> (str2.search(<span class="string">&quot;g&quot;</span>) != -<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str3 = str;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  str3 = str3.replace(<span class="string">&quot;ss&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">while</span> (str3.search(<span class="string">&quot;ss&quot;</span>) != -<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5、 截取指定开始位置到结束位置的字符串，如：取得1-5的字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">0</span>, <span class="number">5</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6、 找出以上字符串中出现次数最多的字符和出现的次数</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;,</span><br><span class="line">  count = <span class="number">0</span>,</span><br><span class="line">  s = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.split(<span class="string">&quot;&quot;</span>).length; i++) &#123;</span><br><span class="line">  <span class="comment">// 如果不存在,记录一次</span></span><br><span class="line">  <span class="keyword">if</span> (!obj[str.charAt(i)]) &#123;</span><br><span class="line">    obj[str.charAt(i)] = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果存在，则 +1</span></span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    obj[str.charAt(i)]++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj[key] &gt; count) &#123;</span><br><span class="line">    count = obj[key];</span><br><span class="line">    s = key;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;出现次数最多的字符 : &quot;</span> + s + <span class="string">&quot; ; &quot;</span> + <span class="string">&quot;次数 : &quot;</span> + count);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7、 遍历字符串，并将遍历出的字符两头添加符号“@”输出至当前的文档页面</span></span><br><span class="line">str.split(<span class="string">&quot;&quot;</span>).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value, index</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">&quot;@&quot;</span> + value + <span class="string">&quot;@&quot;</span>);</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">&quot;&lt;br /&gt;&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>javascript</tag>
        <tag>基础总结</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安装node环境以及cnpm</title>
    <url>/2020/02/28/linux/linux-node/</url>
    <content><![CDATA[<h3 id="其实我老早以前就发现-node-版本太高也不行"><a href="#其实我老早以前就发现-node-版本太高也不行" class="headerlink" title="其实我老早以前就发现 node 版本太高也不行"></a>其实我老早以前就发现 node 版本太高也不行</h3><h4 id="以往的版本下载地址-https-nodejs-org-zh-cn-download-releases"><a href="#以往的版本下载地址-https-nodejs-org-zh-cn-download-releases" class="headerlink" title="以往的版本下载地址: https://nodejs.org/zh-cn/download/releases/"></a>以往的版本下载地址: <a href="https://nodejs.org/zh-cn/download/releases/">https://nodejs.org/zh-cn/download/releases/</a></h4><h1 id="下载并解压到-usr-local-下"><a href="#下载并解压到-usr-local-下" class="headerlink" title="下载并解压到 /usr/local/ 下"></a>下载并解压到 <code>/usr/local/</code> 下</h1><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/node/node.png" alt="node"></p>
<h1 id="设置全局"><a href="#设置全局" class="headerlink" title="设置全局"></a>设置全局</h1><h3 id="直接链接过-记得版本对应改一下"><a href="#直接链接过-记得版本对应改一下" class="headerlink" title="直接链接过,记得版本对应改一下"></a>直接链接过,记得版本对应改一下</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># node</span></span><br><span class="line"></span><br><span class="line">sudo ln -s /usr/<span class="built_in">local</span>/node-v12.12.0-linux-x64/bin/node /usr/<span class="built_in">local</span>/bin/node</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="comment"># npm</span></span><br><span class="line"></span><br><span class="line">sudo ln -s /usr/<span class="built_in">local</span>/node-v12.12.0-linux-x64/bin/npm /usr/<span class="built_in">local</span>/bin/npm</span><br></pre></td></tr></table></figure>

<h3 id="安装-taobao-的-cnpm-更快"><a href="#安装-taobao-的-cnpm-更快" class="headerlink" title="安装 taobao 的 cnpm (更快)"></a>安装 taobao 的 cnpm (更快)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h3 id="添加到全局"><a href="#添加到全局" class="headerlink" title="添加到全局"></a>添加到全局</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ln -s /usr/<span class="built_in">local</span>/node-v12.12.0-linux-x64/bin/cnpm /usr/<span class="built_in">local</span>/bin/cnpm</span><br></pre></td></tr></table></figure>

<h3 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h3><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/node/version.png" alt="version"></p>
<h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>cnpm</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>ArchLinux 双显卡方案</title>
    <url>/2021/04/28/linux/linux-nvidia/</url>
    <content><![CDATA[<p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/nvidia/fuck-nvidia.jpeg" alt="Fuck NVIDIA"></p>
<h1 id="So-NVIDIA-Fuck-You"><a href="#So-NVIDIA-Fuck-You" class="headerlink" title="So NVIDIA ~ Fuck You !"></a>So NVIDIA ~ Fuck You !</h1><p>之前因为装 <code>NVIDIA</code> 驱动 , <code>sddm</code> 进不去了 , 之后几经周折 , 我已把它拿下 , 即使他挂了 , 我也能让他起死回生 (开玩笑,开玩笑 ~ ~ ~ )</p>
<h1 id="1-如果你不打算折腾-只想用-intel-核显"><a href="#1-如果你不打算折腾-只想用-intel-核显" class="headerlink" title="1.如果你不打算折腾,只想用 intel 核显"></a>1.如果你不打算折腾,只想用 <code>intel</code> 核显</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S xf86-video-intel</span><br></pre></td></tr></table></figure>

<h1 id="2-intel-nvidia-双显卡切换"><a href="#2-intel-nvidia-双显卡切换" class="headerlink" title="2.intel + nvidia 双显卡切换"></a>2.<code>intel</code> + <code>nvidia</code> 双显卡切换</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S nvidia bbswitch</span><br><span class="line">sudo pacman -S optimus-manager-qt-kde  (这个应该在 archlinuxcn 源里,我直接 `yay -S optimus-manager-qt`)</span><br></pre></td></tr></table></figure>

<h5 id="如果安装-optimus-manager-qt-最后提示编译失败-重新安装-base-devel-就行-好像是在那里面-也没准是之前我少装了什么包-最后重启"><a href="#如果安装-optimus-manager-qt-最后提示编译失败-重新安装-base-devel-就行-好像是在那里面-也没准是之前我少装了什么包-最后重启" class="headerlink" title="如果安装 optimus-manager-qt 最后提示编译失败,重新安装 base-devel 就行,好像是在那里面,也没准是之前我少装了什么包,最后重启"></a>如果安装 <code>optimus-manager-qt</code> 最后提示编译失败,重新安装 <code>base-devel</code> 就行,好像是在那里面,也没准是之前我少装了什么包,最后重启</h5><h3 id="重启后打开optimus-manager-qt"><a href="#重启后打开optimus-manager-qt" class="headerlink" title="重启后打开optimus-manager-qt"></a>重启后打开<code>optimus-manager-qt</code></h3><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/nvidia/optimus-manager-qt.png" alt="optimus-manager-qt"></p>
<h3 id="右击可以切换模式"><a href="#右击可以切换模式" class="headerlink" title="右击可以切换模式"></a>右击可以切换模式</h3><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/nvidia/optimus-manager-qt-icon.png" alt="optimus-manager-at-icon"></p>
<h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
      <categories>
        <category>linux</category>
        <category>arch</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>arch</tag>
        <tag>nvidia</tag>
        <tag>bbswitch</tag>
        <tag>optimus-manager</tag>
      </tags>
  </entry>
  <entry>
    <title>更换 grub 主题</title>
    <url>/2020/06/02/linux/linux-setGrubTheme/</url>
    <content><![CDATA[<h4 id="默认的-grub-界面比较简陋"><a href="#默认的-grub-界面比较简陋" class="headerlink" title="默认的 grub 界面比较简陋"></a>默认的 grub 界面比较简陋</h4><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/setGrubTheme/grub.jpeg" alt="grubThemes"></p>
<p>然后突然有想法了,想换个主题</p>
<h1 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h1><h2 id="1-下载-grub-主题包"><a href="#1-下载-grub-主题包" class="headerlink" title="1.下载 grub 主题包"></a>1.下载 grub 主题包</h2><blockquote>
<h3 id="去这个地址下载主题-应该是这个地址-：-https-www-gnome-look-org-browse-cat-109-order-latest"><a href="#去这个地址下载主题-应该是这个地址-：-https-www-gnome-look-org-browse-cat-109-order-latest" class="headerlink" title="去这个地址下载主题(应该是这个地址)： https://www.gnome-look.org/browse/cat/109/order/latest/"></a>去这个地址下载主题(应该是这个地址)： <a href="https://www.gnome-look.org/browse/cat/109/order/latest/">https://www.gnome-look.org/browse/cat/109/order/latest/</a></h3></blockquote>
<p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/setGrubTheme/grubThemes.png" alt="grubThemes"></p>
<p>比如这个主题<br><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/setGrubTheme/preview.gif" alt="grub"></p>
<h3 id="点击-Files"><a href="#点击-Files" class="headerlink" title="点击 Files"></a>点击 <code>Files</code></h3><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/setGrubTheme/files.png" alt="files"></p>
<h2 id="2-配置-grub"><a href="#2-配置-grub" class="headerlink" title="2.配置 grub"></a>2.配置 grub</h2><h3 id="自动安装"><a href="#自动安装" class="headerlink" title="自动安装"></a>自动安装</h3><p>每个主题包里应该都有 <code>README.md</code> 文件,当然你完全可以按照他说明的做</p>
<p>把整个解压的文件夹放到：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/boot/grub/themes/</span><br></pre></td></tr></table></figure>

<h4 id="好像大部分的主题包里都有一个-install-sh-文件-直接运行它也行-推荐"><a href="#好像大部分的主题包里都有一个-install-sh-文件-直接运行它也行-推荐" class="headerlink" title="好像大部分的主题包里都有一个 install.sh 文件 ,直接运行它也行 推荐"></a>好像大部分的主题包里都有一个 <code>install.sh</code> 文件 ,直接运行它也行 <span id="green-block">推荐</span></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">给它可执行权限</span><br><span class="line">sudo chmod +x install.sh</span><br><span class="line">---</span><br><span class="line">运行</span><br><span class="line">sudo ./install.sh</span><br></pre></td></tr></table></figure>

<h3 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h3><h4 id="如果是-Debian-系的，直接安装-grub-customizer："><a href="#如果是-Debian-系的，直接安装-grub-customizer：" class="headerlink" title="如果是 Debian 系的，直接安装 grub-customizer："></a>如果是 Debian 系的，直接安装 grub-customizer：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install grub-customizer</span><br></pre></td></tr></table></figure>

<h4 id="或者编辑这个文件-推荐-："><a href="#或者编辑这个文件-推荐-：" class="headerlink" title="或者编辑这个文件 推荐 ："></a>或者编辑这个文件 <span id="green-block">推荐</span> ：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/default/grub</span><br></pre></td></tr></table></figure>

<h4 id="添加下面一行："><a href="#添加下面一行：" class="headerlink" title="添加下面一行："></a>添加下面一行：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GRUB_THEME=<span class="string">&quot;/boot/grub/themes/主题包名/theme.txt&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-更新-grub"><a href="#3-更新-grub" class="headerlink" title="3.更新 grub"></a>3.更新 grub</h3><h4 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo update-grub</span><br></pre></td></tr></table></figure>

<h4 id="或者"><a href="#或者" class="headerlink" title="或者"></a>或者</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure>

<p>主题包里面的背景图片和图标可自定义</p>
<p>完事~</p>
<h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>grub</tag>
      </tags>
  </entry>
  <entry>
    <title>Nodejs EventEmitter</title>
    <url>/2021/09/08/node/node-EventEmitter/</url>
    <content><![CDATA[<div class="note info flat"><p><strong>Node.js EventEmitter</strong><br><code>Node.js</code> 所有的异步 <code>I/O</code> 操作在完成时都会发送一个事件到事件队列<br><code>Node.js</code> 里面的许多对象都会分发事件 : 一个 <code>net.Server</code> 对象会在每次有新连接时触发一个事件 , 一个 <code>fs.readStream</code> 对象会在文件被打开的时候触发一个事件 , 所有这些产生事件的对象都是 <code>events.EventEmitter</code> 的实例</p>
</div>

<h1 id="EventEmitter-类"><a href="#EventEmitter-类" class="headerlink" title="EventEmitter 类"></a>EventEmitter 类</h1><p><code>events</code> 模块只提供了一个对象： <code>events.EventEmitter</code> , <code>EventEmitter</code> 的核心就是事件触发与事件监听器功能的封装</p>
<p>可以通过 <code>require(&quot;events&quot;)</code> 来访问该模块</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 events 模块</span></span><br><span class="line"><span class="keyword">let</span> events = <span class="built_in">require</span>(<span class="string">&quot;events&quot;</span>);</span><br><span class="line"><span class="comment">// 创建 eventEmitter 对象</span></span><br><span class="line"><span class="keyword">let</span> eventEmitter = <span class="keyword">new</span> events.EventEmitter();</span><br></pre></td></tr></table></figure>

<h1 id="EventEmitter-的事件监听和触发"><a href="#EventEmitter-的事件监听和触发" class="headerlink" title="EventEmitter 的事件监听和触发"></a>EventEmitter 的事件监听和触发</h1><p><code>EventEmitter</code> 的每个事件由一个<code>事件名</code>和<code>若干个参数</code>组成 , 事件名是一个自定义的字符串 , 通常表达一定的语义 , 对于每个事件 , <code>EventEmitter</code> 支持若干个事件监听器<br>当事件触发时 , 注册到这个事件的事件监听器被依次调用 , 事件参数作为回调函数参数传递</p>
<p>让我们以下面的例子解释这个过程 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 events 模块</span></span><br><span class="line"><span class="keyword">let</span> events = <span class="built_in">require</span>(<span class="string">&quot;events&quot;</span>);</span><br><span class="line"><span class="comment">// 创建 eventEmitter 对象</span></span><br><span class="line"><span class="keyword">let</span> eventEmitter = <span class="keyword">new</span> events.EventEmitter();</span><br><span class="line">eventEmitter.on(<span class="string">&quot;someEvent&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;listener1&quot;</span>, arg1, arg2);</span><br><span class="line">&#125;);</span><br><span class="line">eventEmitter.on(<span class="string">&quot;someEvent&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;listener2&quot;</span>, arg1, arg2);</span><br><span class="line">&#125;);</span><br><span class="line">eventEmitter.emit(<span class="string">&quot;someEvent&quot;</span>, <span class="string">&quot;参数 1&quot;</span>, <span class="string">&quot;参数 2&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>执行结果 :</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">listener1 参数 1 参数 2</span><br><span class="line">listener2 参数 1 参数 2</span><br></pre></td></tr></table></figure>

<p>以上例子中 , <code>eventEmitter</code> 为事件 <code>someEvent</code> 注册了两个事件监听器 , 然后触发了 <code>someEvent</code> 事件<br>运行结果中可以看到两个事件监听器回调函数被先后调用 , 这就是 <code>EventEmitter</code> 最简单的用法<br><strong><code>EventEmitter</code> 提供了多个属性 , 如 <code>on</code> 和 <code>emit</code> , <code>on</code> 函数用于绑定事件函数 , <code>emit</code> 属性用于触发一个事件</strong></p>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>EventEmitter</tag>
      </tags>
  </entry>
  <entry>
    <title>Node</title>
    <url>/2021/07/12/node/node-fs-http/</url>
    <content><![CDATA[<h1 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h1><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/node/nodeall.png" alt="node"></p>
<h1 id="Node-js-介绍"><a href="#Node-js-介绍" class="headerlink" title="Node.js 介绍"></a>Node.js 介绍</h1><p><code>Node.js</code> 不是一门语言 , 不是库或者框架 , <code>Node.js</code> 是一个 <code>JavaScript</code> 运行时的环境 , <code>Node.js</code> 可以解析和执行 <code>JavaScript</code> 代码</p>
<h2 id="浏览器中-JavaScript-由什么组成"><a href="#浏览器中-JavaScript-由什么组成" class="headerlink" title="浏览器中 JavaScript 由什么组成"></a>浏览器中 JavaScript 由什么组成</h2><ul>
<li><code>EcmaScript</code> : 基本语法 , <code>if</code> , <code>var</code> , <code>function</code> , <code>Object</code> , <code>Array</code></li>
<li><code>DOM</code></li>
<li><code>BOM</code></li>
</ul>
<h2 id="Node-js-中的-JavaScript"><a href="#Node-js-中的-JavaScript" class="headerlink" title="Node.js 中的 JavaScript"></a>Node.js 中的 JavaScript</h2><ul>
<li><strong>没有 <code>BOM</code> 和 <code>DOM</code> , 只有 <code>EcmaScript</code></strong></li>
<li>在 <code>Node.js</code> 这个 <code>JavaScript</code> 执行环境中为 <code>JavaScript</code> 提供了一些服务器级别的操作 <code>API</code> , 例如 : 文件读写 , 网络服务构建 , 网络请求与响应等 , 其实 <code>node</code> 学习相当于在学习后台服务处理开发 , 只不过后台服务编程使用的是 <code>JavaScript</code> 语言而已</li>
<li><strong>特性 : 事件驱动 , 非阻塞 <code>I/O</code> 模型 ( 简单说就是异步操作 ) , 轻量高效 , 随着学习的深入大家会明白这些特性的</strong></li>
<li><code>npm</code> 是世界上最大的 <code>Node.js</code> 开源库生态系统 , 用来管理 <code>JavaScript</code> 相关的包 , 这样的目的是为了更方便的让开发人员使用它</li>
</ul>
<h3 id="使用-npm-安装相关包的命令-以-jquery-为例-先了解即可"><a href="#使用-npm-安装相关包的命令-以-jquery-为例-先了解即可" class="headerlink" title="使用 npm 安装相关包的命令 ( 以 jquery 为例 , 先了解即可 ) :"></a>使用 <code>npm</code> 安装相关包的命令 ( 以 <code>jquery</code> 为例 , 先了解即可 ) :</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install jquery</span><br></pre></td></tr></table></figure>

<p><strong>包名后面加 <code>@</code> 可指定版本号</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install jquery@2</span><br></pre></td></tr></table></figure>

<h2 id="Node-js-能够做什么"><a href="#Node-js-能够做什么" class="headerlink" title="Node.js 能够做什么"></a>Node.js 能够做什么</h2><ul>
<li><code>Web</code> 服务器后台</li>
<li>命令行工具 , 例如 : <code>npm</code> , <code>git</code> , <code>webpack</code> 等</li>
<li>前端工程师接触 <code>node</code> 最多的是命令行工具 , 一般很少自己写 , 主要使用别人写好的第三方包</li>
</ul>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul>
<li><code>B/S</code> 编程模型<ul>
<li><code>Browser - Server</code></li>
<li><code>back-end</code> ( 后台开发 )</li>
<li>任何服务端技术这种 <code>BS</code> 编程模型都一样 , 与语言无关</li>
<li><code>Node</code> 只是我们学习 <code>BS</code> 编程模型的一个工具而已</li>
</ul>
</li>
<li>模块化编程<br><strong>模块化</strong>就是将不同功能的函数封装起来 , 并提供使用接口 , 他们彼此之间互不影响<ul>
<li><code>RequireJS</code></li>
<li><code>SeaJs</code></li>
<li>简单的来说 , 以前在我们 <code>JavaScript</code> 中只能通过<code>&lt;script&gt;</code>标签来引入 <code>js</code> 脚本文件 , 在 <code>node</code> 中可以更多方式来引入加载 <code>JavaScript</code> 脚本</li>
</ul>
</li>
<li><code>Node</code> 常用 <code>API</code></li>
</ul>
<h1 id="Node-起步"><a href="#Node-起步" class="headerlink" title="Node 起步"></a>Node 起步</h1><h2 id="安装-Node-环境"><a href="#安装-Node-环境" class="headerlink" title="安装 Node 环境"></a>安装 Node 环境</h2><p>安装依赖 : <code>npm install 依赖名字</code> , <code>install</code> 可简写为 <code>i</code><br>后面加 <code>@</code> 可指定版本号 , 比如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i jquery@2.2</span><br></pre></td></tr></table></figure>

<p><strong>参数 :</strong></p>
<ul>
<li><code>-g</code> 表示全局安装</li>
<li><code>--save</code> 表示生产环境 , 简写是 <code>-S</code></li>
<li><code>-dev</code> 是开发环境 , 简写是 <code>-D</code></li>
</ul>
<p><strong>国内 npm 比较慢 , 可安装淘宝镜像版的 cnpm</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><ul>
<li>第一步 : 创建编写 <code>JavaScript</code> 脚本文件</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Hello World&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>第二步 : 打开终端 , 定位到脚本文件所属目录</li>
<li>第三步 : 输入 <code>node 文件名</code> 执行对应的文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node HelloWorld.js</span><br></pre></td></tr></table></figure>

<h2 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h2><p>浏览器中 <code>JavaScript</code> 是没有文件操作能力的 , 但是 <code>Node</code> 中的 <code>JavaScript</code> 具有文件操作的能力 , <code>Node</code> 中有一个 <code>fs</code> 模块 , <code>fs</code> 是 <code>file-system</code> 的简写 , 就是文件系统的意思 , 在 <code>Node</code> 中如果想要进行文件操作 , 就必须引入 <code>fs</code> 这个核心模块</p>
<ul>
<li>引入 <code>fs</code> 核心模块</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>用来读取文件的方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.readFile();</span><br></pre></td></tr></table></figure>

<ul>
<li>用来写文件的方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.writeFile();</span><br></pre></td></tr></table></figure>

<h2 id="http-服务"><a href="#http-服务" class="headerlink" title="http 服务"></a>http 服务</h2><p>服务器是干嘛的 ?</p>
<ul>
<li>提供服务：对数据的服务</li>
<li>发请求</li>
<li>接收请求</li>
<li>处理请求</li>
<li>给个响应</li>
</ul>
<p>我们可以使用 <code>Node</code> 非常轻松的构建一个 <code>Web</code> 服务器 , 在 <code>Node</code> 中 , <code>专门有个核心模块：http</code><br>思路 :</p>
<ul>
<li>加载 <code>http</code> 核心模块</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 加载 http 核心模块</span></span><br><span class="line"><span class="keyword">let</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>创建一个 <code>Web</code> 服务器</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.使用 http.createServer() 方法创建一个Web服务器 , 返回一个 Server 实例</span></span><br><span class="line"><span class="keyword">let</span> server = http.createServer();</span><br></pre></td></tr></table></figure>

<ul>
<li>注册 <code>request</code> 请求事件</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3. 注册 request 请求事件</span></span><br><span class="line"><span class="comment">// 还记得刚才说的 node.js 的特性 : 事件驱动么 , 就是这种用法</span></span><br><span class="line"><span class="comment">// 还记得刚才说的 node.js 的特性 : 回调函数么 , 就是第二个参数的用法</span></span><br><span class="line"></span><br><span class="line">server.on(<span class="string">&quot;request&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;收到客户端的请求了啊&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>绑定端口号 , 启动服务器</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4. 绑定端口号 , 启动服务器</span></span><br><span class="line">server.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(</span><br><span class="line">    <span class="string">&quot;服务器启动成功了 , 可以通过浏览器访问http:localhost:3000发请求了&quot;</span></span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>fs</tag>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>node 连接 MySQL</title>
    <url>/2021/07/16/node/node-mysql/</url>
    <content><![CDATA[<a class="btn-beautify button--animated green larger" href="https://github.com/codehhr/Message-board/" 
  title="留言版案例"><i class="far fa-hand-point-right"></i><span>留言版案例</span></a>
<h1 id="安装-mysql-驱动"><a href="#安装-mysql-驱动" class="headerlink" title="安装 mysql 驱动"></a>安装 mysql 驱动</h1><p>可以用淘宝镜像的 <code>cnpm</code> 安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install mysql --save</span><br></pre></td></tr></table></figure>

<h1 id="引入-mysql-模块"><a href="#引入-mysql-模块" class="headerlink" title="引入 mysql 模块"></a>引入 mysql 模块</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mysql = <span class="built_in">require</span>(<span class="string">&quot;mysql&quot;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="链接-MySQL"><a href="#链接-MySQL" class="headerlink" title="链接 MySQL"></a>链接 MySQL</h1><p>相应的修改<code>主机名</code> , <code>用户名</code> , <code>密码</code> 和 <code>数据库名</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mysql = <span class="built_in">require</span>(<span class="string">&quot;mysql&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> connection = mysql.createConnection(&#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">  <span class="attr">user</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&quot;12345678&quot;</span>,</span><br><span class="line">  <span class="attr">database</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line">connection.connect();</span><br><span class="line">connection.query(</span><br><span class="line">  <span class="string">&quot;SELECT * from comment_list&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">error, results, fields</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">    <span class="built_in">console</span>.log(results);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="把这几个步骤封装成函数"><a href="#把这几个步骤封装成函数" class="headerlink" title="把这几个步骤封装成函数"></a>把这几个步骤封装成函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    sql: 要执行的 sql 语句</span></span><br><span class="line"><span class="comment">    fun: 拿到数据库返回的 results 后执行的函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">interactingWithDatabase</span>(<span class="params">sql, fun</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> connection = mysql.createConnection(&#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">    <span class="attr">user</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&quot;12345678&quot;</span>,</span><br><span class="line">    <span class="attr">database</span>: <span class="string">&quot;comment_list&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  connection.connect();</span><br><span class="line">  connection.query(sql, <span class="function"><span class="keyword">function</span> (<span class="params">err, results</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fun(results);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  connection.end();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="简单的数据库操作-CURD"><a href="#简单的数据库操作-CURD" class="headerlink" title="简单的数据库操作 ( CURD )"></a>简单的数据库操作 ( CURD )</h1><h2 id="sql-语句"><a href="#sql-语句" class="headerlink" title="sql 语句"></a>sql 语句</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">增 : <span class="keyword">insert</span> <span class="keyword">into</span> 表名 ( 字段 , 字段 ) <span class="keyword">values</span> ( 值 , 值 )</span><br><span class="line">删 : <span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件</span><br><span class="line">改 : update 表名 <span class="keyword">set</span> 字段 <span class="operator">=</span> 值 <span class="keyword">where</span> 条件</span><br><span class="line">查 : <span class="keyword">select</span> 字段 <span class="keyword">from</span> 表名 (<span class="keyword">where</span> 条件)</span><br></pre></td></tr></table></figure>

<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">增 : <span class="keyword">INSERT</span> <span class="keyword">INTO</span> comment_list (name , comment) <span class="keyword">VALUES</span> (<span class="string">&#x27;name&#x27;</span> ,<span class="string">&#x27;comment&#x27;</span>)</span><br><span class="line">删 : <span class="keyword">DELETE</span> <span class="keyword">FROM</span> comment_list <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="string">&#x27;userid&#x27;</span></span><br><span class="line">改 : UPDATE comment_list <span class="keyword">SET</span> comment <span class="operator">=</span> &quot;newcomment&quot; <span class="keyword">WHERE</span> id <span class="operator">=</span> &quot;userid&quot;</span><br><span class="line">查 : <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> comment_list <span class="keyword">WHERE</span> comment <span class="keyword">LIKE</span> <span class="string">&#x27;%value%&#x27;</span> <span class="keyword">or</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;%value%&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 中的动画</title>
    <url>/2021/07/22/vue/vue-animate/</url>
    <content><![CDATA[<h1 id="推荐使用第三方-css-动画库"><a href="#推荐使用第三方-css-动画库" class="headerlink" title="推荐使用第三方 css 动画库"></a>推荐使用第三方 css 动画库</h1><div class="tabs" id="animate"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#animate-1">使用过渡类名</button></li><li class="tab"><button type="button" data-href="#animate-2">第三方css动画库</button></li><li class="tab"><button type="button" data-href="#animate-3">使用动画钩子函数</button></li><li class="tab"><button type="button" data-href="#animate-4">v-for的列表过渡</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="animate-1"><h2 id="使用过渡类名"><a href="#使用过渡类名" class="headerlink" title="使用过渡类名"></a>使用过渡类名</h2><p><a class="btn-beautify button--animated green larger" href="https://codehhr.github.io/vue-daily/vue-transition-class.html" 
  title="在线预览"><i class="far fa-hand-point-right"></i><span>在线预览</span></a></p>
<p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/transition.png" alt="transition"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.13/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;myAnimate&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;fade&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>动画<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">isShow</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">myAnimate</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.isShow = !<span class="built_in">this</span>.isShow;</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>定义两组类样式</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#app</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#494f5c</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 入场动画开始和出场动画结束 */</span></span><br><span class="line"><span class="selector-class">.fade-enter</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">200px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 整个入场动画和出场动画过程 */</span></span><br><span class="line"><span class="selector-class">.fade-enter-active</span>,</span><br><span class="line"><span class="selector-class">.fade-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.6s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="animate-2"><h2 id="使用第三方-css-动画库"><a href="#使用第三方-css-动画库" class="headerlink" title="使用第三方 css 动画库"></a>使用第三方 css 动画库</h2><p><a class="btn-beautify button--animated green larger" href="https://codehhr.github.io/vue-daily/vue-animate.css.html" 
  title="在线预览"><i class="far fa-hand-point-right"></i><span>在线预览</span></a></p>
<p>Vue 官网推荐的是 <code>Animate.css</code></p>
<p><a class="btn-beautify button--animated orange larger" href="https://animate.style/" 
  title="Animate 官网"><i class="far fa-hand-point-right"></i><span>Animate 官网</span></a></p>
<p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/animate.style.png" alt="animate.style"></p>
<h3 id="引入动画类库"><a href="#引入动画类库" class="headerlink" title="引入动画类库"></a>引入动画类库</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">  <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="给标签加入-animate-类名"><a href="#给标签加入-animate-类名" class="headerlink" title="给标签加入 animate 类名"></a>给标签加入 animate 类名</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;animate__animated animate__bounce&quot;</span>&gt;</span>Animate<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="animate-3"><h2 id="使用动画钩子函数"><a href="#使用动画钩子函数" class="headerlink" title="使用动画钩子函数"></a>使用动画钩子函数</h2><p><a class="btn-beautify button--animated green larger" href="https://codehhr.github.io/vue-daily/vue-animation-hook-function.html" 
  title="在线预览"><i class="far fa-hand-point-right"></i><span>在线预览</span></a></p>
<h3 id="定义-transition-组件以及三个钩子函数"><a href="#定义-transition-组件以及三个钩子函数" class="headerlink" title="定义 transition 组件以及三个钩子函数"></a>定义 transition 组件以及三个钩子函数</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isShow = !isShow&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">before-enter</span>=<span class="string">&quot;beforeEnter&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">enter</span>=<span class="string">&quot;enter&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">after-enter</span>=<span class="string">&quot;afterEnter&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span> <span class="attr">class</span>=<span class="string">&quot;show&quot;</span>&gt;</span>OK<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="定义三个-methods-钩子方法"><a href="#定义三个-methods-钩子方法" class="headerlink" title="定义三个 methods 钩子方法"></a>定义三个 methods 钩子方法</h3><p><strong>注意 : <code>enter</code> 函数里的 <code>el.offsetHeight</code> 和 <code>el.offsetWidth</code> 至少要有一个</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">isShow</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">beforeEnter</span>(<span class="params">el</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 动画进入之前的回调函数</span></span><br><span class="line">      el.style.transform = <span class="string">&quot;translateX(500px)&quot;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">enter</span>(<span class="params">el, done</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 动画进入完成时候的回调函数</span></span><br><span class="line">      el.offsetWidth;</span><br><span class="line">      <span class="comment">// el.offsetHeight;</span></span><br><span class="line">      el.style.transform = <span class="string">&quot;translateX(0px)&quot;</span>;</span><br><span class="line">      done();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">afterEnter</span>(<span class="params">el</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 动画进入完成之后的回调函数</span></span><br><span class="line">      <span class="built_in">this</span>.isShow = !<span class="built_in">this</span>.isShow;</span><br><span class="line">      <span class="comment">// el.style.opacity = 0;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="animate-4"><h2 id="v-for-的列表过渡"><a href="#v-for-的列表过渡" class="headerlink" title="v-for 的列表过渡"></a>v-for 的列表过渡</h2><p><a class="btn-beautify button--animated green larger" href="https://codehhr.github.io/vue-daily/v-for-list-transition-animation.html" 
  title="在线预览"><i class="far fa-hand-point-right"></i><span>在线预览</span></a></p>
<h3 id="定义过渡样式"><a href="#定义过渡样式" class="headerlink" title="定义过渡样式"></a>定义过渡样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.list-enter</span>,</span><br><span class="line"><span class="selector-class">.list-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">10px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.list-enter-active</span>,</span><br><span class="line"><span class="selector-class">.list-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.6s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用-transition-group-组件把-v-for-循环的列表包裹起来"><a href="#使用-transition-group-组件把-v-for-循环的列表包裹起来" class="headerlink" title="使用 transition-group 组件把 v-for 循环的列表包裹起来"></a>使用 transition-group 组件把 v-for 循环的列表包裹起来</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;add&quot;</span> /&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">tag</span>=<span class="string">&quot;ul&quot;</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="创建-Vue-实例"><a href="#创建-Vue-实例" class="headerlink" title="创建 Vue 实例"></a>创建 Vue 实例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">text</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">list</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">add</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.list.push(<span class="built_in">this</span>.text);</span><br><span class="line">      <span class="built_in">this</span>.text = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
]]></content>
      <categories>
        <category>Vue</category>
        <category>Vue基础</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Vue 过渡动画</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript 环境安装</title>
    <url>/2021/09/15/ts/ts-install-typescript/</url>
    <content><![CDATA[<h1 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h1><p><code>TypeScript</code> 是 <code>JavaScript</code> 的一个超集 , 支持 <code>ECMAScript 6</code> 标准 ( <a href="https://codehhr.cn/categories/js/ES6/"><strong>关于 ES6</strong></a> )<br><code>TypeScript</code> 由微软开发的自由和开源的编程语言 , <code>TypeScript</code> 设计目标是开发大型应用 , 它可以编译成纯 <code>JavaScript</code> , 编译出来的 <code>JavaScript</code> 可以运行在任何浏览器上</p>
<p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/ts/ts.jpeg" alt="TypeScript"></p>
<h1 id="TypeScript-安装"><a href="#TypeScript-安装" class="headerlink" title="TypeScript 安装"></a>TypeScript 安装</h1><h2 id="使用-npm-安装"><a href="#使用-npm-安装" class="headerlink" title="使用 npm 安装"></a>使用 <code>npm</code> 安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install typescript -g</span><br></pre></td></tr></table></figure>

<p><strong>Linux 用户的话 , <code>-g</code> 全局安装会出现 <code>permission denied</code> , 意思就是权限不够嘛 , 用 <code>sudo</code> 或 <code>root</code> 用户就可以了</strong></p>
<h2 id="安装完成后可以使用-tsc-命令来执行-TypeScript-的相关代码-比如查看版本号"><a href="#安装完成后可以使用-tsc-命令来执行-TypeScript-的相关代码-比如查看版本号" class="headerlink" title="安装完成后可以使用 tsc 命令来执行 TypeScript 的相关代码 , 比如查看版本号 :"></a>安装完成后可以使用 <code>tsc</code> 命令来执行 <code>TypeScript</code> 的相关代码 , 比如查看版本号 :</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tsc -v</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Version 4.4.3</span><br></pre></td></tr></table></figure>

<h2 id="把-ts-文件转换为-js-文件"><a href="#把-ts-文件转换为-js-文件" class="headerlink" title="把 ts 文件转换为 js 文件"></a>把 ts 文件转换为 js 文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tsc index.ts</span><br></pre></td></tr></table></figure>

<p>结果会多出一个 <code>js</code> 文件 , 然后你可以用 <code>node index.js</code> 来执行 , 确实有点麻烦 , 当然有解决办法 , 安装 <code>ts-node</code></p>
<h2 id="安装-ts-node"><a href="#安装-ts-node" class="headerlink" title="安装 ts-node"></a>安装 ts-node</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install ts-node -g</span><br></pre></td></tr></table></figure>

<h2 id="用-ts-node-来执行"><a href="#用-ts-node-来执行" class="headerlink" title="用 ts-node 来执行"></a>用 ts-node 来执行</h2><p>就是略慢 , 他得转换一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ts-node index.ts</span><br></pre></td></tr></table></figure>

<h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
        <tag>ts</tag>
        <tag>ts-node</tag>
      </tags>
  </entry>
  <entry>
    <title>Axios 的使用</title>
    <url>/2021/07/21/vue/vue-axios/</url>
    <content><![CDATA[<h1 id="主要是-GET-和-POST-请求"><a href="#主要是-GET-和-POST-请求" class="headerlink" title="主要是 GET 和 POST 请求"></a>主要是 GET 和 POST 请求</h1><div class="tabs" id="axios"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#axios-1">GET 请求</button></li><li class="tab"><button type="button" data-href="#axios-2">POST 请求</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="axios-1"><h1 id="GET-请求"><a href="#GET-请求" class="headerlink" title="GET 请求"></a>GET 请求</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios</span><br><span class="line">  .get(<span class="string">&quot;/img?number=4&quot;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios</span><br><span class="line">  .get(<span class="string">&quot;/img&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      <span class="attr">number</span>: <span class="number">4</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&quot;https://img&quot;</span>,</span><br><span class="line">  <span class="comment">// get 请求参数</span></span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;zs&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="axios-2"><h1 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a>POST 请求</h1><p>传参方式大致用的有 <code>2</code> 种</p>
<h2 id="①-Content-Type-multipart-form-data-和-Content-Type-application-x-www-form-urlencoded"><a href="#①-Content-Type-multipart-form-data-和-Content-Type-application-x-www-form-urlencoded" class="headerlink" title="① Content-Type = multipart/form-data 和 Content-Type= application/x-www-form-urlencoded"></a>① Content-Type = multipart/form-data 和 Content-Type= application/x-www-form-urlencoded</h2><p>传参格式为 <code>formData</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">formData.append(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;free&quot;</span>);</span><br><span class="line">formData.append(<span class="string">&quot;pageNum&quot;</span>, <span class="number">1</span>);</span><br><span class="line">formData.append(<span class="string">&quot;pageSize&quot;</span>, <span class="number">10</span>);</span><br><span class="line">axios</span><br><span class="line">  .post(<span class="string">&quot;/course&quot;</span>, formData)</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>


<p>传参格式为 <code>query</code> 形式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios</span><br><span class="line">  .post(</span><br><span class="line">    <span class="string">&quot;/course&quot;</span>,</span><br><span class="line">    <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;free&quot;</span>,</span><br><span class="line">      <span class="attr">pageNum</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">pageSize</span>: <span class="number">10</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;res=&gt;&quot;</span>, res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="②-Content-Type-application-json"><a href="#②-Content-Type-application-json" class="headerlink" title="② Content-Type= application/json"></a>② Content-Type= application/json</h2><p>传参格式为 <code>raw</code> ( <code>JSON</code> 格式)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios</span><br><span class="line">  .post(<span class="string">&quot;/course&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;free&quot;</span>,</span><br><span class="line">    <span class="attr">pageNum</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">pageSize</span>: <span class="number">10</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios</span><br><span class="line">  .post(</span><br><span class="line">    <span class="string">&quot;/course&quot;</span>,</span><br><span class="line">    <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;free&quot;</span>,</span><br><span class="line">      <span class="attr">pageNum</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">pageSize</span>: <span class="number">10</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
      <categories>
        <category>Vue</category>
        <category>Vue基础</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>axios</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 品牌管理小案例</title>
    <url>/2021/07/21/vue/vue-basic-brand-managment/</url>
    <content><![CDATA[<a class="btn-beautify button--animated green larger" href="https://codehhr.github.io/vue-daily/brand-managment.html" 
  title="在线预览"><i class="far fa-hand-point-right"></i><span>在线预览</span></a>

<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>Vue 简单的品牌管理案例</span></div>
    <div class="hide-content"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.4.1/css/bootstrap.css&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin</span>: <span class="number">60px</span> auto;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.form-group</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">th</span>,</span></span><br><span class="line"><span class="css">  <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">    <span class="attribute">line-height</span>: <span class="number">50px</span> <span class="meta">!important</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-info&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;panel-title&quot;</span>&gt;</span>品牌管理<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-inline&quot;</span> <span class="attr">role</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;search&quot;</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">              <span class="attr">id</span>=<span class="string">&quot;search&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">placeholder</span>=<span class="string">&quot;请输入品牌关键字&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">v-model:value</span>=<span class="string">&quot;keyword&quot;</span></span></span><br><span class="line"><span class="tag">              @<span class="attr">change</span>=<span class="string">&quot;showBrandList&quot;</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>名字<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">              <span class="attr">id</span>=<span class="string">&quot;name&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">placeholder</span>=<span class="string">&quot;请输入品牌名字&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">v-model:value</span>=<span class="string">&quot;name&quot;</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;addBrand&quot;</span>&gt;</span></span><br><span class="line">            添加</span><br><span class="line">          <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-striped table-bordered&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>NAME<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Time<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>OPTION<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in showBrandList()&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;index+1&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.time | timeFilter(&quot;YYYY-MM-DD hh:mm:ss&quot;)&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">type</span>=<span class="string">&quot;button&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">class</span>=<span class="string">&quot;btn btn-danger&quot;</span></span></span><br><span class="line"><span class="tag">                @<span class="attr">click</span>=<span class="string">&quot;delBrand(index)&quot;</span></span></span><br><span class="line"><span class="tag">              &gt;</span></span><br><span class="line">                删除</span><br><span class="line">              <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">name</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">keyword</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">brandList</span>: <span class="built_in">JSON</span>.parse(<span class="built_in">localStorage</span>.getItem(<span class="string">&quot;brandList&quot;</span>)) || [</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">name</span>: <span class="string">&quot;迈凯轮&quot;</span>, <span class="attr">time</span>: <span class="keyword">new</span> <span class="built_in">Date</span>() &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">name</span>: <span class="string">&quot;科尼赛格&quot;</span>, <span class="attr">time</span>: <span class="keyword">new</span> <span class="built_in">Date</span>() &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">name</span>: <span class="string">&quot;兰博基尼&quot;</span>, <span class="attr">time</span>: <span class="keyword">new</span> <span class="built_in">Date</span>() &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">name</span>: <span class="string">&quot;BMW&quot;</span>, <span class="attr">time</span>: <span class="keyword">new</span> <span class="built_in">Date</span>() &#125;,</span></span><br><span class="line"><span class="javascript">      ],</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;&#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 显示</span></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">showBrandList</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// this.brandList = localStorage.getItem(&quot;brandList&quot;);</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">this</span>.brandList.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> item.name.includes(<span class="built_in">this</span>.keyword);</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 添加</span></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">addBrand</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="built_in">this</span>.name) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.brandList.push(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>: <span class="built_in">this</span>.name,</span></span><br><span class="line"><span class="javascript">            <span class="attr">time</span>: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span></span><br><span class="line"><span class="javascript">          &#125;);</span></span><br><span class="line"><span class="javascript">          <span class="built_in">localStorage</span>.setItem(<span class="string">&quot;brandList&quot;</span>, <span class="built_in">JSON</span>.stringify(<span class="built_in">this</span>.brandList));</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.name = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          alert(<span class="string">&quot;空&quot;</span>);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 删除</span></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">delBrand</span>(<span class="params">index</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.brandList.splice(index, <span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">localStorage</span>.setItem(<span class="string">&quot;brandList&quot;</span>, <span class="built_in">JSON</span>.stringify(<span class="built_in">this</span>.brandList));</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">filters</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//定义过滤器 , 格式化时间</span></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">timeFilter</span>(<span class="params">nothing, dateFormat</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> dateFormat</span></span><br><span class="line"><span class="javascript">          .replace(<span class="string">&quot;YYYY&quot;</span>, date.getFullYear())</span></span><br><span class="line"><span class="javascript">          .replace(<span class="string">&quot;MM&quot;</span>, (date.getMonth() + <span class="number">1</span>).toString().padStart(<span class="number">2</span>, <span class="string">&quot;0&quot;</span>))</span></span><br><span class="line"><span class="javascript">          .replace(<span class="string">&quot;DD&quot;</span>, date.getDate().toString().padStart(<span class="number">2</span>, <span class="string">&quot;0&quot;</span>))</span></span><br><span class="line"><span class="javascript">          .replace(<span class="string">&quot;hh&quot;</span>, date.getHours().toString().padStart(<span class="number">2</span>, <span class="string">&quot;0&quot;</span>))</span></span><br><span class="line"><span class="javascript">          .replace(<span class="string">&quot;mm&quot;</span>, date.getMinutes().toString().padStart(<span class="number">2</span>, <span class="string">&quot;0&quot;</span>))</span></span><br><span class="line"><span class="javascript">          .replace(<span class="string">&quot;ss&quot;</span>, date.getSeconds().toString().padStart(<span class="number">2</span>, <span class="string">&quot;0&quot;</span>));</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</div></div>
]]></content>
      <categories>
        <category>Vue</category>
        <category>Vue基础</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 基础</title>
    <url>/2021/07/19/vue/vue-basic/</url>
    <content><![CDATA[<h1 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h1><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vuebasic/vueall.png" alt="vue.js"></p>
<h1 id="什么是-vue-js"><a href="#什么是-vue-js" class="headerlink" title="什么是 vue.js"></a>什么是 <code>vue.js</code></h1><ul>
<li><code>Vue.js</code> 是一套<code>构建用户界面</code>的<code>渐进式</code> <code>框架</code> , 与其他重量级框架不同的是 , <code>Vue</code> 采用自底向上增量开发的设计 , <code>Vue</code> 的核心库只关注视图层 , 不仅易于上手 , 还便于与第三方库或既有项目整合 ,</li>
<li><code>Vue.js</code> 是前端的主流框架之一 , 和 <code>Angular.js</code>、<code>React.js</code> 一起 , 并成为前端三大主流框架！</li>
</ul>
<h2 id="为什么学习流行框架"><a href="#为什么学习流行框架" class="headerlink" title="为什么学习流行框架"></a>为什么学习流行框架</h2><ul>
<li>企业为了提高开发效率 : 在企业 <code>4E2D</code> , 时间就是效率 , 效率就是金钱 ;</li>
<li>企业中 , 使用框架 , 能够提高开发的效率 ;</li>
<li>提高开发效率的发展历程 : 原生 <code>JS</code> -&gt; <code>Jquery</code> 之类的类库 -&gt; 前端模板引擎 -&gt; <code>Angular.js</code> / <code>Vue.js</code></li>
<li>能够帮助我们减少不必要的 DOM 操作 ;提高渲染效率 ;双向数据绑定的概念【通过框架提供的指令 , 我们前端程序员只需要关心数据的业务逻辑 , 不再关心 <code>DOM</code> 是如何渲染的了】</li>
<li>在 <code>Vue</code> 中 , 一个核心的概念 , 就是让用户不再操作 <code>DOM</code> 元素 , 解放了用户的双手 , 让程序员可以更多的时间去关注业务逻辑 ;</li>
</ul>
<h2 id="框架和库的区别"><a href="#框架和库的区别" class="headerlink" title="框架和库的区别"></a>框架和库的区别</h2><ul>
<li>框架 : 是一套完整的解决方案 , 对项目的侵入性较大 , 项目如果需要更换框架 , 则需要重新架构整个项目<ul>
<li>例如 : <code>node</code> 中的 <code>express</code></li>
</ul>
</li>
<li>库 ( 插件 ) : 提供某一个小功能 , 对项目的侵入性较小 , 如果某个库无法完成某些需求 , 可以很容易切换到其它库实现需求<ul>
<li>例如 : 从 <code>Jquery</code> 切换到 <code>Zepto</code></li>
<li>例如 : 从 <code>EJS</code> 切换到 <code>art-template</code></li>
</ul>
</li>
</ul>
<h2 id="MVC-与-MVVM-的区别"><a href="#MVC-与-MVVM-的区别" class="headerlink" title="MVC 与 MVVM 的区别"></a>MVC 与 MVVM 的区别</h2><ul>
<li><code>MVC</code> 是后端的分层开发概念 ;</li>
<li><code>MVVM</code> 是前端视图层的概念 , 主要关注于视图层分离 , 也就是说 : <code>MVVM</code> 把前端的视图层 , 分为了三部分 <code>Model</code>、<code>View</code>、<code>VM ViewModel</code> ;</li>
</ul>
<p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vuebasic/MVVM.png" alt="vue.js"></p>
<h1 id="开始写-Vue-js-代码"><a href="#开始写-Vue-js-代码" class="headerlink" title="开始写 Vue.js 代码"></a>开始写 Vue.js 代码</h1><h2 id="引入-vue-js"><a href="#引入-vue-js" class="headerlink" title="引入 vue.js"></a>引入 vue.js</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="写视图层-要展示的内容"><a href="#写视图层-要展示的内容" class="headerlink" title="写视图层 , 要展示的内容"></a>写视图层 , 要展示的内容</h2><p><code>Vue.js</code> 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 <code>DOM</code> 的系统 :</p>
<p><strong>示例</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 插值表达式 , 可以读取变量 --&gt;</span></span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="实例化-Vue"><a href="#实例化-Vue" class="headerlink" title="实例化 Vue()"></a>实例化 Vue()</h2><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>实例化 Vue()</span></div>
    <div class="hide-content"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入 vue.js , 引入 js 之后他为我们提供了 Vue 类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 调度层</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// vue 控制的区域</span></span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// data 参数存放我们的数据 , 这一层就是 mvvm 里的 model 层</span></span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">message</span>: <span class="string">&quot;Hello Vue!&quot;</span>,</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</div></div>

<p>页面展示内容:</p>
<div class="note simple"><p>Hello Vue!</p>
</div>

<p><strong>注意 : 都是通过 <code>this</code> 对象去拿的 , 通过 <code>this</code> 也可以调用方法 , 写方法的时候我们需要注意 <code>this</code> 的指向问题</strong></p>
<h1 id="插值表达式-v-cloak-v-text-v-html"><a href="#插值表达式-v-cloak-v-text-v-html" class="headerlink" title="插值表达式 , v-cloak , v-text , v-html"></a>插值表达式 , v-cloak , v-text , v-html</h1><ul>
<li>如何获取变量值呢?<ul>
<li>插值表达式 : <code>&#123;&#123; &#125;&#125;</code> , 可以在前后插一些内容;</li>
<li><code>v-text</code> : 会替换掉元素里的内容;</li>
<li><code>v-html</code> : 可以渲染 <code>html</code> 界面;</li>
</ul>
</li>
</ul>
<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>插值表达式&sbquo;v-cloak&sbquo;v-text&sbquo;v-html</span></div>
    <div class="hide-content"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入vue的js , 引入js之后他为我们提供了Vue类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 视图层 start --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 在 vue 加载之前 v-cloak 存在 , vue 加载结束之后 v-cloak就隐藏了 , 利用这个特性可以实现 : 界面防止闪烁</span></span><br><span class="line"><span class="comment">  如果网速够快的话也就看不出来了 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-cloak</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 使用 v-text 给界面元素赋值 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 如果我们想在变量之前或者后面加一些内容的话使用 插值表达式 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 如果我们想直接覆盖元素内容的话使用 v-text 指令 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;html&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 通过 v-html 指令把字符串解析成 html 的内容 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;html&quot;</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 视图层 end --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 调度层 start</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// vue 控制的区域</span></span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// data 参数存放我们的数据 , 这一层就是 mvvm 里的 model 层</span></span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">message</span>: <span class="string">&quot;Hello Vue!&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">html</span>: <span class="string">&quot;&lt;h1&gt;这是一个很大的标题&lt;/h1&gt;&quot;</span>,</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 调度层 end</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</div></div>

<h1 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h1><ul>
<li>界面元素属性值的绑定<ul>
<li>括号里不加引号的都是 <code>data</code> 里的数据读取</li>
<li>如果想使用字符串需要再加上引号 ( <code>&#123;&#123;"hello World"&#125;&#125;</code> )</li>
<li>里面可以写表达式</li>
<li>里面也可以调用定义好的方法 , 拿到的是方法的返回值</li>
</ul>
</li>
</ul>
<p><strong>示例</strong></p>
<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>v-bind</span></div>
    <div class="hide-content"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入 vue 的js , 引入 js 之后他为我们提供了 Vue 类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 视图层 start --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 插值表达式 , 可以读取变量 --&gt;</span></span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line">  <span class="comment">&lt;!-- &lt;button v-bind:title=&quot;nihao&quot;&gt;按钮&lt;/button&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">:title</span>=<span class="string">&quot;hello&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;message&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 视图层 end --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 调度层 start</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// vue 控制的区域</span></span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// data 参数存放我们的数据 , 这一层就是 mvvm 里的 model 层</span></span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">message</span>: <span class="string">&quot;Hello Vue!&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">flag</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">hello</span>: <span class="string">&quot;你好世界&quot;</span>,</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 调度层 end</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</div></div>

<h1 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h1><ul>
<li>进行事件的绑定 , 我们用的最多的是 <code>click</code> 事件绑定</li>
<li>简写为 <code>@</code></li>
<li>实现跑马灯的效果</li>
</ul>
<p><strong>示例</strong></p>
<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>v-on</span></div>
    <div class="hide-content"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入 vue 的js , 引入 js 之后他为我们提供了 Vue 类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 跑马灯 start --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;start&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;disabled&quot;</span>&gt;</span>开始<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;stop&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;!disabled&quot;</span>&gt;</span>暂停<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 跑马灯 end --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">msg</span>: <span class="string">&quot;猥琐发育,别浪~&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">disabled</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">lampTimer</span>: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">start</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;start&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.disabled = !<span class="built_in">this</span>.disabled;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">clearInterval</span>(<span class="built_in">this</span>.lampTimer);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> msgList;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.lampTimer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          msgList = <span class="built_in">this</span>.msg.split(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="javascript">          msgList.push(msgList.shift());</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.msg = msgList.join(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="javascript">        &#125;, <span class="number">200</span>);</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">stop</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;stop&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.disabled = !<span class="built_in">this</span>.disabled;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">clearInterval</span>(<span class="built_in">this</span>.lampTimer);</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</div></div>

<h1 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h1><ul>
<li><code>.stop</code> 阻止冒泡</li>
<li><code>.prevent</code> 阻止默认事件</li>
<li><code>.capture</code> 添加事件侦听器时使用事件捕获模式</li>
<li><code>.self</code> 只当事件在该元素本身 ( 比如不是子元素 ) 触发时触发回调</li>
<li><code>.once</code> 事件只触发一次</li>
</ul>
<p><strong>示例</strong></p>
<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>事件修饰符</span></div>
    <div class="hide-content"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入 vue 的js , 引入 js 之后他为我们提供了 Vue 类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span> @<span class="attr">click.capture</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span> @<span class="attr">click.stop</span>=<span class="string">&quot;inner&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;self&quot;</span> @<span class="attr">click.self</span>=<span class="string">&quot;self&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;button&quot;</span>&gt;</span>button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://codehhr.cn&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;clickA&quot;</span>&gt;</span>a-link-tag<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">outer</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;outer&quot;</span>);</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">inner</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;inner&quot;</span>);</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">self</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;self&quot;</span>);</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">button</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;button&quot;</span>);</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">clickA</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;a-link-tag&quot;</span>);</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</div></div>

<h1 id="v-model-数据双向绑定"><a href="#v-model-数据双向绑定" class="headerlink" title="v-model 数据双向绑定"></a>v-model 数据双向绑定</h1><ul>
<li>作用 : 数据双向绑定</li>
<li>注意 : 绑定的是表单控件</li>
</ul>
<p><strong>示例</strong></p>
<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>v-model 数据双向绑定</span></div>
    <div class="hide-content"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- vue.js start --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- vue.js end --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">v-model:value</span>=<span class="string">&quot;msg&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">msg</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</div></div>

<h1 id="Vue-中样式的使用"><a href="#Vue-中样式的使用" class="headerlink" title="Vue 中样式的使用"></a>Vue 中样式的使用</h1><h2 id="使用-class-样式"><a href="#使用-class-样式" class="headerlink" title="使用 class 样式 :"></a>使用 class 样式 :</h2><div class="tabs" id="class"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#class-1">数组</button></li><li class="tab"><button type="button" data-href="#class-2">三木表达式</button></li><li class="tab"><button type="button" data-href="#class-3">数组内置对象</button></li><li class="tab"><button type="button" data-href="#class-4">直接通过对象</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="class-1"><p>使用 <code>vue</code> 设置多个样式的时候可以使用数组</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;[font20,blue]&quot;</span>&gt;</span>Text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  font20: <span class="string">&quot;font20&quot;</span>,</span><br><span class="line">  blue: <span class="string">&quot;blue&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="class-2"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;flag?&#x27;class1&#x27;:&#x27;class2&#x27;&quot;</span>&gt;</span>Text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  flag: <span class="literal">true</span>,</span><br><span class="line">  class1: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">  class1: <span class="string">&quot;blue&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="class-3"><p>当我们根据某个条件显示某个样式的时候可以使用对象的方式 , 对象里的键就是我们显示的样式 , 值是个 <code>bool</code> 类型</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;[class1,&#123;&#x27;class2&#x27;:flag&#125;]&quot;</span>&gt;</span>Text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  flag: <span class="literal">true</span>,</span><br><span class="line">  class1: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">  class1: <span class="string">&quot;blue&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="class-4"><p>直接使用对象 , 对象里的键就是我们显示的样式 , 值是个 <code>bool</code> 类型</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;&#x27;class1&#x27;:false,&#x27;class2&#x27;:true&#125;&quot;</span>&gt;</span>Text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;classObj&quot;</span>&gt;</span>Text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  classObj: &#123;</span><br><span class="line">    class1: <span class="literal">true</span>,</span><br><span class="line">    class2: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h2 id="使用行内样式"><a href="#使用行内样式" class="headerlink" title="使用行内样式"></a>使用行内样式</h2><div class="tabs" id="style"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#style-1">:style 的形式</button></li><li class="tab"><button type="button" data-href="#style-2">在data中定义样式对象</button></li><li class="tab"><button type="button" data-href="#style-3">数组引用多个样式对象</button></li><li class="tab"><button type="button" data-href="#style-4">通过调用方法返回对象</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="style-1"><p>直接在元素上通过 <code>:style</code> 的形式 , 书写样式对象</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;&#x27;color&#x27;:color&#125;&quot;</span>&gt;</span>Text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  color: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="style-2"><ul>
<li>在 <code>data</code> 上定义样式</li>
<li>在元素中 , 通过属性绑定的形式 , 将样式对象应用到元素中</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;textStyle&quot;</span>&gt;</span>Text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  textStyle: &#123;</span><br><span class="line">    color: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;font-size&quot;</span>: <span class="string">&quot;50px&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="style-3"><p>在 <code>:style</code> 中通过数组 , 引用多个 <code>data</code> 上的样式对象</p>
<ul>
<li>在 <code>data</code> 上定义样式</li>
<li>在元素中 , 通过属性绑定的形式 , 将样式对象应用到元素中</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;[textStyle1,textStyle2]&quot;</span>&gt;</span>Text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  textStyle1: &#123;</span><br><span class="line">    color: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;font-size&quot;</span>: <span class="string">&quot;50px&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">   textStyle2: &#123;</span><br><span class="line">    <span class="attr">&quot;font-weight&quot;</span>: <span class="string">&quot;600&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="style-4"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  <span class="function"><span class="title">getStyle</span>(<span class="params">num</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;</span><br><span class="line">      <span class="attr">color</span>: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">      <span class="string">&quot;font-size&quot;</span>: <span class="string">&quot;50px&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (num == <span class="number">1</span>) &#123;</span><br><span class="line">      obj.color = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      obj.color = <span class="string">&quot;green&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h1 id="V-for-和-key-属性"><a href="#V-for-和-key-属性" class="headerlink" title="V-for 和 key 属性"></a>V-for 和 key 属性</h1><ul>
<li>遍历数组 , 参数 <code>(item,index) in list</code></li>
<li>遍历对象 , 参数 <code>(value,key,index) in list</code></li>
<li>遍历数字 , <code>num in 10 (1~10)</code></li>
<li><code>key</code> 在使用 <code>v-for</code> 的时候都需要去设置 <code>key</code><ul>
<li>让界面元素和数组里的每个记录进行绑定</li>
<li><code>key</code> 只能是字符串或者数字</li>
<li><code>key</code> 必须是唯一的</li>
</ul>
</li>
</ul>
<p><strong>示例</strong></p>
<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>V-for和key</span></div>
    <div class="hide-content"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入 vue 的js , 引入 js 之后他为我们提供了 Vue 类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,key,index) in zhangsan&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;index&#125;&#125; - &#123;&#123;key&#125;&#125; : &#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;index&#125;&#125; : &#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item in 6&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>🦌<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">list</span>: [<span class="string">&quot;github&quot;</span>, <span class="string">&quot;gitee&quot;</span>, <span class="string">&quot;coding&quot;</span>, <span class="string">&quot;gitlab&quot;</span>],</span></span><br><span class="line"><span class="javascript">      <span class="attr">zhangsan</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">age</span>: <span class="number">35</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">nickName</span>: <span class="string">&quot;法外狂徒&quot;</span>,</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</div></div>

<p><strong>注意:</strong><br><code>2.2.0+</code> 的版本里 , 当在组件中使用 <code>v-for</code> 时 , <code>key</code> 现在是必须的;<br>当 <code>Vue.js</code> 用 <code>v-for</code> 正在更新已渲染过的元素列表时 , 它默认用 “就地复用” 策略 , 如果数据项的顺序被改变 , <code>Vue</code> 将不是移动 <code>DOM</code> 元素来匹配数据项的顺序 , 而是简单复用此处每个元素 , 并且确保它在特定索引下显示已被渲染过的每个元素<br>为了给 <code>Vue</code> 一个提示 , 以便它能跟踪每个节点的身份 , 从而重用和重新排序现有元素 , 你需要为每项提供一个唯一 <code>key</code> 属性。</p>
<h1 id="v-if-与-v-show-区别"><a href="#v-if-与-v-show-区别" class="headerlink" title="v-if 与 v-show 区别"></a>v-if 与 v-show 区别</h1><ul>
<li>区别：<ul>
<li><code>v-if</code> 删除 <code>dom</code> 元素</li>
<li><code>v-show</code> 设置 <code>display:none</code></li>
</ul>
</li>
<li>应用场景：<ul>
<li><code>v-if</code> 只修改一次的时候可以使用 <code>v-if</code></li>
<li><code>v-show</code> 频繁切换的时候可以使用 <code>v-show</code></li>
</ul>
</li>
</ul>
<p><strong>示例</strong></p>
<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>v-if与v-show 区别</span></div>
    <div class="hide-content"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入 vue 的js , 引入 js 之后他为我们提供了 Vue 类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;flag&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;age&gt;18?flag:!flag&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>未成年<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;flag&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>show<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;!flag&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>show<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">flag</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">age</span>: <span class="number">20</span>,</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</div></div>
]]></content>
      <categories>
        <category>Vue</category>
        <category>Vue基础</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 路由守卫</title>
    <url>/2021/07/31/vue/vue-beforeEach/</url>
    <content><![CDATA[<h1 id="全局前置守卫"><a href="#全局前置守卫" class="headerlink" title="全局前置守卫"></a>全局前置守卫</h1><p>你可以使用 <code>router.beforeEach</code> 注册一个全局前置守卫</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123; ... &#125;)</span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>当一个导航触发时 , 全局前置守卫按照创建顺序调用,守卫是异步解析执行 , 此时导航在所有守卫 <code>resolve</code> 完之前一直处于 等待中</p>
<p><strong>每个守卫方法接收三个参数 :</strong></p>
<ul>
<li><code>to: Route</code>: 即将要进入的目标 <code>路由对象</code></li>
<li><code>from: Route</code>: 当前导航正要离开的路由</li>
<li><code>next: Function</code>: 一定要调用该方法来 <code>resolve</code> 这个钩子,执行效果依赖 <code>next</code> 方法的调用参数</li>
<li><code>next()</code>: 进行管道中的下一个钩子,如果全部钩子执行完了 , 则导航的状态就是 <code>confirmed</code> (确认的)<ul>
<li><code>next(false)</code>: 中断当前的导航,如果浏览器的 <code>URL</code> 改变了 (可能是用户手动或者浏览器后退按钮) , 那么 <code>URL</code> 地址会重置到 <code>from</code> 路由对应的地址</li>
<li><code>next(&#39;/&#39;)</code> 或者 <code>next(&#123; path: &#39;/&#39; &#125;)</code>: 跳转到一个不同的地址,当前的导航被中断 , 然后进行一个新的导航,你可以向 <code>next</code> 传递任意位置对象 , 且允许设置诸如 <code>replace: true</code>、<code>name: &#39;home&#39;</code> 之类的选项以及任何用在 <code>router-link</code> 的 <code>to</code> <code>prop</code> 或 <code>router.push</code> 中的选项</li>
<li><code>next(error)</code>: <code>(2.4.0+)</code> 如果传入 <code>next</code> 的参数是一个 <code>Error</code> 实例 , 则导航会被终止且该错误会被传递给 <code>router.onError()</code> 注册过的回调</li>
</ul>
</li>
</ul>
<p><strong>确保 <code>next</code> 函数在任何给定的导航守卫中都被严格调用一次 , 它可以出现多于一次 , 但是只能在所有的逻辑路径都不重叠的情况下，否则钩子永远都不会被解析或报错</strong> , 这里用一个在用户未能验证身份时重定向到 <code>/login</code> 的示例</p>
<p><strong>错误示范</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 错误示范</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.name !== <span class="string">&quot;Login&quot;</span> &amp;&amp; !isAuthenticated) next(&#123; <span class="attr">name</span>: <span class="string">&quot;Login&quot;</span> &#125;);</span><br><span class="line">  <span class="comment">// 如果用户未能验证身份,则 next 会被调用两次,这是不对的</span></span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>正确示范</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正确示范</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.name !== <span class="string">&quot;Login&quot;</span> &amp;&amp; !isAuthenticated) &#123;</span><br><span class="line">    next(&#123; <span class="attr">name</span>: <span class="string">&quot;Login&quot;</span> &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="路由独享的守卫"><a href="#路由独享的守卫" class="headerlink" title="路由独享的守卫"></a>路由独享的守卫</h1><p>你可以在路由配置上直接定义 <code>beforeEnter</code> 守卫 :<br>这些守卫与全局前置守卫的方法参数是一样的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/foo&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: Foo,</span><br><span class="line">      <span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
        <category>Vue基础</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Vue-router</tag>
        <tag>beforeEach</tag>
      </tags>
  </entry>
  <entry>
    <title>用脚手架搭建一个 vue 项目</title>
    <url>/2021/02/27/vue/vue-cli-createvue/</url>
    <content><![CDATA[<h1 id="一、需要安装-node-环境"><a href="#一、需要安装-node-环境" class="headerlink" title="一、需要安装 node 环境"></a>一、需要安装 node 环境</h1><blockquote>
<p>下载地址: <a href="https://nodejs.org/en/">https://nodejs.org/en/</a><br>中文网: <a href="http://nodejs.cn/">http://nodejs.cn/</a></p>
</blockquote>
<h4 id="安装后为方便国内使用，可以把-npm-换成-taobao-的-cnpm-速度快"><a href="#安装后为方便国内使用，可以把-npm-换成-taobao-的-cnpm-速度快" class="headerlink" title="安装后为方便国内使用，可以把 npm 换成 taobao 的 cnpm (速度快)"></a>安装后为方便国内使用，可以把 npm 换成 taobao 的 cnpm (速度快)</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>检查是否安装成功,查看版本号</p>
<p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/node.png" alt="node"></p>
<h1 id="二、全局安装-vue-脚手架"><a href="#二、全局安装-vue-脚手架" class="headerlink" title="二、全局安装 vue 脚手架"></a>二、全局安装 vue 脚手架</h1><p>全局安装可能需要管理员权限( Windows 以管理员身份运行; Linux 加 sudo )</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line">或者用 cnpm</span><br><span class="line">cnpm install -g @vue/cli</span><br><span class="line">简写</span><br><span class="line">cnpm i -g @vue/cli</span><br></pre></td></tr></table></figure>

<h4 id="安装成功后可查看版本"><a href="#安装成功后可查看版本" class="headerlink" title="安装成功后可查看版本"></a>安装成功后可查看版本</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue -V  (大写V)</span><br></pre></td></tr></table></figure>

<p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vueversion.png" alt="vueversion"></p>
<h1 id="三、创建项目"><a href="#三、创建项目" class="headerlink" title="三、创建项目"></a>三、创建项目</h1><p>为方便编辑,我一般都在 <code>vscode</code> 里操作</p>
<h2 id="1-比如创建一个叫-project-的项目"><a href="#1-比如创建一个叫-project-的项目" class="headerlink" title="1.比如创建一个叫 project 的项目"></a>1.比如创建一个叫 project 的项目</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue create project</span><br></pre></td></tr></table></figure>

<h4 id="如果安装了-cnpm-就会询问是否使用淘宝镜像-cnpm"><a href="#如果安装了-cnpm-就会询问是否使用淘宝镜像-cnpm" class="headerlink" title="如果安装了 cnpm 就会询问是否使用淘宝镜像(cnpm)"></a>如果安装了 cnpm 就会询问是否使用淘宝镜像(cnpm)</h4><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreateusecnpm.png" alt="vuecreateusecnpm"></p>
<p>都可以,只是影响网速快慢,我装了 <code>cnpm</code>,这里我填 <code>Y</code></p>
<h2 id="2-选择配置方式"><a href="#2-选择配置方式" class="headerlink" title="2. 选择配置方式"></a>2. 选择配置方式</h2><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreatechooseconf.png" alt="vuecreatechooseconf"></p>
<blockquote>
<h4 id="说明"><a href="#说明" class="headerlink" title="说明:"></a>说明:</h4><ul>
<li><code>Default (babel,eslint)</code>: 默认配置</li>
<li><code>Manually select features</code>: 手动选择配置</li>
</ul>
</blockquote>
<p>键盘上下就可以选择,选 <code>Manually select features</code> (最下面那个),俺不用默认配置</p>
<h2 id="3-手动选择项目所需要的包"><a href="#3-手动选择项目所需要的包" class="headerlink" title="3. 手动选择项目所需要的包"></a>3. 手动选择项目所需要的包</h2><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreateconf.png" alt="vuecreateconf"></p>
<blockquote>
<h4 id="说明-1"><a href="#说明-1" class="headerlink" title="说明:"></a>说明:</h4><ul>
<li><code>Babel</code>: Babel 编译,将 ES6 编译成 ES5,进行兼容</li>
<li><code>TypeScript</code>: 给 JavaScript 添加特性的语言扩展</li>
<li><code>Progressive Web App (PWA) Support</code>: 让网页渐进式变成 App</li>
<li><code>Router</code>: Vue 路由</li>
<li><code>Vuex</code>: Vue 状态管理</li>
<li><code>CSS Pre-processors</code>: CSS 预编译器 (包括 SCSS/Sass、Less、Stylus)</li>
<li><code>Linter / Formatter</code>: 代码检测和格式化</li>
<li><code>Unit Testing</code>: 单元测试</li>
<li><code>E2E Testing</code>: 端到端测试</li>
</ul>
<h5 id="根据需求进行勾选-上下键选择-空格是取消或选中-选完最后回车"><a href="#根据需求进行勾选-上下键选择-空格是取消或选中-选完最后回车" class="headerlink" title="根据需求进行勾选,上下键选择,空格是取消或选中,选完最后回车"></a>根据需求进行勾选,上下键选择,空格是取消或选中,选完最后回车</h5></blockquote>
<h4 id="如图"><a href="#如图" class="headerlink" title="如图:"></a>如图:</h4><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreateconfafter.png" alt="vuecreateconfafter"></p>
<h2 id="4-选择版本"><a href="#4-选择版本" class="headerlink" title="4. 选择版本"></a>4. 选择版本</h2><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreatechooseversion.png" alt="vuecreatechooseversion"></p>
<h2 id="5-路由是否采用-history-模式"><a href="#5-路由是否采用-history-模式" class="headerlink" title="5. 路由是否采用 history 模式"></a>5. 路由是否采用 history 模式</h2><p>选啥都可以,之后可以改</p>
<p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreateusehistoryforrouter.png" alt="vuecreateusehistoryforrouter"></p>
<h2 id="6-选择-CSS-编译方法"><a href="#6-选择-CSS-编译方法" class="headerlink" title="6. 选择 CSS 编译方法"></a>6. 选择 CSS 编译方法</h2><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreatepickcssway.png" alt="vuecreatepickcssway"></p>
<p>按需选择,我选的 <code>Less</code></p>
<h2 id="7-选择代码规范"><a href="#7-选择代码规范" class="headerlink" title="7. 选择代码规范"></a>7. 选择代码规范</h2><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreatepickeslintway.png" alt="vuecreatepickeslintway"></p>
<p>我选的 <code>Standard config</code></p>
<blockquote>
<h4 id="说明-2"><a href="#说明-2" class="headerlink" title="说明:"></a>说明:</h4><ul>
<li><code>eslint with ...</code> : 只进行报错提醒;</li>
<li><code>eslint + A ...</code> : 不严谨模式;</li>
<li><code>eslint + S ...</code> : 正常模式;</li>
<li><code>eslint + P ...</code> : 严格模式;</li>
</ul>
</blockquote>
<h2 id="8-选择合适代码检验规范"><a href="#8-选择合适代码检验规范" class="headerlink" title="8. 选择合适代码检验规范"></a>8. 选择合适代码检验规范</h2><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreatelintonsave.png" alt="vuecreatelintonsave"></p>
<p>选 <code>lint on save</code>,也就是报存时检验</p>
<h2 id="9-选择放置配置的文件"><a href="#9-选择放置配置的文件" class="headerlink" title="9. 选择放置配置的文件"></a>9. 选择放置配置的文件</h2><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreateconfplace.png" alt="vuecreateconfplace"></p>
<p>我选的第一个,放到一个独立文件里</p>
<h2 id="10-是否保存配置为以后使用"><a href="#10-是否保存配置为以后使用" class="headerlink" title="10. 是否保存配置为以后使用"></a>10. 是否保存配置为以后使用</h2><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreatesaveconf.png" alt="vuecreatesaveconf"></p>
<p>先不保存 (<code>N</code>)</p>
<h2 id="11-安装完成"><a href="#11-安装完成" class="headerlink" title="11. 安装完成"></a>11. 安装完成</h2><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreatedone.png" alt="vuecreatedone"></p>
<h2 id="12-运行项目"><a href="#12-运行项目" class="headerlink" title="12. 运行项目"></a>12. 运行项目</h2><p>其实安装完成后有提示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> project (进入项目根目录)</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure>

<p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuenpmrunserve.png" alt="vuenpmrunserve"></p>
<p>会在本地 <code>8080</code> 端口运行</p>
<h4 id="如图-1"><a href="#如图-1" class="headerlink" title="如图"></a>如图</h4><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuerunning.png" alt="vuerunning"></p>
<h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
      <categories>
        <category>Vue</category>
        <category>Vue脚手架</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Vue脚手架</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 评论小案例</title>
    <url>/2021/07/25/vue/vue-component-comment/</url>
    <content><![CDATA[<h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><a class="btn-beautify button--animated green larger" href="https:/vue-daily.netlify.app/vue-component-comment.html" 
  title="在线预览"><i class="far fa-hand-point-right"></i><span>在线预览</span></a>

<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>Vue 评论小案例</span></div>
    <div class="hide-content"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.4.1/css/bootstrap.css&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">60px</span> auto;</span></span><br><span class="line"><span class="css">        <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">outline</span>: none <span class="meta">!important</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.comment-list</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">10px</span> <span class="meta">!important</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-info&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;panel-title&quot;</span>&gt;</span>Vue 评论小案例<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 引用提交评论组件 start --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">commit-comment</span> @<span class="attr">func</span>=<span class="string">&quot;getDataFromCommit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">commit-comment</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 引用提交评论组件 end --&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 评论列表 start --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-striped table-hover&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;pull-left&quot;</span>&gt;</span>&#123;&#123;item.comment&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;badge pull-right&quot;</span>&gt;</span>&#123;&#123;item.username&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 评论列表 end --&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 提交评论组件 start --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;commit-comment&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;comment-list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- &lt;label for=&quot;username&quot;&gt;&lt;/label&gt; --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">            <span class="attr">id</span>=<span class="string">&quot;username&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">placeholder</span>=<span class="string">&quot;用户名&quot;</span></span></span><br><span class="line"><span class="tag">          /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- &lt;label for=&quot;comment&quot;&gt;&lt;/label&gt; --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">textarea</span></span></span><br><span class="line"><span class="tag">            <span class="attr">id</span>=<span class="string">&quot;comment&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-model</span>=<span class="string">&quot;comment&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">placeholder</span>=<span class="string">&quot;评论内容&quot;</span></span></span><br><span class="line"><span class="tag">          &gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-info&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;addComment&quot;</span>&gt;</span>发表评论<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 提交评论组件 end --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">list</span>: [],</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="function"><span class="title">getDataFromCommit</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.list = <span class="built_in">JSON</span>.parse(<span class="built_in">localStorage</span>.getItem(<span class="string">&quot;commentList&quot;</span>) || <span class="string">&quot;[]&quot;</span>);</span></span><br><span class="line"><span class="javascript">          &#125;,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 确保拿到的是个数组,不然遍历会报错</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (</span></span><br><span class="line"><span class="javascript">            <span class="built_in">Array</span>.isArray(</span></span><br><span class="line"><span class="javascript">              <span class="built_in">JSON</span>.parse(<span class="built_in">localStorage</span>.getItem(<span class="string">&quot;commentList&quot;</span>) || <span class="string">&quot;[]&quot;</span>)</span></span><br><span class="line"><span class="javascript">            )</span></span><br><span class="line"><span class="javascript">          ) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.getDataFromCommit();</span></span><br><span class="line"><span class="javascript">          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">          &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="string">&quot;commit-comment&quot;</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">template</span>: <span class="string">&quot;#commit-comment&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">username</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">comment</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript">              &#125;;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">              <span class="function"><span class="title">addComment</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (!<span class="built_in">this</span>.username || !<span class="built_in">this</span>.comment) &#123;</span></span><br><span class="line"><span class="javascript">                  alert(<span class="string">&quot;兄弟 , 空着呢 ~&quot;</span>);</span></span><br><span class="line"><span class="javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                  <span class="comment">// 从本地缓存拿出 commentList</span></span></span><br><span class="line"><span class="javascript">                  <span class="keyword">let</span> commentList = <span class="built_in">JSON</span>.parse(</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">localStorage</span>.getItem(<span class="string">&quot;commentList&quot;</span>) || <span class="string">&quot;[]&quot;</span></span></span><br><span class="line"><span class="javascript">                  );</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                  <span class="comment">// 数组首部分加入新的数据</span></span></span><br><span class="line"><span class="javascript">                  commentList.unshift(&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">username</span>: <span class="built_in">this</span>.username,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">comment</span>: <span class="built_in">this</span>.comment,</span></span><br><span class="line"><span class="javascript">                  &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                  <span class="comment">// 把新的数组存入本体缓存</span></span></span><br><span class="line"><span class="javascript">                  <span class="built_in">localStorage</span>.setItem(</span></span><br><span class="line"><span class="javascript">                    <span class="string">&quot;commentList&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">JSON</span>.stringify(commentList)</span></span><br><span class="line"><span class="javascript">                  );</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                  <span class="built_in">this</span>.username = <span class="built_in">this</span>.comment = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">                  <span class="built_in">this</span>.$emit(<span class="string">&quot;func&quot;</span>);</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">              &#125;,</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">          &#125;,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</div></div>
]]></content>
      <categories>
        <category>vue</category>
        <category>vue基础</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 父子组件互相传值</title>
    <url>/2021/07/25/vue/vue-component-query-params/</url>
    <content><![CDATA[<h1 id="Vue-父子组件互相传值"><a href="#Vue-父子组件互相传值" class="headerlink" title="Vue 父子组件互相传值"></a>Vue 父子组件互相传值</h1><div class="tabs" id="components"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#components-1">父组件传值子组件</button></li><li class="tab"><button type="button" data-href="#components-2">子组件传值父组件</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="components-1"><p><a class="btn-beautify button--animated green larger" href="https://vue-daily.netlify.app/father-to-son.html" 
  title="在线演示"><i class="far fa-hand-point-right"></i><span>在线演示</span></a></p>
<div class="note blue no-icon flat"><p>设置 <code>props</code> 属性就可以接受父组件传值</p>
</div>

<h2 id="父组件"><a href="#父组件" class="headerlink" title="父组件"></a>父组件</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">child</span> <span class="attr">:parent-msg</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在父组件 <code>data</code> 上定义一个 <code>msg</code> , 用于传递给子组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&quot;父组件内容&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="子组件"><a href="#子组件" class="headerlink" title="子组件"></a>子组件</h2><p>顺便定义一个方法 , 用来触发拿到父组件传的值 , 当然也可以直接写在 <code>created</code> 里</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;getDateFromParent&quot;</span>&gt;</span>子组件按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="props-设置传递类型-三种方式"><a href="#props-设置传递类型-三种方式" class="headerlink" title="props 设置传递类型 ( 三种方式 )"></a>props 设置传递类型 ( 三种方式 )</h3><p>可以设置多个类型 , 可以传 <code>Number</code> 也可以传 <code>String</code></p>
<p><strong>第一种方式</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">parentMsg: <span class="built_in">String</span>;</span><br></pre></td></tr></table></figure>

<p><strong>第二种方式</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">parentMsg: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br></pre></td></tr></table></figure>

<p><strong>第三种方式</strong></p>
<p>需要注意的是 , 当类型是 <code>Object</code> 或者 <code>Array</code> , 默认值必须是一个函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">parentMsg: &#123;</span><br><span class="line">    <span class="attr">type</span>: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br><span class="line">    <span class="function"><span class="title">default</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&quot;child&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;#child&quot;</span>,</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">parentMsg</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br><span class="line">      <span class="function"><span class="title">default</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">getDateFromParent</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.parentMsg);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p><strong>data 和 props 的区别 :</strong></p>
<p><code>data</code> 是组件私有的 , <code>props</code> 是父组件传过来的<br><code>data</code> 是可以修改的 , <code>props</code> 是只读的</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="components-2"><p><a class="btn-beautify button--animated green larger" href="https://vue-daily.netlify.app/son-to-father.html" 
  title="在线演示"><i class="far fa-hand-point-right"></i><span>在线演示</span></a></p>
<p><strong>子组件调用父组件的方法</strong></p>
<ul>
<li>在父组件中给引用的子组件注册一个事件 ( 事件名是自定义的 )</li>
<li>子组件可以触发这个事件 <code>$emit(&#39;事件名字&#39;)</code></li>
</ul>
<p><strong>子组件给父组件传递数据</strong></p>
<ul>
<li><code>$emit</code> 方法第二个参数可以定义子组件给父组件传递的内容</li>
<li>在父组件中怎么拿到这内容<ul>
<li>父组件这个方法没有自定参数 , 在父组件的方法中直接加个参数就可以拿到</li>
<li>父组件有自定义参数 , 可以传入 <code>$event</code> 拿到子组件传递的数据 , 通过 <code>$event</code> 只能传递第一个参数</li>
</ul>
</li>
</ul>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="子组件"><a href="#子组件" class="headerlink" title="子组件"></a>子组件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;childBtn&quot;</span>&gt;</span>子组件按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&quot;child&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;#child&quot;</span>,</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">childBtn</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.$emit(<span class="string">&quot;passingdatatoparent&quot;</span>, <span class="string">&quot;我是子组件内容&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="父组件"><a href="#父组件" class="headerlink" title="父组件"></a>父组件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">child</span> @<span class="attr">passingDataToParent</span>=<span class="string">&quot;getDataFromChild&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">getDataFromChild</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
      <categories>
        <category>Vue</category>
        <category>Vue基础</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Vue 组件</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 组件复用</title>
    <url>/2021/07/24/vue/vue-component-reuse/</url>
    <content><![CDATA[<h1 id="可能因-http-的原因无法正常显示-那就看代码吧"><a href="#可能因-http-的原因无法正常显示-那就看代码吧" class="headerlink" title="可能因 http 的原因无法正常显示,那就看代码吧"></a>可能因 <code>http</code> 的原因无法正常显示,那就看代码吧</h1><a class="btn-beautify button--animated green larger" href="https://vue-daily.netlify.app/component-reuse.html" 
  title="效果预览"><i class="far fa-hand-point-right"></i><span>效果预览</span></a>

<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>组件复用</span></div>
    <div class="hide-content"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/axios/0.21.1/axios.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-id">#app</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">1200px</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.course-list</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="css">        <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="css">        <span class="attribute">flex-wrap</span>: wrap;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.course-item</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">2px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">234px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">140px</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.cover</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">122px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">course-list</span> <span class="attr">type</span>=<span class="string">&quot;free&quot;</span> <span class="attr">page-Size</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:course-title</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>免费课程<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">course-list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">course-list</span> <span class="attr">type</span>=<span class="string">&quot;boutique&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:course-title</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>精品课程<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">course-list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">course-list</span> <span class="attr">type</span>=<span class="string">&quot;discount&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:course-title</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>限时折扣课程<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">course-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;course-list&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;course-title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;course-list&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;course-item&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in courselist&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cover&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;item.coverFileUrl&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="attr">http</span>: Vue.component(<span class="string">&quot;course-list&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">template</span>: <span class="string">&quot;#course-list&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">courseApi</span>:</span></span><br><span class="line"><span class="javascript">              <span class="string">&quot;http://wkt.myhope365.com/weChat/applet/course/list/type&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">courselist</span>: [],</span></span><br><span class="line"><span class="javascript">          &#125;;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">type</span>: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span></span><br><span class="line"><span class="javascript">          <span class="attr">pageSize</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">type</span>: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span></span><br><span class="line"><span class="javascript">            <span class="attr">default</span>: <span class="number">5</span>,</span></span><br><span class="line"><span class="javascript">          &#125;,</span></span><br><span class="line"><span class="javascript">          <span class="attr">pageNum</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">type</span>: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span></span><br><span class="line"><span class="javascript">            <span class="attr">default</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">          &#125;,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="function"><span class="title">getCourseList</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> formData = <span class="keyword">new</span> FormData();</span></span><br><span class="line"><span class="javascript">            formData.append(<span class="string">&quot;type&quot;</span>, <span class="built_in">this</span>.type);</span></span><br><span class="line"><span class="javascript">            formData.append(<span class="string">&quot;pageNum&quot;</span>, <span class="built_in">this</span>.pageNum);</span></span><br><span class="line"><span class="javascript">            formData.append(<span class="string">&quot;pageSize&quot;</span>, <span class="built_in">this</span>.pageSize);</span></span><br><span class="line"><span class="javascript">            axios.post(<span class="built_in">this</span>.courseApi, formData).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">              <span class="built_in">this</span>.courselist = res.data.rows;</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">          &#125;,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.getCourseList();</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</div></div>
]]></content>
      <categories>
        <category>Vue</category>
        <category>Vue基础</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Vue 组件复用</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 组件</title>
    <url>/2021/07/22/vue/vue-component/</url>
    <content><![CDATA[<h1 id="vue-组件"><a href="#vue-组件" class="headerlink" title="vue 组件"></a>vue 组件</h1><ul>
<li>组件化和模块化的不同 :<ul>
<li>模块化 : 是从代码逻辑的角度进行划分的 ; 方便代码分层开发 , 保证每个功能模块的职能单一</li>
<li>组件化 : 是从 UI 界面的角度进行划分的 ; 前端的组件化 , 方便 UI 组件的重用</li>
</ul>
</li>
</ul>
<a class="btn-beautify button--animated green larger" href="https://codehhr.github.io/vue-daily/component.html" 
  title="在线预览"><i class="far fa-hand-point-right"></i><span>在线预览</span></a>

<h2 id="全局组件定义的四种方式"><a href="#全局组件定义的四种方式" class="headerlink" title="全局组件定义的四种方式"></a>全局组件定义的四种方式</h2><p><strong>注意 : 组件中的 <code>DOM</code> 结构 , 有且只能有唯一的根元素 <code>( Root Element )</code> 来进行包裹 !</strong></p>
<div class="tabs" id="component"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#component-1">第一种</button></li><li class="tab"><button type="button" data-href="#component-2">第二种</button></li><li class="tab"><button type="button" data-href="#component-3">第三种</button></li><li class="tab"><button type="button" data-href="#component-4">第四种</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="component-1"><h3 id="使用-Vue-extend-配合-Vue-component-方法"><a href="#使用-Vue-extend-配合-Vue-component-方法" class="headerlink" title="使用 Vue.extend 配合 Vue.component 方法 :"></a>使用 <code>Vue.extend</code> 配合 <code>Vue.component</code> 方法 :</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种方法</span></span><br><span class="line"><span class="keyword">let</span> myTitle = Vue.extend(&#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;&lt;h1&gt; 我是第一种方法&lt;/h1&gt;&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line">Vue.component(<span class="string">&quot;my-title&quot;</span>, myTitle);</span><br></pre></td></tr></table></figure>

<p>引用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-title</span>&gt;</span><span class="tag">&lt;/<span class="name">my-title</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="component-2"><h3 id="直接使用-Vue-component-方法"><a href="#直接使用-Vue-component-方法" class="headerlink" title="直接使用 Vue.component 方法 :"></a>直接使用 <code>Vue.component</code> 方法 :</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第二种方法</span></span><br><span class="line">Vue.component(<span class="string">&quot;my-header&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;&lt;h1&gt;我是第二种方法&lt;/h1&gt;&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>引用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-header</span>&gt;</span><span class="tag">&lt;/<span class="name">my-header</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="component-3"><h3 id="将模板字符串定义到-script-标签中-设置type-quot-x-template-quot-同时需要使用-Vue-component-来定义组件"><a href="#将模板字符串定义到-script-标签中-设置type-quot-x-template-quot-同时需要使用-Vue-component-来定义组件" class="headerlink" title="将模板字符串定义到 script 标签中 , 设置type=&quot;x-template&quot; , 同时需要使用 Vue.component 来定义组件 :"></a>将模板字符串定义到 <code>script</code> 标签中 , 设置<code>type=&quot;x-template&quot;</code> , 同时需要使用 <code>Vue.component</code> 来定义组件 :</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;x-template&quot;</span> id=<span class="string">&quot;my-component&quot;</span>&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;//codehhr.cn&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>第三种方法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第三种方法</span></span><br><span class="line">Vue.component(<span class="string">&quot;my-component&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;#my-component&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>引用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="component-4"><h3 id="用-template-标签"><a href="#用-template-标签" class="headerlink" title="用 template 标签"></a>用 <code>template</code> 标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;global-component&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是全局组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;globalComponent&quot;</span>&gt;</span>全局组件按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&quot;global-component&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;#global-component&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>引用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">global-component</span>&gt;</span><span class="tag">&lt;/<span class="name">global-component</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h2 id="组件中展示数据和响应事件"><a href="#组件中展示数据和响应事件" class="headerlink" title="组件中展示数据和响应事件"></a>组件中展示数据和响应事件</h2><p>在组件中 , <code>data</code> 需要被定义为一个方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&quot;global-component&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;#global-component&quot;</span>,</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>在子组件中 , 如果将模板字符串 , 定义到了 <code>script</code> 标签中 , 那么 , 要访问子组件身上的 <code>data</code> 属性中的值 , 需要使用 <code>this</code> 来访问</p>
<h2 id="为什么组件中的-data-属性必须定义为一个方法并返回一个对象"><a href="#为什么组件中的-data-属性必须定义为一个方法并返回一个对象" class="headerlink" title="为什么组件中的 data 属性必须定义为一个方法并返回一个对象"></a>为什么组件中的 <code>data</code> 属性必须定义为一个方法并返回一个对象</h2><p>如果不用 <code>return</code> , 每个组件的 <code>data</code> 的内存都是同一个地址 , 那么一个数据改变其他数据也改变了 , 这当然就不是我们想要的 , 用 <code>return</code> 其实就相当于申明了新的变量 , 相互独立 , 自然就不会有这样的问题</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>定义组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;global-component&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是全局组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;globalComponent&quot;</span>&gt;</span>全局组件按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&quot;global-component&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;#global-component&quot;</span>,</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">num</span>: <span class="number">1</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">globalComponent</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.num++;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>引用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">global-component</span> <span class="attr">class</span>=<span class="string">&quot;global-component&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">global-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">global-component</span> <span class="attr">class</span>=<span class="string">&quot;global-component&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">global-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">global-component</span> <span class="attr">class</span>=<span class="string">&quot;global-component&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">global-component</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>这样各个组件的数据不会相互干扰</strong></p>
<h2 id="使用-components-属性定义局部子组件"><a href="#使用-components-属性定义局部子组件" class="headerlink" title="使用 components 属性定义局部子组件"></a>使用 components 属性定义局部子组件</h2><p>在 <code>Vue</code> 实例里用 <code>components</code> 定义局部组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;&#125;,</span><br><span class="line">  <span class="comment">// 局部组件</span></span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="comment">// 局部组件名</span></span><br><span class="line">    <span class="string">&quot;part-component&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;#part-component&quot;</span>,</span><br><span class="line">      <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">methods</span>: &#123;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>引用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">part-component</span>&gt;</span><span class="tag">&lt;/<span class="name">part-component</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="使用-flag-标识符结合-v-if-和-v-else-切换组件"><a href="#使用-flag-标识符结合-v-if-和-v-else-切换组件" class="headerlink" title="使用 flag 标识符结合 v-if 和 v-else 切换组件"></a>使用 flag 标识符结合 v-if 和 v-else 切换组件</h2><p>定义组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;part-component&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用 flag 标识符结合 v-if 和 v-else 切换组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>&#123;&#123;partComponentMsg1&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>&#123;&#123;partComponentMsg2&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;partComponentClick&quot;</span>&gt;</span>局部组件按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">componentName</span>: <span class="string">&quot;part-component&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;&#125;,</span><br><span class="line">  <span class="comment">// 局部组件</span></span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="string">&quot;part-component&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;#part-component&quot;</span>,</span><br><span class="line">      <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">flag</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">partComponentMsg1</span>: <span class="string">&quot;我是局部组件的数据 1&quot;</span>,</span><br><span class="line">          <span class="attr">partComponentMsg2</span>: <span class="string">&quot;我是局部组件的数据 2&quot;</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="function"><span class="title">partComponentClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.flag = !<span class="built_in">this</span>.flag;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>引用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">part-component</span>&gt;</span><span class="tag">&lt;/<span class="name">part-component</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="使用-is-属性来切换不同的子组件"><a href="#使用-is-属性来切换不同的子组件" class="headerlink" title="使用 :is 属性来切换不同的子组件"></a>使用 <code>:is</code> 属性来切换不同的子组件</h2><p>定义组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;part-component&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&gt;组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>组件按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 <code>data</code> 里定义属性值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">componentName</span>: <span class="string">&quot;part-component&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>引用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用 component 标签 , 来引用组件 , 并通过 :is 属性来指定要加载的组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;componentName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span>  </span><br></pre></td></tr></table></figure>

<h2 id="添加切换动画"><a href="#添加切换动画" class="headerlink" title="添加切换动画"></a>添加切换动画</h2><a class="btn-beautify button--animated green larger" href="https://codehhr.github.io/vue-daily/component-switching.html" 
  title="在线预览"><i class="far fa-hand-point-right"></i><span>在线预览</span></a>

<h3 id="定义组件示例"><a href="#定义组件示例" class="headerlink" title="定义组件示例"></a>定义组件示例</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;login&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;register&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&quot;login&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;#login&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line">Vue.component(<span class="string">&quot;register&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;#register&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="使用-component-标签-来引用组件-并通过-is-属性来指定要加载的组件"><a href="#使用-component-标签-来引用组件-并通过-is-属性来指定要加载的组件" class="headerlink" title="使用 component 标签 , 来引用组件 , 并通过:is 属性来指定要加载的组件"></a>使用 component 标签 , 来引用组件 , 并通过<code>:is</code> 属性来指定要加载的组件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;comName=&#x27;login&#x27;&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;comName=&#x27;register&#x27;&quot;</span>&gt;</span>个人中心<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">mode</span>=<span class="string">&quot;out-in&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;comName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>默认显示 <code>login</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">comName</span>: <span class="string">&quot;login&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="添加切换样式"><a href="#添加切换样式" class="headerlink" title="添加切换样式"></a>添加切换样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.v-enter</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">40px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">40px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.v-enter-active</span>,</span><br><span class="line"><span class="selector-class">.v-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.5s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
        <category>Vue基础</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Vue 组件</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue ref 的使用</title>
    <url>/2021/07/25/vue/vue-ref/</url>
    <content><![CDATA[<h1 id="获取-dom-节点"><a href="#获取-dom-节点" class="headerlink" title="获取 dom 节点"></a>获取 dom 节点</h1><ul>
<li>给 <code>dom</code> 节点记上 <code>ref</code> 属性 , 可以理解为给 <code>dom</code> 节点起了个名字</li>
<li>加上 <code>ref</code> 之后 , 在 <code>$refs</code> 属性中多了这个元素的引用</li>
<li>通过 <code>Vue</code> 实例的 <code>$refs</code> 属性拿到这个 <code>dom</code> 元素</li>
</ul>
<h1 id="获取组件"><a href="#获取组件" class="headerlink" title="获取组件"></a>获取组件</h1><ul>
<li>给组件记上 <code>ref</code> 属性 , 可以理解为给组件起了个名字</li>
<li>加上 <code>ref</code> 之后 , 在 <code>$refs</code> 属性中多了这个组件的引用</li>
<li>通过 <code>Vue</code> 实例的 <code>$refs</code> 属性拿到这个组件的引用 , 之后可以通过这个引用调用子组件的方法 , 或者获取子组件的数据</li>
</ul>
<h1 id="在线预览"><a href="#在线预览" class="headerlink" title="在线预览"></a>在线预览</h1><a class="btn-beautify button--animated green larger" href="https:/vue-daily.netlify.app/ref.html" 
  title="在线预览"><i class="far fa-hand-point-right"></i><span>在线预览</span></a>

<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>Vue ref 的使用</span></div>
    <div class="hide-content"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;script src=&#x27;https://codehhr.github.io/web/vue.js&#x27;&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">ref</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">my-template</span> <span class="attr">ref</span>=<span class="string">&quot;mycomponent&quot;</span> <span class="attr">id</span>=<span class="string">&quot;my-component&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;my-template&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      Vue.config.devtools = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">      Vue.component(<span class="string">&quot;my-template&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">template</span>: <span class="string">&quot;#my-template&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">msg</span>: <span class="string">&quot;myComponent&quot;</span>,</span></span><br><span class="line"><span class="javascript">          &#125;;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelector(<span class="string">&quot;#btn&quot;</span>));</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.btn);</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelector(<span class="string">&quot;#my-component&quot;</span>));</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.mycomponent.msg);</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</div></div>
]]></content>
  </entry>
  <entry>
    <title>Vue 中路由的使用</title>
    <url>/2021/07/25/vue/vue-router/</url>
    <content><![CDATA[<h1 id="什么是路由"><a href="#什么是路由" class="headerlink" title="什么是路由"></a>什么是路由</h1><ul>
<li>后端路由 : 对于普通的网站 , 所有的超链接都是 URL 地址 , 所有的 <code>URL</code> 地址都对应服务器上对应的资源</li>
<li>前端路由 : 对于单页面应用程序来说 , 主要通过 URL 中的 <code>hash</code> ( <code>#</code> 号 ) 来实现不同页面之间的切换 , 同时 , <code>hash</code> 有一个特点 : <code>HTTP</code> 请求中不会包含 <code>hash</code> 相关的内容 ; 所以 , 单页面程序中的页面跳转主要用 <code>hash</code> 实现;</li>
<li>在单页面应用程序中 , 这种通过 <code>hash</code> 改变来切换页面的方式 , 称作前端路由 ( 区别于后端路由 )</li>
</ul>
<a class="btn-beautify button--animated green larger" href="https://router.vuejs.org/zh/" 
  title="中文官网"><i class="far fa-hand-point-right"></i><span>中文官网</span></a>

<h1 id="路由的基本使用"><a href="#路由的基本使用" class="headerlink" title="路由的基本使用"></a>路由的基本使用</h1><ul>
<li>引入 <code>js</code> 文件 , 这个 <code>js</code> 需要放在 <code>vue.js</code>的后面 , 自动安装 ( 提供了一个 <code>VueRouter</code> 的构造方法 )</li>
<li>创建路由 <code>new VueRouter()</code> , 接受的参数是一个对象</li>
<li>在实例化的对象里配置属性 <code>routes:[]</code> , 这个数组里的对象包含 <code>path</code> 属性和 <code>component</code> 属性</li>
<li><code>path</code> 属性是 <code>url</code> , <code>component</code> 属性就是显示的组件 ( 传组件的对象 )</li>
<li>创建的路由需要和 <code>vue</code> 实例关联一下</li>
<li>路由到的组件显示在哪个位置 <code>&lt;router-view&gt;&lt;/router-view&gt;</code></li>
</ul>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>引入 <code>vue-router.js</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue-router/3.5.2/vue-router.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过路由切换的组件会显示在这里 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;login&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> login = &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">template</span>: <span class="string">&quot;#login&quot;</span>,</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 这里实例化了一个路由</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">routes</span>: [</span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">path</span>: <span class="string">&quot;/login&quot;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="comment">//这里需要注意的是直接把组件的对象放在这里</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">component</span>: login,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">      ],</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 把路由挂在到实例上</span></span></span><br><span class="line"><span class="javascript">      <span class="attr">router</span>: router,</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="路由的跳转"><a href="#路由的跳转" class="headerlink" title="路由的跳转"></a>路由的跳转</h1><ul>
<li><code>router-link</code> 标签可以设置 <code>to</code> 属性</li>
<li>默认是 <code>a</code> 标签 , 可以通过 <code>tag</code> 设置包裹标签</li>
</ul>
<p><strong>示例</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/register&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h1><p><code>redirect</code> 可以进行路由的重定向</p>
<a class="btn-beautify button--animated green larger" href="https://vue-daily.netlify.app/vue-router.html" 
  title="在线演示"><i class="far fa-hand-point-right"></i><span>在线演示</span></a>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Blog<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> home = &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&quot;#home&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> blog = &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&quot;#blog&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/home&quot;</span>,</span><br><span class="line">      <span class="attr">redirect</span>: <span class="string">&quot;/blog&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/blog&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: blog,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="选中路由高亮"><a href="#选中路由高亮" class="headerlink" title="选中路由高亮"></a>选中路由高亮</h1><a class="btn-beautify button--animated green larger" href="https://vue-daily.netlify.app/vue-router.html" 
  title="在线演示"><i class="far fa-hand-point-right"></i><span>在线演示</span></a>

<ul>
<li>使用默认的样式<br>直接设置 <code>.router-link-active</code></li>
<li>自定义样式<br>配置  <code>linkActiveClass:&#39;自定义的类名&#39;</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/index&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: index,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">linkActiveClass</span>: <span class="string">&quot;router-active&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="定义参数"><a href="#定义参数" class="headerlink" title="定义参数"></a>定义参数</h1><h2 id="通过-query-的方式在-url-后加-参数名-参数的值"><a href="#通过-query-的方式在-url-后加-参数名-参数的值" class="headerlink" title="通过 query 的方式在 url 后加 ?参数名=参数的值"></a>通过 <code>query</code> 的方式在 <code>url</code> 后加 <code>?参数名=参数的值</code></h2><p>获取参数 : <code>$route.query.参数名</code></p>
<h2 id="使用浏览器参数的方式传递参数"><a href="#使用浏览器参数的方式传递参数" class="headerlink" title="使用浏览器参数的方式传递参数"></a>使用浏览器参数的方式传递参数</h2><ul>
<li>设置路由的时候 <code>/路由地址/:参数名</code></li>
<li>获取参数 <code>$route.params.参数名</code></li>
</ul>
<h1 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h1><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>路由传惨</span></div>
    <div class="hide-content"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue-router/3.5.2/vue-router.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;script src=&#x27;https://codehhr.github.io/web/vue.js&#x27;&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-id">#app</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">1200px</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.router-link-active</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: <span class="number">#5e6466</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">2px</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">a</span><span class="selector-class">.router-active</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-weight</span>: <span class="number">800</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: <span class="number">#5e6466</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/index&quot;</span>&gt;</span>Index<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/blog?categories=vue&amp;tag=vue-touter&quot;</span>&gt;</span>Blog<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- &lt;router-link :to=&quot;&#123;path:&#x27;/about?page=2&#x27;&#125;&quot;&gt;About&lt;/router-link&gt; --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:to</span>=<span class="string">&quot;&#123;path:&#x27;/about&#x27;,query:&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">          id:1,</span></span></span><br><span class="line"><span class="string"><span class="tag">          page:2</span></span></span><br><span class="line"><span class="string"><span class="tag">      &#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span>About&lt;/router-link</span><br><span class="line">      &gt;</span><br><span class="line">      <span class="comment">&lt;!-- 观察地址变化 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in list&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">        path:&#x27;/about&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">        query:&#123;id:item.id,page:item.content&#125;</span></span></span><br><span class="line"><span class="string"><span class="tag">      &#125;&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        &#123;&#123;item.content&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name:&#x27;detail&#x27;,params:&#123;id:2&#125;&#125;&quot;</span>&gt;</span>Detail<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Index<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;about&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>About<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Blog<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;detail&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Detail<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> index = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">template</span>: <span class="string">&quot;#index&quot;</span>,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> home = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">template</span>: <span class="string">&quot;#home&quot;</span>,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> about = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">template</span>: <span class="string">&quot;#about&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="built_in">this</span>.$route.query);</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> blog = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">template</span>: <span class="string">&quot;#blog&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="built_in">this</span>.$route.query);</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> detail = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">template</span>: <span class="string">&quot;#detail&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="built_in">this</span>.$route.params);</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">routes</span>: [</span></span><br><span class="line"><span class="javascript">          &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">path</span>: <span class="string">&quot;/index&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">component</span>: index,</span></span><br><span class="line"><span class="javascript">          &#125;,</span></span><br><span class="line"><span class="javascript">          &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">path</span>: <span class="string">&quot;/home&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">component</span>: home,</span></span><br><span class="line"><span class="javascript">          &#125;,</span></span><br><span class="line"><span class="javascript">          &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">path</span>: <span class="string">&quot;/blog&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">component</span>: blog,</span></span><br><span class="line"><span class="javascript">          &#125;,</span></span><br><span class="line"><span class="javascript">          &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">path</span>: <span class="string">&quot;/about&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">component</span>: about,</span></span><br><span class="line"><span class="javascript">          &#125;,</span></span><br><span class="line"><span class="javascript">          &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">path</span>: <span class="string">&quot;/detail/:id&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">component</span>: detail,</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>: <span class="string">&quot;detail&quot;</span>,</span></span><br><span class="line"><span class="javascript">          &#125;,</span></span><br><span class="line"><span class="javascript">        ],</span></span><br><span class="line"><span class="javascript">        <span class="attr">linkActiveClass</span>: <span class="string">&quot;router-active&quot;</span>,</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">list</span>: [</span></span><br><span class="line"><span class="javascript">            &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">content</span>: <span class="string">&quot;A&quot;</span> &#125;,</span></span><br><span class="line"><span class="javascript">            &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">content</span>: <span class="string">&quot;B&quot;</span> &#125;,</span></span><br><span class="line"><span class="javascript">            &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">content</span>: <span class="string">&quot;C&quot;</span> &#125;,</span></span><br><span class="line"><span class="javascript">          ],</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 把路由挂在到实例上</span></span></span><br><span class="line"><span class="javascript">        router,</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</div></div>
]]></content>
      <categories>
        <category>Vue</category>
        <category>Vue基础</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Vue-router</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue slot 插槽</title>
    <url>/2021/07/24/vue/vue-slot/</url>
    <content><![CDATA[<h1 id="什么是插槽"><a href="#什么是插槽" class="headerlink" title="什么是插槽"></a>什么是插槽</h1><div class="note blue no-icon flat"><p>插槽就是子组件中的提供给父组件使用的一个占位符 , 用<code>&lt;slot&gt;&lt;/slot&gt;</code> 表示 , 父组件可以在这个占位符中填充任何模板代码 , 如 <code>HTML</code>、<code>组件</code>等 , 填充的内容会替换子组件的<code>&lt;slot&gt;&lt;/slot&gt;</code>标签</p>
</div>

<h1 id="插槽的使用"><a href="#插槽的使用" class="headerlink" title="插槽的使用"></a>插槽的使用</h1><h2 id="在子组件中放一个占位符"><a href="#在子组件中放一个占位符" class="headerlink" title="在子组件中放一个占位符"></a>在子组件中放一个占位符</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个子组件</span></span><br><span class="line">Vue.component(<span class="string">&quot;child&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;#child&quot;</span>,</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">childMsg</span>: <span class="string">&quot;我是子组件的内容&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在子组件中放一个占位符 start --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在子组件中放一个占位符 end --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;childMsg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="在父组件中给这个占位符填充内容"><a href="#在父组件中给这个占位符填充内容" class="headerlink" title="在父组件中给这个占位符填充内容"></a>在父组件中给这个占位符填充内容</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&quot;我是父组件的内容&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在父组件中给这个占位符填充内容 start --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在父组件中给这个占位符填充内容 end --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<a class="btn-beautify button--animated green larger" href="https://codehhr.github.io/vue-daily/slot.html" 
  title="展示效果"><i class="far fa-hand-point-right"></i><span>展示效果</span></a>

<h2 id="现在来看看-如果子组件中没有放插槽-同样的父组件中在子组件中填充内容-会是啥样的"><a href="#现在来看看-如果子组件中没有放插槽-同样的父组件中在子组件中填充内容-会是啥样的" class="headerlink" title="现在来看看 , 如果子组件中没有放插槽 , 同样的父组件中在子组件中填充内容 , 会是啥样的"></a>现在来看看 , 如果子组件中没有放插槽 , 同样的父组件中在子组件中填充内容 , 会是啥样的</h2><h3 id="子组件代码无插槽"><a href="#子组件代码无插槽" class="headerlink" title="子组件代码无插槽"></a>子组件代码无插槽</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;childMsg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="父组件照常填充内容"><a href="#父组件照常填充内容" class="headerlink" title="父组件照常填充内容"></a>父组件照常填充内容</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 父组件填充内容 start --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 父组件填充内容 end --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>最后结果是不会渲染上去</strong></p>
<h2 id="总结-如果子组件没有使用插槽-父组件如果需要往子组件中填充模板或者-html-是没法做到的"><a href="#总结-如果子组件没有使用插槽-父组件如果需要往子组件中填充模板或者-html-是没法做到的" class="headerlink" title="总结 : 如果子组件没有使用插槽 , 父组件如果需要往子组件中填充模板或者 html 是没法做到的"></a>总结 : 如果子组件没有使用插槽 , 父组件如果需要往子组件中填充模板或者 <code>html</code> 是没法做到的</h2><h1 id="具名插槽-和-默认插槽"><a href="#具名插槽-和-默认插槽" class="headerlink" title="具名插槽 和 默认插槽"></a>具名插槽 和 默认插槽</h1><a class="btn-beautify button--animated green larger" href="https://codehhr.github.io/vue-daily/slot-name.html" 
  title="展示效果"><i class="far fa-hand-point-right"></i><span>展示效果</span></a>

<div style="height:20px"></div>

<div class="tabs" id="slot"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#slot-1">具名插槽</button></li><li class="tab"><button type="button" data-href="#slot-2">默认插槽</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="slot-1"><div class="note blue no-icon flat"><p>描述 : 具名插槽其实就是给插槽取个名字 , 一个子组件可以放多个插槽 , 而且可以放在不同的地方 , 而父组件填充内容时 , 可以根据这个名字把内容填充到对应插槽中</p>
</div>

<h2 id="子组件设置两个插槽-header-footer"><a href="#子组件设置两个插槽-header-footer" class="headerlink" title="子组件设置两个插槽 ( header , footer )"></a>子组件设置两个插槽 ( header , footer )</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&quot;child&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;#child&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="父组件填充内容"><a href="#父组件填充内容" class="headerlink" title="父组件填充内容"></a>父组件填充内容</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">header</span>: <span class="string">&quot;我是父组件的 Header&quot;</span>,</span><br><span class="line">    <span class="attr">footer</span>: <span class="string">&quot;我是父组件的 Footer&quot;</span>,</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&quot;父组件内容,不指定插槽名字,填充到默认插槽&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>父组件通过 <code>v-slot:name</code> 的方式指定到对应的插槽中</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;//h.codehhr.cn&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;header&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;//h.codehhr.cn&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;footer&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>即使父组件对插槽的填充的顺序打乱 , 只要名字对应上了 , 就可以正确渲染到对应的插槽中 , 即 : 父组件填充内容时 , 是可以根据这个名字把内容填充到对应插槽中的</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="slot-2"><div class="note blue no-icon flat"><p>描述 : 默认插槽就是指没有名字的插槽 , 子组件未定义的名字的插槽 , 父级将会把未指定插槽的填充的内容填充到默认插槽中</p>
</div>

<h2 id="子组件代码定义了一个默认插槽"><a href="#子组件代码定义了一个默认插槽" class="headerlink" title="子组件代码定义了一个默认插槽"></a>子组件代码定义了一个默认插槽</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 默认插槽 start --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 默认插槽 end --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&quot;child&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;#child&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="父组件上定义一个-msg-变量"><a href="#父组件上定义一个-msg-变量" class="headerlink" title="父组件上定义一个 msg 变量"></a>父组件上定义一个 <code>msg</code> 变量</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&quot;父组件内容,不指定插槽名字,填充到默认插槽&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="父组件给默认插槽填充内容"><a href="#父组件给默认插槽填充内容" class="headerlink" title="父组件给默认插槽填充内容"></a>父组件给默认插槽填充内容</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;//h.codehhr.cn&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 父级的填充内容如果指定到子组件的没有对应名字插槽 , 那么该内容不会被填充到默认插槽中 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里指定 body 名字的内容就不会填充到默认插槽里 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;//h.codehhr.cn&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>父级的填充内容如果指定到子组件的没有对应名字插槽 , 那么该内容 <code>不会</code> 被填充到默认插槽中</li>
<li>如果子组件没有默认插槽 , 而父级的填充内容指定到默认插槽中 , 那么该内容就 <code>不会</code> 填充到子组件的任何一个插槽中</li>
<li>如果子组件有多个默认插槽 , 而父组件所有指定到默认插槽的填充内容 , 将 <code>会</code> <code>全都</code> 填充到子组件的每个默认插槽中</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
        <category>Vue基础</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Vue slot 插槽</tag>
      </tags>
  </entry>
  <entry>
    <title>Vuex</title>
    <url>/2021/07/31/vue/vuex/</url>
    <content><![CDATA[<h1 id="Vuex-是一个专为-Vue-js-应用程序开发的状态管理模式"><a href="#Vuex-是一个专为-Vue-js-应用程序开发的状态管理模式" class="headerlink" title="Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式"></a>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式</h1><ul>
<li><code>state</code> , 驱动应用的数据源</li>
<li><code>view</code> , 以声明方式将 state 映射到视图</li>
<li><code>actions</code> , 响应在 view 上的用户输入导致的状态变化</li>
</ul>
<p><strong>以下是一个表示“单向数据流”理念的简单示意</strong><br><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vuebasic/vuexstate.png" alt="state_view_actions"></p>
<p>但是 , 当我们的应用遇到多个组件共享状态时 , 单向数据流的简洁性很容易被破坏 :</p>
<ul>
<li>多个视图依赖于同一状态</li>
<li>来自不同视图的行为需要变更同一状态</li>
</ul>
<p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vuebasic/vuex.png" alt="vuex"></p>
<h1 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h1><h1 id="State"><a href="#State" class="headerlink" title="State"></a>State</h1><h2 id="在-Vue-组件中获得-Vuex-状态"><a href="#在-Vue-组件中获得-Vuex-状态" class="headerlink" title="在 Vue 组件中获得 Vuex 状态"></a>在 <code>Vue</code> 组件中获得 <code>Vuex</code> 状态</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 比如创建一个组件</span></span><br><span class="line"><span class="keyword">const</span> componentA = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;div&gt;&#123;&#123; valueA &#125;&#125;&lt;/div&gt;`</span>,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">valueA</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> store.state.valueA;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>每当 <code>store.state.valueA</code> 变化的时候, 都会重新求取计算属性 , 并且触发更新相关联的 <code>DOM</code></p>
<p>然而 , 这种模式导致组件依赖全局状态单例 ,在模块化的构建系统中 , 在每个需要使用 <code>state</code> 的组件中需要频繁地导入 , 并且在测试组件时需要模拟状态。</p>
<p><code>Vuex</code> 通过 <code>store</code> 选项 , 提供了一种机制将状态从根组件 <code>注入</code> 到每一个子组件中 ( 需调用 <code>Vue.use(Vuex)</code> )</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="comment">// 把 store 对象提供给 &quot;store&quot; 选项 , 这可以把 store 的实例注入所有的子组件</span></span><br><span class="line">  store,</span><br><span class="line">  <span class="attr">components</span>: &#123; componentA &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;app&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;componentA&gt;&lt;/componentA&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="mapState-辅助函数"><a href="#mapState-辅助函数" class="headerlink" title="mapState 辅助函数"></a>mapState 辅助函数</h3><p>当一个组件需要获取多个状态的时候 , 将这些状态都声明为计算属性会有些重复和冗余 , 为了解决这个问题 , 我们可以使用 <code>mapState</code> 辅助函数帮助我们生成计算属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    ...mapState(&#123;</span><br><span class="line">      <span class="attr">valueA</span>: <span class="string">&quot;valueA&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h1><p>有时候我们需要从 <code>store</code> 中的 <code>state</code> 中派生出一些状态 , 例如对列表进行过滤并计数:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  doneTodosCount () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.$store.state.todos.filter(<span class="function"><span class="params">todo</span> =&gt;</span> todo.done).length</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Vuex</code> 允许我们在 <code>store</code> 中定义 <code>getter</code> ( 可以认为是 <code>store</code> 的计算属性 ) , 就像计算属性一样 , <code>getter</code> 的返回值会根据它的依赖被缓存起来 , 且只有当它的依赖值发生了改变才会被重新计算</p>
<p><code>Getter</code> 接受 <code>state</code> 作为其第一个参数 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">todos</span>: [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">&quot;...&quot;</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">&quot;...&quot;</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="attr">doneTodos</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.todos.filter(<span class="function">(<span class="params">todo</span>) =&gt;</span> todo.done);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="mapGetters-辅助函数"><a href="#mapGetters-辅助函数" class="headerlink" title="mapGetters 辅助函数"></a>mapGetters 辅助函数</h3><p><code>mapGetters</code> 辅助函数仅仅是将 <code>store</code> 中的 <code>getter</code> 映射到局部计算属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">// 使用对象展开运算符将 getter 混入 computed 对象中</span></span><br><span class="line">    ...mapGetters([</span><br><span class="line">      <span class="string">&quot;doneTodosCount&quot;</span>,</span><br><span class="line">      <span class="string">&quot;anotherGetter&quot;</span>,</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    ]),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如果你想将一个 <code>getter</code> 属性另取一个名字 , 使用对象形式 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...mapGetters(&#123;</span><br><span class="line">  <span class="comment">// 把 `this.doneCount` 映射为 `this.$store.getters.doneTodosCount`</span></span><br><span class="line">  <span class="attr">doneCount</span>: <span class="string">&#x27;doneTodosCount&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h1><p>更改 <code>Vuex</code> 的 <code>store</code> 中的状态的唯一方法是提交 <code>mutation</code></p>
<h2 id="提交载荷-Payload"><a href="#提交载荷-Payload" class="headerlink" title="提交载荷( Payload )"></a>提交载荷( <code>Payload</code> )</h2><p>你可以向 <code>store.commit</code> 传入额外的参数 , 即 <code>mutation</code> 的 载荷 ( `payload ) :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$store.commit(<span class="string">&quot;increment&quot;</span>, payload);</span><br></pre></td></tr></table></figure>

<p>在大多数情况下 , 载荷应该是一个对象 , 这样可以包含多个字段并且记录的 <code>mutation</code> 会更易读 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">store.commit(<span class="string">&quot;increment&quot;</span>, &#123; <span class="attr">amount</span>: <span class="number">10</span> &#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line">  increment (state, payload) &#123;</span><br><span class="line">    state.count = payload.amount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h1><p><code>Action</code> 类似于 <code>mutation</code> , 不同在于 :</p>
<ul>
<li><code>Action</code> 提交的是 <code>mutation</code> , 而不是直接变更状态</li>
<li><code>Action</code> 可以包含任意异步操作</li>
</ul>
<p><code>Action</code> 函数接受一个与 <code>store</code> 实例具有相同方法和属性的 <code>context</code> 对象 , 因此你可以调用 <code>context.commit</code> 提交一个 <code>mutation</code> , 或者通过 <code>context.state</code> 和 <code>context.getters</code> 来获取 <code>state</code> 和 <code>getters</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  increment (context,payload) &#123;</span><br><span class="line">     context.commit(<span class="string">&#x27;increment&#x27;</span>,payload)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>乍一眼看上去感觉多此一举 , 我们直接分发 <code>mutation</code> 岂不更方便 ? 实际上并非如此 , 还记得 <code>mutation</code> 必须同步执行这个限制么 ? <code>Action</code> 就不受约束 ! 我们可以在 <code>action</code> 内部执行异步操作 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  increment (context,payload) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      context.commit(<span class="string">&#x27;increment&#x27;</span>,payload)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Actions</code> 支持同样的载荷方式和对象方式进行分发 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以载荷形式分发</span></span><br><span class="line"><span class="built_in">this</span>.$store.dispatch(<span class="string">&quot;incrementAsync&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">amount</span>: <span class="number">10</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以对象形式分发</span></span><br><span class="line"><span class="built_in">this</span>.$store.dispatch(&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;incrementAsync&quot;</span>,</span><br><span class="line">  <span class="attr">amount</span>: <span class="number">10</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h1><p>由于使用单一状态树 , 应用的所有状态会集中到一个比较大的对象 , 当应用变得非常复杂时 , <code>store</code> 对象就有可能变得相当臃肿<br>为了解决以上问题 , <code>Vuex</code> 允许我们将 <code>store</code> 分割成模块 ( <code>module</code> ) , 每个模块拥有自己的 <code>state</code>、<code>mutation</code>、<code>action</code>、<code>getter</code>、甚至是嵌套子模块——从上至下进行同样方式的分割:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123; ... &#125;),</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123; ... &#125;),</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    <span class="attr">a</span>: moduleA,</span><br><span class="line">    <span class="attr">b</span>: moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.state.a <span class="comment">// -&gt; moduleA 的状态</span></span><br><span class="line">store.state.b <span class="comment">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure>

<h2 id="模块的局部状态"><a href="#模块的局部状态" class="headerlink" title="模块的局部状态"></a>模块的局部状态</h2><p>对于模块内部的 <code>mutation</code> 和 <code>getter</code> , 接收的第一个参数是模块的局部状态对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">increment</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 这里的 `state` 对象是模块的局部状态</span></span><br><span class="line">      state.count++;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">doubleCount</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.count * <span class="number">2</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>同样 , 对于模块内部的 action , 局部状态通过 <code>context.state</code> 暴露出来 , 根节点状态则为 <code>context.rootState</code> :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">incrementIfOddOnRootSum</span>(<span class="params">&#123; state, commit, rootState &#125;</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> ((state.count + rootState.count) % <span class="number">2</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        commit(<span class="string">&quot;increment&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>如果希望你的模块具有更高的封装度和复用性 , 你可以通过添加 <code>namespaced</code>: <code>true</code> 的方式使其成为带命名空间的模块。当模块被注册后 , 它的所有 <code>getter</code>、<code>action</code> 及 <code>mutation</code> 都会自动根据模块注册的路径调整命名 ,例如 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    <span class="attr">account</span>: &#123;</span><br><span class="line">      <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 模块内容（module assets）</span></span><br><span class="line">      <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123; ... &#125;), <span class="comment">// 模块内的状态已经是嵌套的了 , 使用 `namespaced` 属性不会对其产生影响</span></span><br><span class="line">      <span class="attr">getters</span>: &#123;</span><br><span class="line">        isAdmin () &#123; ... &#125; <span class="comment">// -&gt; getters[&#x27;account/isAdmin&#x27;]</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">actions</span>: &#123;</span><br><span class="line">        login () &#123; ... &#125; <span class="comment">// -&gt; dispatch(&#x27;account/login&#x27;)</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">mutations</span>: &#123;</span><br><span class="line">        login () &#123; ... &#125; <span class="comment">// -&gt; commit(&#x27;account/login&#x27;)</span></span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 嵌套模块</span></span><br><span class="line">      <span class="attr">modules</span>: &#123;</span><br><span class="line">        <span class="comment">// 继承父模块的命名空间</span></span><br><span class="line">        <span class="attr">myPage</span>: &#123;</span><br><span class="line">          <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123; ... &#125;),</span><br><span class="line">          <span class="attr">getters</span>: &#123;</span><br><span class="line">            profile () &#123; ... &#125; <span class="comment">// -&gt; getters[&#x27;account/profile&#x27;]</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 进一步嵌套命名空间</span></span><br><span class="line">        <span class="attr">posts</span>: &#123;</span><br><span class="line">          <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">          <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123; ... &#125;),</span><br><span class="line">          <span class="attr">getters</span>: &#123;</span><br><span class="line">            popular () &#123; ... &#125; <span class="comment">// -&gt; getters[&#x27;account/posts/popular&#x27;]</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
        <category>Vue脚手架</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 生命周期 和 Vue-resource</title>
    <url>/2021/07/21/vue/vue-lifecycle-and-vue-resource/</url>
    <content><![CDATA[<h1 id="什么是生命周期"><a href="#什么是生命周期" class="headerlink" title="什么是生命周期"></a>什么是生命周期</h1><p>从 <code>Vue</code> 实例创建 , 运行 , 到销毁期间 , 总是伴随着各种各样的事件 , 这些事件 , 统称为生命周期 !</p>
<h1 id="vue-生命周期钩子函数"><a href="#vue-生命周期钩子函数" class="headerlink" title="vue 生命周期钩子函数"></a>vue 生命周期钩子函数</h1><p>每个 <code>Vue</code> 实例在被创建时都要经过一系列的初始化过程——例如 , 需要设置数据监听 , 编译模板 , 将实例挂载到 <code>DOM</code> 并在数据变化时更新 <code>DOM</code> 等 , 同时在这个过程中也会运行一些叫做生命周期钩子的函数 , 这给了用户在不同阶段添加自己的代码的机会</p>
<p><strong><code>生命周期函数</code>=<code>生命周期事件</code>=<code>生命周期钩子</code></strong></p>
<h1 id="vue-生命周期"><a href="#vue-生命周期" class="headerlink" title="vue 生命周期"></a>vue 生命周期</h1><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vuebasic/vuelifecycle.png" alt="vue 生命周期"></p>
<p><strong>详解</strong></p>
<p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vuebasic/vuelifecycledetail.png" alt="vue 生命周期"></p>
<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>Vue生命周期函数</span></div>
    <div class="hide-content"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入 Vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">msg</span>: <span class="string">&quot;Hello World&quot;</span>,</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 这是我们遇到的第一个生命周期函数</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 在 beforeCrate 生命周期函数执行的时候, data 和 methods 中的数据还没初始化</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;beforeCreate&quot;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.msg); <span class="comment">// -&gt; undefined</span></span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 此时 data 和 methods 中的数据已经好了始化</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 如果要调用 methods 中的方法或操作 data 里的数据,最早只能在 created 中操作</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;created&quot;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.msg); <span class="comment">// -&gt; Hello World</span></span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">beforeMount</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 此时模板已在内存中编译好了,还未渲染到页面上,页面还是旧的</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;beforeMount&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 执行完 mounted ,就表示这个 Vue 示例已经初始化完毕了</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 如果要通过某些插件操作页面上的 DOM 节点,最早要在 mounted 中进行</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;mounted&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">beforeUpdate</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 当 data 里的数据改变后会执行 beforeUpdate</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 此时页面显示的数据还是旧的, data 里的数据是最新的,页面尚未和数据保持同步</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;beforeUpdate&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// beforeUpdate 执行后,在内存里会渲染出一份最新的 内存 DOM 树,会重新渲染到真是的页面上去</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 这时候,就完成了数据从 data(model层) -&gt; view(视图层) 的更新</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">updated</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// updated 执行的时候,页面和 data 数据已经保持同步了,都是最新的</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;updated&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">beforeDestroy</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 准备销毁实例</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 此时还没有真正的执行销毁,还处于可用的状态</span></span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">destroyed</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 当执行到 destroyed函数的时候,组件已经被完全销毁了,data,methods,指令,过滤器...已经不可用了</span></span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</div></div>

<h1 id="vue-resource-的使用"><a href="#vue-resource-的使用" class="headerlink" title="vue-resource 的使用"></a>vue-resource 的使用</h1><ul>
<li>直接在页面中 , 通过 <code>script</code> 标签 , 引入 <code>vue-resource</code> 的脚本文件 ;</li>
<li>注意：引用的先后顺序是: 先引用 <code>Vue</code> 的脚本文件 , 再引用 <code>vue-resource</code> 的脚本文件</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入 vue.js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入 vue-resource.js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue-resource/1.5.3/vue-resource.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>如果想在页面加载的时候就请求,可以写在 <code>update</code> 生命周期函数里</strong></p>
<h2 id="get-请求"><a href="#get-请求" class="headerlink" title="get 请求"></a>get 请求</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// get 请求</span></span><br><span class="line"><span class="built_in">this</span>.$http</span><br><span class="line">  .get(<span class="string">&quot;http://wkt.myhope365.com/weChat/applet/course/banner/list?number=2&quot;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="post-请求"><a href="#post-请求" class="headerlink" title="post 请求"></a>post 请求</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// post请求</span></span><br><span class="line"><span class="comment">// post 方法接收三个参数：</span></span><br><span class="line"><span class="comment">//    参数1： 要请求的 URL 地址</span></span><br><span class="line"><span class="comment">//    参数2： 要发送的数据对象</span></span><br><span class="line"><span class="comment">//    参数3： 指定 post 提交的编码类型为 application/x-www-form-urlencoded 或 application/json</span></span><br><span class="line"><span class="built_in">this</span>.$http</span><br><span class="line">  .post(</span><br><span class="line">    <span class="string">&quot;http://wkt.myhope365.com/weChat/applet/subject/list&quot;</span>,</span><br><span class="line">    &#123; <span class="attr">enable</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">emulateJSON</span>: <span class="literal">false</span> &#125;</span><br><span class="line">  )</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
      <categories>
        <category>Vue</category>
        <category>Vue基础</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Vue 生命周期</tag>
        <tag>Vue-resource</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack 打包初体验</title>
    <url>/2021/09/17/webpack/webpack-first/</url>
    <content><![CDATA[<h1 id="安装-Webpack"><a href="#安装-Webpack" class="headerlink" title="安装 Webpack"></a>安装 Webpack</h1><p>直接全局安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install webpack webpack-cli -g</span><br></pre></td></tr></table></figure>

<h1 id="初始化-package-json"><a href="#初始化-package-json" class="headerlink" title="初始化 package.json"></a>初始化 package.json</h1><p><code>-y</code> 参数就是 <code>yes</code> , 省得一路回车</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure>

<h1 id="试着打包几个文件"><a href="#试着打包几个文件" class="headerlink" title="试着打包几个文件"></a>试着打包几个文件</h1><p>比如按照 <code>Vue</code> 框架的目录 , 创建一个 <code>src</code> 的子文件夹 , 在 <code>src</code> 里面创建一个 <code>index.js</code> 和 <code>data.js</code> 的文件 , <strong>把 <code>index.js</code> 但当作入口文件</strong></p>
<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><ul>
<li>project<ul>
<li>src<ul>
<li>index.js</li>
<li>data.js</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="文件内容"><a href="#文件内容" class="headerlink" title="文件内容"></a>文件内容</h2><p>随便写点东西</p>
<h3 id="data-json"><a href="#data-json" class="headerlink" title="data.json"></a>data.json</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">job</span>: <span class="string">&quot;Coding every day&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 data.json</span></span><br><span class="line"><span class="keyword">import</span> data <span class="keyword">from</span> <span class="string">&quot;./date&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;这是 index.js&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br></pre></td></tr></table></figure>

<h1 id="安装-Webpack-依赖"><a href="#安装-Webpack-依赖" class="headerlink" title="安装 Webpack 依赖"></a>安装 Webpack 依赖</h1><p><code>-S</code> 就是 <code>--save</code> , 用于生产环境 , <code>-D</code> 就是 <code>--dev</code> , 用户开发环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install webpack webpack-cli -S -D</span><br></pre></td></tr></table></figure>

<h1 id="打包为开发-生产-环境"><a href="#打包为开发-生产-环境" class="headerlink" title="打包为开发(生产)环境"></a>打包为开发(生产)环境</h1><p><strong>不同版本的 <code>webpack</code> 打包的命令参数还不太一样</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">webpack --entry ./src/index.js --mode development</span><br></pre></td></tr></table></figure>

<p><code>--entry</code> 为入口文件 , <code>-o</code> 可以指定输出路径, <code>--mode</code> 指定打包模式 , <code>development</code> 为开发环境模式 , <code>production</code> 为生产环境模式 , 也就是上线用的 ( 压缩的 )</p>
]]></content>
      <categories>
        <category>Webpack</category>
      </categories>
      <tags>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>配置 loader 进行 css 打包</title>
    <url>/2021/09/20/webpack/webpack-loader/</url>
    <content><![CDATA[<div class="note info flat"><p><code>Webpack</code> 原生支持 <code>js</code> 和 <code>json</code> , 可以使用 <code>loader</code> 告诉 <code>webpack</code> 加载 <code>CSS</code> 文件 , 或者将 <code>TypeScript</code> 转为 <code>JavaScript</code></p>
</div>

<h1 id="安装相对应的-loader"><a href="#安装相对应的-loader" class="headerlink" title="安装相对应的 loader"></a>安装相对应的 loader</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install style-loader css-loader -S -D</span><br></pre></td></tr></table></figure>

<h1 id="引入-CSS"><a href="#引入-CSS" class="headerlink" title="引入 CSS"></a>引入 CSS</h1><p>在入口文件里使用 <code>import</code> 引入 <code>css</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;./style.css&quot;</span>;</span><br></pre></td></tr></table></figure>

<h1 id="loader-的配置"><a href="#loader-的配置" class="headerlink" title="loader 的配置"></a>loader 的配置</h1><p>在 <code>webpack.config.js</code> 里添加配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  <span class="comment">// 对某个格式的文件进行转换</span></span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 正则匹配</span></span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      <span class="comment">// style-loader 将 js 的样式内容插入</span></span><br><span class="line">      <span class="comment">// css-loader 将 css 转换为 js</span></span><br><span class="line">      <span class="comment">// use 数组里 loader 解析的顺序是从后往前 (逆序)</span></span><br><span class="line">      use: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">  ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>目前 <code>webpack.config.js</code> 的完整配置是</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 入口文件</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/index.js&quot;</span>,</span><br><span class="line">  <span class="comment">// 输出</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="comment">// 输出文件名</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;pack.js&quot;</span>,</span><br><span class="line">    <span class="comment">// 输出路径 (绝对路径)</span></span><br><span class="line">    <span class="comment">// 利用 path 模块获取当前路径</span></span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 打包模式; 开发环境--development, 生产环境--production</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="comment">// 对某个格式的文件进行转换</span></span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 正则匹配</span></span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">// style-loader 将 js 的样式内容插入</span></span><br><span class="line">        <span class="comment">// css-loader 将 css 转换为 js</span></span><br><span class="line">        <span class="comment">// use 数组里 loader 解析的顺序是从后往前 (逆序)</span></span><br><span class="line">        use: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="尝试打包"><a href="#尝试打包" class="headerlink" title="尝试打包"></a>尝试打包</h1><p>在根目录 (<code>webpack.config.js</code> 所在路径) 下直接输入 <code>webpack</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">webpack</span><br></pre></td></tr></table></figure>

<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>在 <code>html</code> 文件里引入打包好的 <code>js</code> 文件 , 用浏览器打开验证 <code>样式</code> 是否生效</p>
]]></content>
      <categories>
        <category>Webpack</category>
      </categories>
      <tags>
        <tag>Webpack</tag>
        <tag>loader</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack 使用配置文件打包</title>
    <url>/2021/09/19/webpack/webpack-use-config/</url>
    <content><![CDATA[<h1 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h1><p>创建 <code>webpack.config.js</code> 文件 , 一般放在项目根目录下</p>
<h2 id="文件内容"><a href="#文件内容" class="headerlink" title="文件内容"></a>文件内容</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 入口文件</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/index.js&quot;</span>,</span><br><span class="line">  <span class="comment">// 输出</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="comment">// 输出文件名</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;pack.js&quot;</span>,</span><br><span class="line">    <span class="comment">// 输出路径 (绝对路径)</span></span><br><span class="line">    <span class="comment">// 利用 path 模块获取当前路径</span></span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 打包模式; 开发环境--development, 生产环境--production</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="试着打包"><a href="#试着打包" class="headerlink" title="试着打包"></a>试着打包</h2><p>终端下直接输入 <code>webpack</code> , 这次不用输入参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">webpack</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Webpack</category>
      </categories>
      <tags>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序 背景音乐</title>
    <url>/2020/12/03/wxapp/wxapp-ctrlmusic/</url>
    <content><![CDATA[<h1 id="微信小程序背景音乐"><a href="#微信小程序背景音乐" class="headerlink" title="微信小程序背景音乐"></a>微信小程序背景音乐</h1><h2 id="直接上代码"><a href="#直接上代码" class="headerlink" title="直接上代码"></a>直接上代码</h2><h3 id="wxml"><a href="#wxml" class="headerlink" title="wxml"></a>wxml</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- music --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;music &#123;&#123;isplay?&#x27;playing&#x27;:&#x27;&#x27;&#125;&#125;&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;ctrlMusic&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;musicimg&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="wxss"><a href="#wxss" class="headerlink" title="wxss"></a>wxss</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* music */</span></span><br><span class="line"><span class="selector-class">.music</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#000000</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">96</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">96</span>rpx;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 音符旋转动画 */</span></span><br><span class="line"><span class="selector-class">.playing</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: rotate <span class="number">2s</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> rotate &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 音符 */</span></span><br><span class="line"><span class="selector-class">.music</span> image &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">80%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">musicimg</span>: <span class="string">&quot;/img/music.png&quot;</span>, <span class="comment">//背景音乐符号图片</span></span><br><span class="line">    <span class="attr">isplay</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 控制背景音乐</span></span><br><span class="line">  <span class="attr">ctrlMusic</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> backgroundAudioManager = wx.getBackgroundAudioManager();</span><br><span class="line">    backgroundAudioManager.title = <span class="string">&quot;New Life&quot;</span>;</span><br><span class="line">    backgroundAudioManager.epname = <span class="string">&quot;New Life&quot;</span>;</span><br><span class="line">    backgroundAudioManager.singer = <span class="string">&quot;Peter Jeremias&quot;</span>;</span><br><span class="line">    backgroundAudioManager.coverImgUrl =</span><br><span class="line">      <span class="string">&quot;https://ae01.alicdn.com/kf/Ud08f63ccb57b41988e5921036e61bca2r.jpg&quot;</span>;</span><br><span class="line">    backgroundAudioManager.src = <span class="string">&quot;https://codehhr.gitee.io/musics/new_life.mp3&quot;</span>;</span><br><span class="line">    <span class="comment">// 播放</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.data.isplay) &#123;</span><br><span class="line">      <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">        <span class="attr">isplay</span>: !<span class="built_in">this</span>.data.isplay,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;music playing !&quot;</span>);</span><br><span class="line">      <span class="comment">// 结束时循环</span></span><br><span class="line">      backgroundAudioManager.onEnded(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;music end !&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">          <span class="attr">isplay</span>: !<span class="built_in">this</span>.data.isplay,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;music replay !&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.ctrlMusic();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 暂停</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">        <span class="attr">isplay</span>: !<span class="built_in">this</span>.data.isplay,</span><br><span class="line">      &#125;);</span><br><span class="line">      backgroundAudioManager.pause();</span><br><span class="line">      backgroundAudioManager.onPause(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;music stop !&quot;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/music.gif" alt="music"></p>
<h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
        <tag>背景音乐</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序警告设置 enable-flex 属性以使 flexbox 布局生效的解决办法</title>
    <url>/2020/07/21/wxapp/wxapp-flexenable/</url>
    <content><![CDATA[<h1 id="微信小程序警告设置-enable-flex-属性以使-flexbox-布局生效的解决办法"><a href="#微信小程序警告设置-enable-flex-属性以使-flexbox-布局生效的解决办法" class="headerlink" title="微信小程序警告设置 enable-flex 属性以使 flexbox 布局生效的解决办法"></a>微信小程序警告设置 enable-flex 属性以使 flexbox 布局生效的解决办法</h1><h3 id="具体情况"><a href="#具体情况" class="headerlink" title="具体情况:"></a>具体情况:</h3><p>scroll-view 滚动，设置 display：flex 不生效并警告设置 enable-flex 属性以使 flexbox 布局生效</p>
<p>添加 <code>enable-flex</code> 属性,值设置为 <code>true</code> 就可以了</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">enable-flex</span>=<span class="string">&quot;true&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
        <tag>flexbox</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序使用彩色图标(阿里巴巴 iconfont Symbol 的用法)</title>
    <url>/2020/08/14/wxapp/wxapp-iconfont/</url>
    <content><![CDATA[<h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><p>需要安装好 nodejs (略)</p>
<p>用于下载插件</p>
<h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install mini-program-iconfont-cli --save-dev</span><br></pre></td></tr></table></figure>

<p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/miniprogram.png" alt="miniprogram"></p>
<h1 id="初始化配置文件"><a href="#初始化配置文件" class="headerlink" title="初始化配置文件"></a>初始化配置文件</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx iconfont-init</span><br></pre></td></tr></table></figure>

<p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/initiconfontjson.png" alt="initiconfontjson"></p>
<h3 id="会生成一个-inconfont-json-文件"><a href="#会生成一个-inconfont-json-文件" class="headerlink" title="会生成一个 inconfont.json 文件"></a>会生成一个 inconfont.json 文件</h3><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/iconjsonfile.png" alt="iconjsonfile"></p>
<h3 id="填入给你的-Symbol-链接"><a href="#填入给你的-Symbol-链接" class="headerlink" title="填入给你的 Symbol 链接"></a>填入给你的 Symbol 链接</h3><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/jsurl.png" alt="jsurl"></p>
<h1 id="生成小程序组件"><a href="#生成小程序组件" class="headerlink" title="生成小程序组件"></a>生成小程序组件</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx iconfont-wechat</span><br></pre></td></tr></table></figure>

<p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/initwechaticon.png" alt="initwechaticon"></p>
<h1 id="使用图标"><a href="#使用图标" class="headerlink" title="使用图标"></a>使用图标</h1><h3 id="在-app-json-文件里设置使用图标组件"><a href="#在-app-json-文件里设置使用图标组件" class="headerlink" title="在 app.json 文件里设置使用图标组件"></a>在 app.json 文件里设置使用图标组件</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;usingComponents&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;iconfont&quot;</span>: <span class="string">&quot;/iconfont/iconfont&quot;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="在-wxml-中使用"><a href="#在-wxml-中使用" class="headerlink" title="在 wxml 中使用"></a>在 wxml 中使用</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iconfont</span> <span class="attr">name</span>=<span class="string">&quot;dog&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iconfont</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="如图"><a href="#如图" class="headerlink" title="如图:"></a>如图:</h3><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/dog.png" alt="dog"></p>
<h1 id="更改图标大小"><a href="#更改图标大小" class="headerlink" title="更改图标大小"></a>更改图标大小</h1><p>在 <code>iconfont.wxml</code> 中可以随意修改,每次找有点麻烦<br><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/iconfontwxml.png" alt="iconfontwxml"></p>
<p>也不建议你去修改 <code>iconfont.js</code> 里的 <code>svgSize</code> 的大小</p>
<p>可以修改 <code>iconfont.json</code> 里 <code>default_icon_size</code> 的值<br><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/resize.png" alt="resize"></p>
<p>然后更新一下 <code>iconfont-wechat</code> 就可以设置图标全局的大小了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx iconfont-wechat</span><br></pre></td></tr></table></figure>

<h1 id="项目更新图标"><a href="#项目更新图标" class="headerlink" title="项目更新图标"></a>项目更新图标</h1><p>当你的项目图标更新了，需要更新你的 Symbol 链接，然后在 iconfont.json 里修改参数 symbol_url</p>
<p>然后更新一下 <code>iconfont-wechat</code> 就可以了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx iconfont-wechat</span><br></pre></td></tr></table></figure>

<h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
        <tag>iconfont</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序滚动条设置</title>
    <url>/2020/07/21/wxapp/wxapp-scrollbar/</url>
    <content><![CDATA[<h1 id="隐藏滚动条"><a href="#隐藏滚动条" class="headerlink" title="隐藏滚动条"></a>隐藏滚动条</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">::-webkit-scrollbar &#123;</span><br><span class="line">  width: <span class="number">0</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>rpx;</span><br><span class="line">  <span class="attribute">background-color</span>: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其实设置为宽高为 0 或者背景颜色透明,其中任何一项都可以实现,或者你直接 <code>opacity:0;</code> 也可以,障眼法哈哈哈</p>
<h1 id="设置滚动条样式"><a href="#设置滚动条样式" class="headerlink" title="设置滚动条样式"></a>设置滚动条样式</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">::-webkit-scrollbar &#123;</span><br><span class="line">  width: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设置滚动条轨道 内阴影+圆角 */</span></span><br><span class="line">::-webkit-scrollbar-track &#123;</span><br><span class="line">  -webkit-box-shadow: inset <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>);</span><br><span class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设置滚动条 内阴影+圆角 */</span></span><br><span class="line">::-webkit-scrollbar-thumb &#123;</span><br><span class="line">  border-radius: <span class="number">10px</span>;</span><br><span class="line">  -webkit-<span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>);</span><br><span class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#39b54a</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
        <tag>滚动条</tag>
        <tag>scroll</tag>
        <tag>scrollbar</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序切换标签改变样式</title>
    <url>/2020/08/10/wxapp/wxapp-swichtab/</url>
    <content><![CDATA[<h1 id="微信小程序切换标签改变样式"><a href="#微信小程序切换标签改变样式" class="headerlink" title="微信小程序切换标签改变样式"></a>微信小程序切换标签改变样式</h1><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/swichtab.gif" alt="swichtab"></p>
<h3 id="wxml"><a href="#wxml" class="headerlink" title="wxml"></a>wxml</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--顶部导航栏--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;swiper-tab&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;tab-item &#123;&#123;currentTab==0 ? &#x27;active&#x27; : &#x27;&#x27;&#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">data-current</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">bindtap</span>=<span class="string">&quot;swichNav&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span>A&lt;/view</span><br><span class="line">  &gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;tab-item &#123;&#123;currentTab==1 ? &#x27;active&#x27; : &#x27;&#x27;&#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">data-current</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">bindtap</span>=<span class="string">&quot;swichNav&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span>B&lt;/view</span><br><span class="line">  &gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;tab-item &#123;&#123;currentTab==2 ? &#x27;active&#x27; : &#x27;&#x27;&#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">data-current</span>=<span class="string">&quot;2&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">bindtap</span>=<span class="string">&quot;swichNav&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span>C&lt;/view</span><br><span class="line">  &gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--内容主体--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">swiper</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;swiper&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">current</span>=<span class="string">&quot;&#123;&#123;currentTab&#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">duration</span>=<span class="string">&quot;400&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">bindchange</span>=<span class="string">&quot;swiperChange&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;tabs&#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="wxss"><a href="#wxss" class="headerlink" title="wxss"></a>wxss</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.swiper-tab</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">60</span>rpx;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">2</span>rpx solid <span class="number">#777</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tab-item</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">33.3%</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">235</span>, <span class="number">135</span>, <span class="number">135</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.swiper</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">100</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1140</span>rpx;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#dfdfdf</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.active</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">5</span>rpx solid blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="comment">// tab切换</span></span><br><span class="line">    <span class="attr">currentTab</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">tabs</span>: [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">swichNav</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// console.log(e);</span></span><br><span class="line">    <span class="keyword">var</span> that = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.data.currentTab === e.target.dataset.current) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      that.setData(&#123;</span><br><span class="line">        <span class="attr">currentTab</span>: e.target.dataset.current,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">swiperChange</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// console.log(e);</span></span><br><span class="line">    <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">      <span class="attr">currentTab</span>: e.detail.current,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
        <tag>标签</tag>
        <tag>tab</tag>
      </tags>
  </entry>
</search>
