<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Saturday_</title>
  
  
  <link href="https://codehhr.cn/atom.xml" rel="self"/>
  
  <link href="https://codehhr.cn/"/>
  <updated>2021-11-09T12:38:47.856Z</updated>
  <id>https://codehhr.cn/</id>
  
  <author>
    <name>HHR</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux 终端走代理</title>
    <link href="https://codehhr.cn/2021/11/09/linux/linux-proxy/"/>
    <id>https://codehhr.cn/2021/11/09/linux/linux-proxy/</id>
    <published>2021-11-09T12:29:42.000Z</published>
    <updated>2021-11-09T12:38:47.856Z</updated>
    
    <content type="html"><![CDATA[<!-- <div class="note info flat"><p><strong>可以吧代理设置写入当前终端环境的 <code>rc</code> 文件或者在当前终端执行 ( 只作用在当前终端, 比较推荐 )</strong></p></div> --><h1 id="在当前终端执行"><a href="#在当前终端执行" class="headerlink" title="在当前终端执行"></a>在当前终端执行</h1><p>假设端口是 <code>2000</code>, 且是 <code>socks5</code> 协议</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ALL_PROXY=socks5://127.0.0.1:2000</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;!-- &lt;div class=&quot;note info flat&quot;&gt;&lt;p&gt;&lt;strong&gt;可以吧代理设置写入当前终端环境的 &lt;code&gt;rc&lt;/code&gt; 文件或者在当前终端执行 ( 只作用在当前终端, 比较推荐 )&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt; --&gt;

&lt;h1 id=</summary>
      
    
    
    
    <category term="linux" scheme="https://codehhr.cn/categories/linux/"/>
    
    
    <category term="linux" scheme="https://codehhr.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Ts 基础静态类型和复杂静态类型</title>
    <link href="https://codehhr.cn/2021/11/08/ts/ts-dataType/"/>
    <id>https://codehhr.cn/2021/11/08/ts/ts-dataType/</id>
    <published>2021-11-08T14:57:57.000Z</published>
    <updated>2021-11-08T15:42:27.570Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础静态类型"><a href="#基础静态类型" class="headerlink" title="基础静态类型"></a>基础静态类型</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num: <span class="built_in">Number</span> = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">let</span> code: <span class="built_in">String</span> = <span class="string">&quot;TypeScript&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> flag: <span class="built_in">Boolean</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 以及 Undefinde, Null, Void, Symbol</span></span><br></pre></td></tr></table></figure><h1 id="复杂静态类型"><a href="#复杂静态类型" class="headerlink" title="复杂静态类型"></a>复杂静态类型</h1><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><div class="note warning no-icon flat"><p><strong>有很多形式</strong></p></div><h3 id="直接声明"><a href="#直接声明" class="headerlink" title="直接声明"></a>直接声明</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person: &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">String</span>;</span><br><span class="line">  age: <span class="built_in">Number</span>;</span><br><span class="line">&#125; = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;ts&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">123</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Animal &#123;</span><br><span class="line">  <span class="attr">color</span>: <span class="built_in">String</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> dag: Animal = &#123;</span><br><span class="line">  <span class="attr">color</span>: <span class="string">&quot;brown&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="类或者构造函数"><a href="#类或者构造函数" class="headerlink" title="类或者构造函数"></a>类或者构造函数</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">parameters</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> man: Person = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure><h3 id="声明函数返回值类型"><a href="#声明函数返回值类型" class="headerlink" title="声明函数返回值类型"></a>声明函数返回值类型</h3><p>下面用箭头函数演示</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fun: <span class="function">() =&gt;</span> <span class="built_in">String</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;string&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr: <span class="built_in">String</span>[] = [<span class="string">&quot;js&quot;</span>, <span class="string">&quot;ts&quot;</span>, <span class="string">&quot;py&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础静态类型&quot;&gt;&lt;a href=&quot;#基础静态类型&quot; class=&quot;headerlink&quot; title=&quot;基础静态类型&quot;&gt;&lt;/a&gt;基础静态类型&lt;/h1&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Js 封装双向链表</title>
    <link href="https://codehhr.cn/2021/11/01/data-structure/ds-doublyLinkedList/"/>
    <id>https://codehhr.cn/2021/11/01/data-structure/ds-doublyLinkedList/</id>
    <published>2021-11-01T11:30:25.000Z</published>
    <updated>2021-11-04T16:56:25.645Z</updated>
    
    <content type="html"><![CDATA[<h1 id="总代码"><a href="#总代码" class="headerlink" title="总代码"></a>总代码</h1><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span></span></div>    <div class="hide-content"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 双向链表</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DoublyLinkedList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.head = <span class="literal">null</span>;</span><br><span class="line">  <span class="built_in">this</span>.tail = <span class="literal">null</span>;</span><br><span class="line">  <span class="built_in">this</span>.length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 节点类</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.prev = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">this</span>.data = data;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 追加节点</span></span><br><span class="line">  DoublyLinkedList.prototype.append = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.head = newNode;</span><br><span class="line">      <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      newNode.prev = <span class="built_in">this</span>.tail;</span><br><span class="line">      <span class="built_in">this</span>.tail.next = newNode;</span><br><span class="line">      <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.length += <span class="number">1</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 插入节点</span></span><br><span class="line">  DoublyLinkedList.prototype.insert = <span class="function"><span class="keyword">function</span> (<span class="params">position, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">    <span class="comment">// 先判断插入位置是否合法</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;Illegal position !&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.head = newNode;</span><br><span class="line">        <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (position == <span class="number">0</span>) &#123;</span><br><span class="line">          newNode.next = <span class="built_in">this</span>.head;</span><br><span class="line">          <span class="built_in">this</span>.head.prev = newNode;</span><br><span class="line">          <span class="built_in">this</span>.head = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position == <span class="built_in">this</span>.length) &#123;</span><br><span class="line">          <span class="comment">// this.append(data);</span></span><br><span class="line">          newNode.prev = <span class="built_in">this</span>.tail;</span><br><span class="line">          <span class="built_in">this</span>.tail.next = newNode;</span><br><span class="line">          <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position &gt; <span class="built_in">this</span>.length) &#123;</span><br><span class="line">          <span class="built_in">this</span>.append(data);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 先找到要插入的位置</span></span><br><span class="line">          <span class="comment">// 插入位置的节点 (原后继节点)</span></span><br><span class="line">          <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">          <span class="comment">// 插入位置的前一个节点 (前驱节点)</span></span><br><span class="line">          <span class="keyword">let</span> previousNode = <span class="literal">null</span>;</span><br><span class="line">          <span class="comment">// 去匹配 position</span></span><br><span class="line">          <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">            previousNode = currentNode;</span><br><span class="line">            currentNode = currentNode.next;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 已找到要插入的位置</span></span><br><span class="line">          newNode.next = currentNode;</span><br><span class="line">          newNode.prev = previousNode;</span><br><span class="line">          currentNode.prev = newNode;</span><br><span class="line">          previousNode.next = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">this</span>.length += <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 打印双链表</span></span><br><span class="line">  DoublyLinkedList.prototype.print = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    arr.push(currentNode.data);</span><br><span class="line">    <span class="keyword">while</span> (currentNode.next) &#123;</span><br><span class="line">      arr.push(currentNode.next.data);</span><br><span class="line">      currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取指定位置节点数据</span></span><br><span class="line">  <span class="comment">// 可以根据链表长度决定从前开始找还是从后开始找, 这样效率高一些, 此处略, 默认从前面开始找</span></span><br><span class="line">  DoublyLinkedList.prototype.get = <span class="function"><span class="keyword">function</span> (<span class="params">position</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 排除越界情况</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;Illegal position !&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">      <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> currentNode.data;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">let</span> doublyLinkedList = <span class="keyword">new</span> DoublyLinkedList();</span><br><span class="line"></span><br><span class="line"><span class="comment">// append</span></span><br><span class="line">doublyLinkedList.append(<span class="number">4</span>);</span><br><span class="line">doublyLinkedList.append(<span class="number">5</span>);</span><br><span class="line">doublyLinkedList.append(<span class="number">6</span>);</span><br><span class="line">doublyLinkedList.append(<span class="number">7</span>);</span><br><span class="line">doublyLinkedList.append(<span class="number">8</span>);</span><br><span class="line">doublyLinkedList.append(<span class="number">9</span>);</span><br><span class="line">doublyLinkedList.append(<span class="number">10</span>);</span><br><span class="line">doublyLinkedList.append(<span class="number">11</span>);</span><br><span class="line">doublyLinkedList.append(<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// print</span></span><br><span class="line"><span class="comment">// insert</span></span><br><span class="line"><span class="built_in">console</span>.log(doublyLinkedList.print());</span><br><span class="line"><span class="built_in">console</span>.log(doublyLinkedList.insert(<span class="number">999</span>, <span class="number">999</span>));</span><br><span class="line"><span class="built_in">console</span>.log(doublyLinkedList.print());</span><br><span class="line"></span><br><span class="line"><span class="comment">// get</span></span><br><span class="line"><span class="built_in">console</span>.log(doublyLinkedList.get(<span class="number">999</span>));</span><br></pre></td></tr></table></figure></div></div><h1 id="创建双向链表类"><a href="#创建双向链表类" class="headerlink" title="创建双向链表类"></a>创建双向链表类</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DoublyLinkedList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.head = <span class="literal">null</span>;</span><br><span class="line">  <span class="built_in">this</span>.tail = <span class="literal">null</span>;</span><br><span class="line">  <span class="built_in">this</span>.length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="创建节点类-用于承载每个节点"><a href="#创建节点类-用于承载每个节点" class="headerlink" title="创建节点类, 用于承载每个节点"></a>创建节点类, 用于承载每个节点</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 节点类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.prev = <span class="literal">null</span>;</span><br><span class="line">  <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">  <span class="built_in">this</span>.data = data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="封装一些方法"><a href="#封装一些方法" class="headerlink" title="封装一些方法"></a>封装一些方法</h1><h2 id="追加节点方法"><a href="#追加节点方法" class="headerlink" title="追加节点方法"></a>追加节点方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 追加节点</span></span><br><span class="line">DoublyLinkedList.prototype.append = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.length == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.head = newNode;</span><br><span class="line">    <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    newNode.prev = <span class="built_in">this</span>.tail;</span><br><span class="line">    <span class="built_in">this</span>.tail.next = newNode;</span><br><span class="line">    <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">this</span>.length += <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="插入节点方法"><a href="#插入节点方法" class="headerlink" title="插入节点方法"></a>插入节点方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插入节点</span></span><br><span class="line">DoublyLinkedList.prototype.insert = <span class="function"><span class="keyword">function</span> (<span class="params">position, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">  <span class="comment">// 先判断插入位置是否合法</span></span><br><span class="line">  <span class="keyword">if</span> (position &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Illegal position !&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.head = newNode;</span><br><span class="line">      <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (position == <span class="number">0</span>) &#123;</span><br><span class="line">        newNode.next = <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="built_in">this</span>.head.prev = newNode;</span><br><span class="line">        <span class="built_in">this</span>.head = newNode;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position == <span class="built_in">this</span>.length) &#123;</span><br><span class="line">        <span class="comment">// this.append(data);</span></span><br><span class="line">        newNode.prev = <span class="built_in">this</span>.tail;</span><br><span class="line">        <span class="built_in">this</span>.tail.next = newNode;</span><br><span class="line">        <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position &gt; <span class="built_in">this</span>.length) &#123;</span><br><span class="line">        <span class="built_in">this</span>.append(data);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 先找到要插入的位置</span></span><br><span class="line">        <span class="comment">// 插入位置的节点 (原后继节点)</span></span><br><span class="line">        <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="comment">// 插入位置的前一个节点 (前驱节点)</span></span><br><span class="line">        <span class="keyword">let</span> previousNode = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 去匹配 position</span></span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">          previousNode = currentNode;</span><br><span class="line">          currentNode = currentNode.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 已找到要插入的位置</span></span><br><span class="line">        newNode.next = currentNode;</span><br><span class="line">        newNode.prev = previousNode;</span><br><span class="line">        currentNode.prev = newNode;</span><br><span class="line">        previousNode.next = newNode;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.length += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="打印双链表"><a href="#打印双链表" class="headerlink" title="打印双链表"></a>打印双链表</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打印双链表</span></span><br><span class="line">DoublyLinkedList.prototype.print = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> arr = [];</span><br><span class="line">  <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">  arr.push(currentNode.data);</span><br><span class="line">  <span class="keyword">while</span> (currentNode.next) &#123;</span><br><span class="line">    arr.push(currentNode.next.data);</span><br><span class="line">    currentNode = currentNode.next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="获取指定位置节点数据"><a href="#获取指定位置节点数据" class="headerlink" title="获取指定位置节点数据"></a>获取指定位置节点数据</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取指定位置节点数据</span></span><br><span class="line"><span class="comment">// 可以根据链表长度决定从前开始找还是从后开始找, 这样效率高一些, 此处略, 默认从前面开始找</span></span><br><span class="line">DoublyLinkedList.prototype.get = <span class="function"><span class="keyword">function</span> (<span class="params">position</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 排除越界情况</span></span><br><span class="line">  <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Illegal position !&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">      currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> currentNode.data;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;总代码&quot;&gt;&lt;a href=&quot;#总代码&quot; class=&quot;headerlink&quot; title=&quot;总代码&quot;&gt;&lt;/a&gt;总代码&lt;/h1&gt;&lt;div class=&quot;hide-toggle&quot; &gt;&lt;div class=&quot;hide-button toggle-title&quot; style</summary>
      
    
    
    
    <category term="数据结构" scheme="https://codehhr.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="链表结构" scheme="https://codehhr.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://codehhr.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="双向链表" scheme="https://codehhr.cn/tags/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>Js 封装二叉搜索树</title>
    <link href="https://codehhr.cn/2021/10/19/data-structure/ds-binarySearchTree/"/>
    <id>https://codehhr.cn/2021/10/19/data-structure/ds-binarySearchTree/</id>
    <published>2021-10-19T13:51:50.000Z</published>
    <updated>2021-10-29T14:33:04.912Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-icon flat"><h1 id="二叉搜索树的封装"><a href="#二叉搜索树的封装" class="headerlink" title="二叉搜索树的封装"></a>二叉搜索树的封装</h1></div><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>code</span></div>    <div class="hide-content"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 二叉搜索树的封装</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BinarySearchTree</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 节点类 (每个节点都包含左右两个子节点以及自身的 key &amp; value )</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">obj = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.key = obj.key;</span><br><span class="line">    <span class="built_in">this</span>.value = obj.value;</span><br><span class="line">    <span class="built_in">this</span>.left = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">this</span>.right = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  根节点</span></span><br><span class="line">  <span class="built_in">this</span>.root = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 方法</span></span><br><span class="line">  <span class="comment">// 插入数据</span></span><br><span class="line">  BinarySearchTree.prototype.insert = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个节点</span></span><br><span class="line">    <span class="keyword">let</span> newNode = <span class="keyword">new</span> Node(obj);</span><br><span class="line">    <span class="comment">// 先判断根节点是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.root == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.root = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      insertNode(<span class="built_in">this</span>.root, newNode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">insertNode</span>(<span class="params">currentNode, newNode</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 向左查找</span></span><br><span class="line">      <span class="keyword">if</span> (newNode.key &lt; currentNode.key) &#123;</span><br><span class="line">        <span class="comment">// 找到 currentNode 的左子节点为 null 时放入</span></span><br><span class="line">        <span class="keyword">if</span> (currentNode.left == <span class="literal">null</span>) &#123;</span><br><span class="line">          currentNode.left = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          insertNode(currentNode.left, newNode);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 向右查找</span></span><br><span class="line">        <span class="keyword">if</span> (currentNode.right == <span class="literal">null</span>) &#123;</span><br><span class="line">          currentNode.right = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          insertNode(currentNode.right, newNode);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 树的遍历</span></span><br><span class="line">  <span class="comment">// 1.先序遍历</span></span><br><span class="line">  BinarySearchTree.prototype.preorderTraversal = <span class="function"><span class="keyword">function</span> (<span class="params">handler</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;===== 先序遍历 =====&quot;</span>);</span><br><span class="line">    preorderTraversalNode(<span class="built_in">this</span>.root);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">preorderTraversalNode</span>(<span class="params">currentNode</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (currentNode != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 传一个回调 handler, 让 handler 处理当前 (经过的节点) 节点的数据</span></span><br><span class="line">        handler(&#123; <span class="attr">key</span>: currentNode.key, <span class="attr">value</span>: currentNode.value &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查找子节点的左子节点</span></span><br><span class="line">        preorderTraversalNode(currentNode.left);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查找子节点的右子节点</span></span><br><span class="line">        preorderTraversalNode(currentNode.right);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.中序遍历</span></span><br><span class="line">  BinarySearchTree.prototype.inOrderTraversal = <span class="function"><span class="keyword">function</span> (<span class="params">handler</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;===== 中序遍历 =====&quot;</span>);</span><br><span class="line">    inOrderTraversalNode(<span class="built_in">this</span>.root);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inOrderTraversalNode</span>(<span class="params">currentNode</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (currentNode != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 查找子节点的左子节点</span></span><br><span class="line">        inOrderTraversalNode(currentNode.left);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 让 handler 处理当前 (经过的节点) 节点的数据</span></span><br><span class="line">        handler(&#123; <span class="attr">key</span>: currentNode.key, <span class="attr">value</span>: currentNode.value &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查找子节点的右子节点</span></span><br><span class="line">        inOrderTraversalNode(currentNode.right);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3.后序遍历</span></span><br><span class="line">  BinarySearchTree.prototype.postorderTraversal = <span class="function"><span class="keyword">function</span> (<span class="params">handler</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;===== 后序遍历 =====&quot;</span>);</span><br><span class="line">    postorderTraversalNode(<span class="built_in">this</span>.root);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">postorderTraversalNode</span>(<span class="params">currentNode</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (currentNode != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 查找子节点的左子节点</span></span><br><span class="line">        postorderTraversalNode(currentNode.left);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查找子节点的右子节点</span></span><br><span class="line">        postorderTraversalNode(currentNode.right);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 让 handler 处理当前 (经过的节点) 节点的数据</span></span><br><span class="line">        handler(&#123; <span class="attr">key</span>: currentNode.key, <span class="attr">value</span>: currentNode.value &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 寻找最值</span></span><br><span class="line">  <span class="comment">// 寻找最大值</span></span><br><span class="line">  BinarySearchTree.prototype.max = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取根节点</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.root;</span><br><span class="line">    <span class="comment">// 默认 value 值</span></span><br><span class="line">    <span class="keyword">let</span> value = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 一直向右查找,直到节点的右子节点为 null, 当前节点就是最大值</span></span><br><span class="line">    <span class="keyword">while</span> (currentNode.right != <span class="literal">null</span>) &#123;</span><br><span class="line">      value = currentNode.value;</span><br><span class="line">      currentNode = currentNode.right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">key</span>: currentNode.key, value &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 寻找最小值</span></span><br><span class="line">  BinarySearchTree.prototype.min = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取根节点</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.root;</span><br><span class="line">    <span class="comment">// 默认 value 值</span></span><br><span class="line">    <span class="keyword">let</span> value = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 一直向左查找,直到节点的左子节点为 null, 当前节点就是最小值</span></span><br><span class="line">    <span class="keyword">while</span> (currentNode.left != <span class="literal">null</span>) &#123;</span><br><span class="line">      value = currentNode.value;</span><br><span class="line">      currentNode = currentNode.left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">key</span>: currentNode.key, value &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// // 层序遍历方法 1</span></span><br><span class="line">  <span class="comment">// BinarySearchTree.prototype.levelTraversal = function () &#123;</span></span><br><span class="line">  <span class="comment">//   let currentNode = this.root;</span></span><br><span class="line">  <span class="comment">//   let result = [];</span></span><br><span class="line">  <span class="comment">//   levelTraversalNode(currentNode, 0);</span></span><br><span class="line">  <span class="comment">//   function levelTraversalNode(currentNode, level) &#123;</span></span><br><span class="line">  <span class="comment">//     if (currentNode != null) &#123;</span></span><br><span class="line">  <span class="comment">//       if (!result[level]) &#123;</span></span><br><span class="line">  <span class="comment">//         result[level] = [];</span></span><br><span class="line">  <span class="comment">//       &#125;</span></span><br><span class="line">  <span class="comment">//       result[level].push(currentNode.value);</span></span><br><span class="line">  <span class="comment">//       if (currentNode.left) &#123;</span></span><br><span class="line">  <span class="comment">//         levelTraversalNode(currentNode.left, level + 1);</span></span><br><span class="line">  <span class="comment">//       &#125;</span></span><br><span class="line">  <span class="comment">//       if (currentNode.right) &#123;</span></span><br><span class="line">  <span class="comment">//         levelTraversalNode(currentNode.right, level + 1);</span></span><br><span class="line">  <span class="comment">//       &#125;</span></span><br><span class="line">  <span class="comment">//     &#125;</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">  <span class="comment">//   return result;</span></span><br><span class="line">  <span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 层序遍历方法 2</span></span><br><span class="line">  BinarySearchTree.prototype.levelTraversal = <span class="function"><span class="keyword">function</span> <span class="title">levelTraversal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = []; <span class="comment">// 最后输出的多维数组</span></span><br><span class="line">    <span class="keyword">let</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> item = <span class="keyword">new</span> Node();</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.root) &#123;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> layer = []; <span class="comment">// 临时数组, 存放某一层的节点</span></span><br><span class="line">      layer.push(<span class="built_in">this</span>.root); <span class="comment">// 把根节点作为第一层放进数组</span></span><br><span class="line">      <span class="keyword">while</span> (layer.length != <span class="number">0</span>) &#123;</span><br><span class="line">        result.push([]); <span class="comment">// 添加新的一层</span></span><br><span class="line">        length = layer.length; <span class="comment">// 下面 shift 会改变 layer 数组长度, 所以先保存下</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">          item = layer.shift(); <span class="comment">// 层虚遍历从左到右</span></span><br><span class="line">          result[result.length - <span class="number">1</span>].push(item.key); <span class="comment">// 把这个节点的值, 添加到当前层的数组里面</span></span><br><span class="line">          <span class="comment">// 将下一层的节点加入 layer</span></span><br><span class="line">          <span class="keyword">if</span> (item.left) &#123;</span><br><span class="line">            layer.push(item.left);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (item.right) &#123;</span><br><span class="line">            layer.push(item.right);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 搜索 key 值</span></span><br><span class="line">  <span class="comment">// BinarySearchTree.prototype.search = function (key) &#123;</span></span><br><span class="line">  <span class="comment">//   return searchNode(this.root, key);</span></span><br><span class="line">  <span class="comment">//   function searchNode(currentNode, key) &#123;</span></span><br><span class="line">  <span class="comment">//     if (currentNode == null) &#123;</span></span><br><span class="line">  <span class="comment">//       return false;</span></span><br><span class="line">  <span class="comment">//     &#125; else &#123;</span></span><br><span class="line">  <span class="comment">//       if (key &lt; currentNode.key) &#123;</span></span><br><span class="line">  <span class="comment">//         return searchNode(currentNode.left, key);</span></span><br><span class="line">  <span class="comment">//       &#125; else if (key &gt; currentNode.key) &#123;</span></span><br><span class="line">  <span class="comment">//         return searchNode(currentNode.right, key);</span></span><br><span class="line">  <span class="comment">//       &#125; else &#123;</span></span><br><span class="line">  <span class="comment">//         return true;</span></span><br><span class="line">  <span class="comment">//       &#125;</span></span><br><span class="line">  <span class="comment">//     &#125;</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">  <span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 搜索 key 值 ( 非递归式 )</span></span><br><span class="line">  BinarySearchTree.prototype.search = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.root;</span><br><span class="line">    <span class="keyword">while</span> (currentNode != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (key &lt; currentNode.key) &#123;</span><br><span class="line">        currentNode = currentNode.left;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; currentNode.key) &#123;</span><br><span class="line">        currentNode = currentNode.right;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 删除节点</span></span><br><span class="line">  BinarySearchTree.prototype.remove = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!key) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 先寻找要删除的节点</span></span><br><span class="line">    <span class="comment">// 涉及到当前节点和父节点, 以及具体关系 ( 是左子节点还是右子节点 )</span></span><br><span class="line">    <span class="keyword">let</span> parentNode = <span class="built_in">this</span>.root;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.root;</span><br><span class="line">    <span class="keyword">let</span> isLeftChild = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (key != currentNode.key) &#123;</span><br><span class="line">      parentNode = currentNode;</span><br><span class="line">      <span class="keyword">if</span> (key &lt; currentNode.key) &#123;</span><br><span class="line">        isLeftChild = <span class="literal">true</span>;</span><br><span class="line">        currentNode = currentNode.left;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        isLeftChild = <span class="literal">false</span>;</span><br><span class="line">        currentNode = currentNode.right;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 没找到要删除的节点</span></span><br><span class="line">      <span class="keyword">if</span> (!currentNode) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// while 循环结束, 已找到要删除的节点, 下面分几种情况</span></span><br><span class="line">    <span class="comment">// 1. 要删除的节点是叶子节点</span></span><br><span class="line">    <span class="keyword">if</span> (currentNode.left == <span class="literal">null</span> &amp;&amp; currentNode.right == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (currentNode == <span class="built_in">this</span>.root) &#123;</span><br><span class="line">        <span class="built_in">this</span>.root = <span class="literal">null</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 判断当前节点和父节点的关系</span></span><br><span class="line">        <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">          parentNode.left = <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          parentNode.right = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. 要删除的节点只有一个子节点 ( 只有左子节点 )</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!currentNode.right) &#123;</span><br><span class="line">      <span class="keyword">if</span> (currentNode == <span class="built_in">this</span>.root) &#123;</span><br><span class="line">        <span class="built_in">this</span>.root == currentNode.left;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 判断当前节点和父节点的关系</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">        parentNode.left = currentNode.left;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        parentNode.right = currentNode.left;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3. 要删除的节点只有一个子节点 ( 只有右子节点 )</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!currentNode.left) &#123;</span><br><span class="line">      <span class="keyword">if</span> (currentNode == <span class="built_in">this</span>.root) &#123;</span><br><span class="line">        <span class="built_in">this</span>.root == currentNode.left;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 判断当前节点和父节点的关系</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">        parentNode.left = currentNode.right;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        parentNode.right = currentNode.right;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4. 要删除的节点有两个子节点</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 通过找规律发现, 该节点即在左子树中找最大的值 或者 在右子树中找最小的值</span></span><br><span class="line">      <span class="comment">// By the way, it&#x27;s fucking complicated !</span></span><br><span class="line">      <span class="comment">// 有两种方案, 这里只展示向删除节点的左子树方向查找</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (currentNode == <span class="built_in">this</span>.root) <span class="built_in">this</span>.root = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> candidateNode = currentNode.left; <span class="comment">// 初始候选替补节点</span></span><br><span class="line">      <span class="keyword">let</span> candidateParentNode = currentNode.left; <span class="comment">// 初始候选替补节点的父节点</span></span><br><span class="line">      <span class="comment">// 寻找合适的节点</span></span><br><span class="line">      <span class="keyword">while</span> (candidateNode.right) &#123;</span><br><span class="line">        candidateParentNode = candidateNode;</span><br><span class="line">        candidateNode = candidateNode.right;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果候选节点没有右子树, 则当前节点就是最终替补节点</span></span><br><span class="line">      <span class="keyword">if</span> (candidateNode == candidateParentNode) &#123;</span><br><span class="line">        candidateNode.right = currentNode.right;</span><br><span class="line">        <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">          parentNode.left = candidateNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          parentNode.right = candidateNode;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果候选节点有右子树</span></span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 再判断是否有左子树 (隔代)</span></span><br><span class="line">        <span class="keyword">if</span> (candidateNode.left) &#123;</span><br><span class="line">          candidateParentNode.right = candidateNode.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          candidateParentNode.right = <span class="literal">null</span>;</span><br><span class="line">          candidateNode.left = currentNode.left;</span><br><span class="line">          candidateNode.right = currentNode.right;</span><br><span class="line">          <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">            parentNode.left = candidateNode;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            parentNode.right = candidateNode;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> binarySearchTree = <span class="keyword">new</span> BinarySearchTree();</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">11</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 11 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">7</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 7 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">15</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 15 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">5</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 5 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">3</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 3 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">9</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 9 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">8</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 8 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">10</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 10 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">13</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 13 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">12</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 12 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">14</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 14 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">20</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 20 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">18</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 18 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">25</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 25 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">19</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 19 !&quot;</span> &#125;);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                            11</span></span><br><span class="line"><span class="comment">//                  7                     15</span></span><br><span class="line"><span class="comment">//            5         9             13      20</span></span><br><span class="line"><span class="comment">//        3           8  10         12 14   18   25</span></span><br><span class="line"><span class="comment">//                                           19</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先序</span></span><br><span class="line"><span class="comment">// binarySearchTree.preorderTraversal(function (value) &#123;</span></span><br><span class="line"><span class="comment">//   console.log(value);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// 中序</span></span><br><span class="line"><span class="comment">// binarySearchTree.inOrderTraversal(function (value) &#123;</span></span><br><span class="line"><span class="comment">//   console.log(value);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// 后序</span></span><br><span class="line"><span class="comment">// binarySearchTree.postorderTraversal(function (value) &#123;</span></span><br><span class="line"><span class="comment">//   console.log(value);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// 层序</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.levelTraversal());</span></span><br><span class="line"><span class="comment">// 最大值</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.max());</span></span><br><span class="line"><span class="comment">// 最小值</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.min());</span></span><br><span class="line"><span class="comment">// 搜索 key</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(11));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(7));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(15));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(5));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(3));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(9));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(8));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(10));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(6));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(13));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(12));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(14));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(20));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(18));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(25));</span></span><br><span class="line"><span class="built_in">console</span>.log(binarySearchTree.levelTraversal());</span><br><span class="line"><span class="built_in">console</span>.log(binarySearchTree.remove(<span class="number">11</span>));</span><br><span class="line"><span class="built_in">console</span>.log(binarySearchTree.levelTraversal());</span><br></pre></td></tr></table></figure></div></div><hr><h1 id="创建二叉搜索树这个类"><a href="#创建二叉搜索树这个类" class="headerlink" title="创建二叉搜索树这个类"></a>创建二叉搜索树这个类</h1><p><strong>顺便定义根节点, 先让它为空</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BinarySearchTree</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.root = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="创建节点类-用于承载每个节点"><a href="#创建节点类-用于承载每个节点" class="headerlink" title="创建节点类, 用于承载每个节点"></a>创建节点类, 用于承载每个节点</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">obj = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.key = obj.key;</span><br><span class="line">  <span class="built_in">this</span>.value = obj.value;</span><br><span class="line">  <span class="built_in">this</span>.left = <span class="literal">null</span>;</span><br><span class="line">  <span class="built_in">this</span>.right = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="封装二叉搜索树的一些方法"><a href="#封装二叉搜索树的一些方法" class="headerlink" title="封装二叉搜索树的一些方法"></a>封装二叉搜索树的一些方法</h1><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插入数据</span></span><br><span class="line">BinarySearchTree.prototype.insertNode = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 创建一个节点</span></span><br><span class="line">  <span class="keyword">let</span> newNode = <span class="keyword">new</span> Node(obj);</span><br><span class="line">  <span class="comment">// 先判断根节点是否存在</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.root == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.root = newNode;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    insert(<span class="built_in">this</span>.root, newNode);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params">currentNode, newNode</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 向左查找</span></span><br><span class="line">    <span class="keyword">if</span> (newNode.key &lt; currentNode.key) &#123;</span><br><span class="line">      <span class="comment">// 找到 currentNode 的左子节点为 null 时放入</span></span><br><span class="line">      <span class="keyword">if</span> (currentNode.left == <span class="literal">null</span>) &#123;</span><br><span class="line">        currentNode.left = newNode;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        insert(currentNode.left, newNode);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 向右查找</span></span><br><span class="line">      <span class="keyword">if</span> (currentNode.right == <span class="literal">null</span>) &#123;</span><br><span class="line">        currentNode.right = newNode;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        insert(currentNode.right, newNode);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先序遍历</span></span><br><span class="line">BinarySearchTree.prototype.preorderTraversal = <span class="function"><span class="keyword">function</span> (<span class="params">handler</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;===== 先序遍历 =====&quot;</span>);</span><br><span class="line">  preorderTraversalNode(<span class="built_in">this</span>.root);</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">preorderTraversalNode</span>(<span class="params">currentNode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (currentNode != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 传一个回调 handler, 让 handler 处理当前 (经过的节点) 节点的数据</span></span><br><span class="line">      handler(&#123; <span class="attr">key</span>: currentNode.key, <span class="attr">value</span>: currentNode.value &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 查找子节点的左子节点</span></span><br><span class="line">      preorderTraversalNode(currentNode.left);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 查找子节点的右子节点</span></span><br><span class="line">      preorderTraversalNode(currentNode.right);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中序遍历</span></span><br><span class="line">BinarySearchTree.prototype.inOrderTraversal = <span class="function"><span class="keyword">function</span> (<span class="params">handler</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;===== 中序遍历 =====&quot;</span>);</span><br><span class="line">  inOrderTraversalNode(<span class="built_in">this</span>.root);</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">inOrderTraversalNode</span>(<span class="params">currentNode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (currentNode != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 查找子节点的左子节点</span></span><br><span class="line">      inOrderTraversalNode(currentNode.left);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 让 handler 处理当前 (经过的节点) 节点的数据</span></span><br><span class="line">      handler(&#123; <span class="attr">key</span>: currentNode.key, <span class="attr">value</span>: currentNode.value &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 查找子节点的右子节点</span></span><br><span class="line">      inOrderTraversalNode(currentNode.right);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 后序遍历</span></span><br><span class="line">BinarySearchTree.prototype.postorderTraversal = <span class="function"><span class="keyword">function</span> (<span class="params">handler</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;===== 后序遍历 =====&quot;</span>);</span><br><span class="line">  postorderTraversalNode(<span class="built_in">this</span>.root);</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">postorderTraversalNode</span>(<span class="params">currentNode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (currentNode != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 查找子节点的左子节点</span></span><br><span class="line">      postorderTraversalNode(currentNode.left);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 查找子节点的右子节点</span></span><br><span class="line">      postorderTraversalNode(currentNode.right);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 让 handler 处理当前 (经过的节点) 节点的数据</span></span><br><span class="line">      handler(&#123; <span class="attr">key</span>: currentNode.key, <span class="attr">value</span>: currentNode.value &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="寻找最大值"><a href="#寻找最大值" class="headerlink" title="寻找最大值"></a>寻找最大值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 寻找最大值</span></span><br><span class="line">BinarySearchTree.prototype.max = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获取根节点</span></span><br><span class="line">  <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.root;</span><br><span class="line">  <span class="comment">// 默认 value 值</span></span><br><span class="line">  <span class="keyword">let</span> value = <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">// 一直向右查找,直到节点的右子节点为 null, 当前节点就是最大值</span></span><br><span class="line">  <span class="keyword">while</span> (currentNode.right != <span class="literal">null</span>) &#123;</span><br><span class="line">    value = currentNode.value;</span><br><span class="line">    currentNode = currentNode.right;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">key</span>: currentNode.key, value &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="寻找最小值"><a href="#寻找最小值" class="headerlink" title="寻找最小值"></a>寻找最小值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 寻找最小值</span></span><br><span class="line">BinarySearchTree.prototype.min = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获取根节点</span></span><br><span class="line">  <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.root;</span><br><span class="line">  <span class="comment">// 默认 value 值</span></span><br><span class="line">  <span class="keyword">let</span> value = <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">// 一直向左查找,直到节点的左子节点为 null, 当前节点就是最小值</span></span><br><span class="line">  <span class="keyword">while</span> (currentNode.left != <span class="literal">null</span>) &#123;</span><br><span class="line">    value = currentNode.value;</span><br><span class="line">    currentNode = currentNode.left;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">key</span>: currentNode.key, value &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h2><h3 id="层序遍历方法-1"><a href="#层序遍历方法-1" class="headerlink" title="层序遍历方法 1"></a>层序遍历方法 1</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 层序遍历方法 1</span></span><br><span class="line">BinarySearchTree.prototype.levelTraversal = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.root;</span><br><span class="line">  <span class="keyword">let</span> result = [];</span><br><span class="line">  levelTraversalNode(currentNode, <span class="number">0</span>);</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">levelTraversalNode</span>(<span class="params">currentNode, level</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (currentNode != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!result[level]) &#123;</span><br><span class="line">        result[level] = [];</span><br><span class="line">      &#125;</span><br><span class="line">      result[level].push(currentNode.value);</span><br><span class="line">      <span class="keyword">if</span> (currentNode.left) &#123;</span><br><span class="line">        levelTraversalNode(currentNode.left, level + <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (currentNode.right) &#123;</span><br><span class="line">        levelTraversalNode(currentNode.right, level + <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="层序遍历方法-2"><a href="#层序遍历方法-2" class="headerlink" title="层序遍历方法 2"></a>层序遍历方法 2</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">BinarySearchTree.prototype.levelTraversal = <span class="function"><span class="keyword">function</span> <span class="title">levelTraversal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = []; <span class="comment">// 最后输出的结构 (多维数组)</span></span><br><span class="line">  <span class="keyword">let</span> length = <span class="number">0</span>; <span class="comment">// layer 数组长度; 声明在外面是为了尽量不在 while 内部使用 let</span></span><br><span class="line">  <span class="keyword">let</span> item = &#123;&#125;; <span class="comment">// layer 数组里的每一个节点; 声明在外面是为了尽量不在 while 内部使用 let</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">this</span>.root) &#123;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> layer = []; <span class="comment">// 临时数组, 存放某一层的节点</span></span><br><span class="line">    layer.push(<span class="built_in">this</span>.root); <span class="comment">// 把根节点作为第一层放进数组</span></span><br><span class="line">    <span class="keyword">while</span> (layer.length != <span class="number">0</span>) &#123;</span><br><span class="line">      result.push([]); <span class="comment">// 添加新的一层</span></span><br><span class="line">      length = layer.length; <span class="comment">// 下面 shift() 会改变 layer 数组长度, 所以先保存下来</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        item = layer.shift(); <span class="comment">// 层虚遍历从左到右</span></span><br><span class="line">        result[result.length - <span class="number">1</span>].push(item.key); <span class="comment">// 把这个节点的值, 添加到当前层的数组里面</span></span><br><span class="line">        <span class="comment">// 将下一层的节点加入 layer</span></span><br><span class="line">        <span class="keyword">if</span> (item.left) &#123;</span><br><span class="line">          layer.push(item.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (item.right) &#123;</span><br><span class="line">          layer.push(item.right);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><h3 id="搜索-递归式"><a href="#搜索-递归式" class="headerlink" title="搜索 ( 递归式 )"></a>搜索 ( 递归式 )</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 搜索 key 值</span></span><br><span class="line">BinarySearchTree.prototype.search = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> searchNode(<span class="built_in">this</span>.root, key);</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">searchNode</span>(<span class="params">currentNode, key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (currentNode == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (key &lt; currentNode.key) &#123;</span><br><span class="line">        <span class="keyword">return</span> searchNode(currentNode.left, key);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; currentNode.key) &#123;</span><br><span class="line">        <span class="keyword">return</span> searchNode(currentNode.right, key);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="搜索-非递归式"><a href="#搜索-非递归式" class="headerlink" title="搜索 ( 非递归式 )"></a>搜索 ( 非递归式 )</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 搜索 key 值 ( 非递归式 )</span></span><br><span class="line">BinarySearchTree.prototype.search = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.root;</span><br><span class="line">  <span class="keyword">while</span> (currentNode != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key &lt; currentNode.key) &#123;</span><br><span class="line">      currentNode = currentNode.left;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; currentNode.key) &#123;</span><br><span class="line">      currentNode = currentNode.right;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除节点</span></span><br><span class="line">BinarySearchTree.prototype.remove = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!key) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// 先寻找要删除的节点</span></span><br><span class="line">  <span class="comment">// 涉及到当前节点和父节点, 以及具体关系 ( 是左子节点还是右子节点 )</span></span><br><span class="line">  <span class="keyword">let</span> parentNode = <span class="built_in">this</span>.root;</span><br><span class="line">  <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.root;</span><br><span class="line">  <span class="keyword">let</span> isLeftChild = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (key != currentNode.key) &#123;</span><br><span class="line">    parentNode = currentNode;</span><br><span class="line">    <span class="keyword">if</span> (key &lt; currentNode.key) &#123;</span><br><span class="line">      isLeftChild = <span class="literal">true</span>;</span><br><span class="line">      currentNode = currentNode.left;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      isLeftChild = <span class="literal">false</span>;</span><br><span class="line">      currentNode = currentNode.right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 没找到要删除的节点</span></span><br><span class="line">    <span class="keyword">if</span> (!currentNode) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// while 循环结束, 已找到要删除的节点, 下面分几种情况</span></span><br><span class="line">  <span class="comment">// 1. 要删除的节点是叶子节点</span></span><br><span class="line">  <span class="keyword">if</span> (currentNode.left == <span class="literal">null</span> &amp;&amp; currentNode.right == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (currentNode == <span class="built_in">this</span>.root) &#123;</span><br><span class="line">      <span class="built_in">this</span>.root = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 判断当前节点和父节点的关系</span></span><br><span class="line">      <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">        parentNode.left = <span class="literal">null</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        parentNode.right = <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 2. 要删除的节点只有一个子节点 ( 只有左子节点 )</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (!currentNode.right) &#123;</span><br><span class="line">    <span class="keyword">if</span> (currentNode == <span class="built_in">this</span>.root) &#123;</span><br><span class="line">      <span class="built_in">this</span>.root == currentNode.left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断当前节点和父节点的关系</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">      parentNode.left = currentNode.left;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      parentNode.right = currentNode.left;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 3. 要删除的节点只有一个子节点 ( 只有右子节点 )</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (!currentNode.left) &#123;</span><br><span class="line">    <span class="keyword">if</span> (currentNode == <span class="built_in">this</span>.root) &#123;</span><br><span class="line">      <span class="built_in">this</span>.root == currentNode.left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断当前节点和父节点的关系</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">      parentNode.left = currentNode.right;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      parentNode.right = currentNode.right;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 4. 要删除的节点有两个子节点</span></span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 通过找规律发现, 该节点即在左子树中找最大的值 或者 在右子树中找最小的值</span></span><br><span class="line">    <span class="comment">// By the way, it&#x27;s fucking complicated !</span></span><br><span class="line">    <span class="comment">// 有两种方案, 这里只展示向删除节点的左子树方向查找</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (currentNode == <span class="built_in">this</span>.root) <span class="built_in">this</span>.root = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> candidateNode = currentNode.left; <span class="comment">// 初始候选替补节点</span></span><br><span class="line">    <span class="keyword">let</span> candidateParentNode = currentNode.left; <span class="comment">// 初始候选替补节点的父节点</span></span><br><span class="line">    <span class="comment">// 寻找合适的节点</span></span><br><span class="line">    <span class="keyword">while</span> (candidateNode.right) &#123;</span><br><span class="line">      candidateParentNode = candidateNode;</span><br><span class="line">      candidateNode = candidateNode.right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果候选节点没有右子树, 则当前节点就是最终替补节点</span></span><br><span class="line">    <span class="keyword">if</span> (candidateNode == candidateParentNode) &#123;</span><br><span class="line">      candidateNode.right = currentNode.right;</span><br><span class="line">      <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">        parentNode.left = candidateNode;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        parentNode.right = candidateNode;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果候选节点有右子树</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 再判断是否有左子树 (隔代)</span></span><br><span class="line">      <span class="keyword">if</span> (candidateNode.left) &#123;</span><br><span class="line">        candidateParentNode.right = candidateNode.left;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        candidateParentNode.right = <span class="literal">null</span>;</span><br><span class="line">        candidateNode.left = currentNode.left;</span><br><span class="line">        candidateNode.right = currentNode.right;</span><br><span class="line">        <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">          parentNode.left = candidateNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          parentNode.right = candidateNode;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> binarySearchTree = <span class="keyword">new</span> BinarySearchTree();</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">11</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 11 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">7</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 7 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">15</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 15 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">5</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 5 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">3</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 3 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">9</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 9 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">8</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 8 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">10</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 10 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">13</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 13 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">12</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 12 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">14</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 14 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">20</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 20 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">18</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 18 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">25</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 25 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">19</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 19 !&quot;</span> &#125;);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                            11</span></span><br><span class="line"><span class="comment">//                  7                     15</span></span><br><span class="line"><span class="comment">//            5         9             13      20</span></span><br><span class="line"><span class="comment">//        3           8  10         12 14   18   25</span></span><br><span class="line"><span class="comment">//                                           19</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先序</span></span><br><span class="line"><span class="comment">// binarySearchTree.preorderTraversal(function (value) &#123;</span></span><br><span class="line"><span class="comment">//   console.log(value);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// 中序</span></span><br><span class="line"><span class="comment">// binarySearchTree.inOrderTraversal(function (value) &#123;</span></span><br><span class="line"><span class="comment">//   console.log(value);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// 后序</span></span><br><span class="line"><span class="comment">// binarySearchTree.postorderTraversal(function (value) &#123;</span></span><br><span class="line"><span class="comment">//   console.log(value);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// 层序</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.levelTraversal());</span></span><br><span class="line"><span class="comment">// 最大值</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.max());</span></span><br><span class="line"><span class="comment">// 最小值</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.min());</span></span><br><span class="line"><span class="comment">// 搜索 key</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(11));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(7));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(15));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(5));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(3));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(9));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(8));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(10));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(6));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(13));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(12));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(14));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(20));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(18));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(25));</span></span><br><span class="line"><span class="built_in">console</span>.log(binarySearchTree.levelTraversal());</span><br><span class="line"><span class="built_in">console</span>.log(binarySearchTree.remove(<span class="number">11</span>));</span><br><span class="line"><span class="built_in">console</span>.log(binarySearchTree.levelTraversal());</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Js 封装二叉搜索树</summary>
    
    
    
    <category term="数据结构" scheme="https://codehhr.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="树结构" scheme="https://codehhr.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://codehhr.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="二叉树" scheme="https://codehhr.cn/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>用 Object.create 实现类式继承</title>
    <link href="https://codehhr.cn/2021/10/15/js/js-object-create/"/>
    <id>https://codehhr.cn/2021/10/15/js/js-object-create/</id>
    <published>2021-10-15T04:42:19.000Z</published>
    <updated>2021-10-15T04:52:38.247Z</updated>
    
    <content type="html"><![CDATA[<!-- <div class="note info flat"><p><code>Object.create()</code> 方法创建一个新对象 , 使用现有的对象来提供新创建的对象的 <code>__proto__</code></p></div> --><h1 id="下面的例子演示了如何使用-Object-create-来实现类式继承"><a href="#下面的例子演示了如何使用-Object-create-来实现类式继承" class="headerlink" title="下面的例子演示了如何使用 Object.create() 来实现类式继承"></a>下面的例子演示了如何使用 Object.create() 来实现类式继承</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Animal ( 父类 )</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二哈 ( 子类 )</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ErHa</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 拿到父类属性 ( call super constructor )</span></span><br><span class="line">  Animal.call(<span class="built_in">this</span>, color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类续承父类</span></span><br><span class="line">ErHa.prototype = <span class="built_in">Object</span>.create(Animal.prototype);</span><br><span class="line">ErHa.prototype.constructor = ErHa;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建子类实例</span></span><br><span class="line"><span class="keyword">let</span> erha = <span class="keyword">new</span> ErHa(<span class="string">&quot;black&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证</span></span><br><span class="line"><span class="built_in">console</span>.log(erha <span class="keyword">instanceof</span> ErHa); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(erha <span class="keyword">instanceof</span> Animal); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;!-- &lt;div class=&quot;note info flat&quot;&gt;&lt;p&gt;&lt;code&gt;Object.create()&lt;/code&gt; 方法创建一个新对象 , 使用现有的对象来提供新创建的对象的 &lt;code&gt;__proto__&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt; --&gt;

&lt;h1 id</summary>
      
    
    
    
    <category term="js" scheme="https://codehhr.cn/categories/js/"/>
    
    
    <category term="js" scheme="https://codehhr.cn/tags/js/"/>
    
    <category term="javascript" scheme="https://codehhr.cn/tags/javascript/"/>
    
    <category term="继承" scheme="https://codehhr.cn/tags/%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>express 路由</title>
    <link href="https://codehhr.cn/2021/10/13/express/express-route/"/>
    <id>https://codehhr.cn/2021/10/13/express/express-route/</id>
    <published>2021-10-12T16:32:39.000Z</published>
    <updated>2021-10-12T17:41:49.179Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p>路由是指确定应用程序如何响应客户端对特定端点的请求, 该特定端点是 <code>URL</code> (路径) 和特定的 <code>HTTP</code> 请求方法 (<code>GET</code>, <code>POST</code> 等)<br>每个路由可以具有一个或多个处理程序函数, 这些函数在匹配该路由时执行<br>路由定义采用以下结构 :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.METHOD(PATH, HANDLER);</span><br></pre></td></tr></table></figure><ul><li><code>app</code> 是 <code>Express</code> 实例</li><li><code>METHOD</code> 是小写的 <code>HTTP</code> 请求方法</li><li><code>PATH</code> 是服务器上的路径</li><li><code>HANDLER</code> 是当路由匹配时执行的功能</li></ul><h1 id="一些简单实例"><a href="#一些简单实例" class="headerlink" title="一些简单实例"></a>一些简单实例</h1><p><strong>可以用 <code>postman</code> 来测试</strong></p><h2 id="在根路径响应-HelloWorld"><a href="#在根路径响应-HelloWorld" class="headerlink" title="在根路径响应 HelloWorld"></a>在根路径响应 <code>HelloWorld</code></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="在根路径响应-POST-请求"><a href="#在根路径响应-POST-请求" class="headerlink" title="在根路径响应 POST 请求"></a>在根路径响应 <code>POST</code> 请求</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&quot;POST request&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="响应对-user-路径的-PUT-请求"><a href="#响应对-user-路径的-PUT-请求" class="headerlink" title="响应对 /user 路径的 PUT 请求"></a>响应对 <code>/user</code> 路径的 <code>PUT</code> 请求</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.put(<span class="string">&quot;/user&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&quot;PUT request at /user&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="响应对-user-路由的-DELETE-请求"><a href="#响应对-user-路由的-DELETE-请求" class="headerlink" title="响应对 /user 路由的 DELETE 请求"></a>响应对 <code>/user</code> 路由的 <code>DELETE</code> 请求</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.delete(<span class="string">&quot;/user&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&quot;DELETE request at /user&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h1&gt;&lt;p&gt;路由是指确定应用程序如何响应客户端对特定端点的请求, 该特定端点是 &lt;code&gt;URL&lt;/code&gt; (路径) 和特定的 &lt;code&gt;HTT</summary>
      
    
    
    
    <category term="express" scheme="https://codehhr.cn/categories/express/"/>
    
    
    <category term="express" scheme="https://codehhr.cn/tags/express/"/>
    
  </entry>
  
  <entry>
    <title>express 起步 - HelloWorld</title>
    <link href="https://codehhr.cn/2021/10/12/express/express-helloworld/"/>
    <id>https://codehhr.cn/2021/10/12/express/express-helloworld/</id>
    <published>2021-10-12T15:56:14.000Z</published>
    <updated>2021-10-12T16:29:16.764Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初始化-package-json"><a href="#初始化-package-json" class="headerlink" title="初始化 package.json"></a>初始化 package.json</h1><p>随便找个目录 , 使用 <code>npm</code> 初始化 <code>package.json</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p><code>-y</code> 这个参数意思是默认所有操作都为 <code>yes</code></p><h1 id="创建入口文件"><a href="#创建入口文件" class="headerlink" title="创建入口文件"></a>创建入口文件</h1><p>先创建一个 <code>js</code> 文件 , 比如 <code>app.js</code> , 然后简单写一些内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载 express 模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="comment">// 获得一个应用实例</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一个路由, 比如用 get 请求 &quot; / &quot; 响应一个 &quot;HelloWorld&quot;</span></span><br><span class="line">app.get(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置服务启动端口, 回调函数</span></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Server is running at http://localhost:3000&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node app.js</span><br></pre></td></tr></table></figure><p>此时打开 <code>http://localhost:3000</code> 就能看到 <code>HelloWorld</code> 了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;初始化-package-json&quot;&gt;&lt;a href=&quot;#初始化-package-json&quot; class=&quot;headerlink&quot; title=&quot;初始化 package.json&quot;&gt;&lt;/a&gt;初始化 package.json&lt;/h1&gt;&lt;p&gt;随便找个目录 , 使用 &lt;c</summary>
      
    
    
    
    <category term="express" scheme="https://codehhr.cn/categories/express/"/>
    
    
    <category term="express" scheme="https://codehhr.cn/tags/express/"/>
    
  </entry>
  
  <entry>
    <title>日期格式化</title>
    <link href="https://codehhr.cn/2021/10/12/js/js-formatDate/"/>
    <id>https://codehhr.cn/2021/10/12/js/js-formatDate/</id>
    <published>2021-10-12T12:44:17.000Z</published>
    <updated>2021-10-12T12:50:02.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一般用在-Vue-里的-filter-上"><a href="#一般用在-Vue-里的-filter-上" class="headerlink" title="一般用在 Vue 里的 filter 上"></a>一般用在 Vue 里的 filter 上</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatDate</span>(<span class="params">d, format</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> year = d.getFullYear(),</span><br><span class="line">    month = d.getMonth() + <span class="number">1</span>,</span><br><span class="line">    date = d.getDate(),</span><br><span class="line">    hour = d.getHours(),</span><br><span class="line">    minute = d.getMinutes(),</span><br><span class="line">    second = d.getSeconds(),</span><br><span class="line">    day = d.getDay(),</span><br><span class="line">    week = [<span class="string">&quot;日&quot;</span>, <span class="string">&quot;一&quot;</span>, <span class="string">&quot;二&quot;</span>, <span class="string">&quot;三&quot;</span>, <span class="string">&quot;四&quot;</span>, <span class="string">&quot;五&quot;</span>, <span class="string">&quot;六&quot;</span>];</span><br><span class="line">  <span class="keyword">return</span> format</span><br><span class="line">    .replace(<span class="regexp">/yyyy/</span>, year)</span><br><span class="line">    .replace(<span class="regexp">/yy/</span>, formatNum(year % <span class="number">100</span>))</span><br><span class="line">    .replace(<span class="regexp">/MM/</span>, formatNum(month))</span><br><span class="line">    .replace(<span class="regexp">/M/</span>, month)</span><br><span class="line">    .replace(<span class="regexp">/dd/</span>, formatNum(date))</span><br><span class="line">    .replace(<span class="regexp">/d/</span>, date)</span><br><span class="line">    .replace(<span class="regexp">/HH/</span>, formatNum(hour))</span><br><span class="line">    .replace(<span class="regexp">/H/</span>, hour)</span><br><span class="line">    .replace(<span class="regexp">/hh/</span>, formatNum(hour % <span class="number">12</span>))</span><br><span class="line">    .replace(<span class="regexp">/h/</span>, hour % <span class="number">12</span>)</span><br><span class="line">    .replace(<span class="regexp">/mm/</span>, formatNum(minute))</span><br><span class="line">    .replace(<span class="regexp">/m/</span>, minute)</span><br><span class="line">    .replace(<span class="regexp">/ss/</span>, formatNum(second))</span><br><span class="line">    .replace(<span class="regexp">/s/</span>, second)</span><br><span class="line">    .replace(<span class="regexp">/w/</span>, week[day]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatNum</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> n &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + +n : n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一般用在-Vue-里的-filter-上&quot;&gt;&lt;a href=&quot;#一般用在-Vue-里的-filter-上&quot; class=&quot;headerlink&quot; title=&quot;一般用在 Vue 里的 filter 上&quot;&gt;&lt;/a&gt;一般用在 Vue 里的 filter 上&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="js" scheme="https://codehhr.cn/categories/js/"/>
    
    
    <category term="js" scheme="https://codehhr.cn/tags/js/"/>
    
    <category term="formatDate" scheme="https://codehhr.cn/tags/formatDate/"/>
    
  </entry>
  
  <entry>
    <title>用 Js 封装单链表</title>
    <link href="https://codehhr.cn/2021/10/12/data-structure/ds-linkedList/"/>
    <id>https://codehhr.cn/2021/10/12/data-structure/ds-linkedList/</id>
    <published>2021-10-12T12:28:45.000Z</published>
    <updated>2021-10-19T16:49:44.554Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 单向链表</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装链表类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LinkedList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 链表头部 (头指针)</span></span><br><span class="line">  <span class="built_in">this</span>.head = <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">// 链表长度</span></span><br><span class="line">  <span class="built_in">this</span>.length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 封装节点</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.data = data;</span><br><span class="line">    <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 追加节点方法</span></span><br><span class="line">  <span class="comment">// data: 追加节点内容</span></span><br><span class="line">  LinkedList.prototype.appendNode = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 创建新节点</span></span><br><span class="line">    <span class="keyword">let</span> newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断追加位置</span></span><br><span class="line">    <span class="comment">// 如果链表长度为 0, 头指针指向这个新节点</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.head = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 把头节点当作临时节点, 一直向后找, 直到临时节点的 next 指向 null</span></span><br><span class="line">      <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">      <span class="keyword">while</span> (currentNode.next) &#123;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 此时以找到链表尾部, 可把新节点追加在后面</span></span><br><span class="line">      currentNode.next = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.length++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 插入节点方法</span></span><br><span class="line">  <span class="comment">// position: 插入位置</span></span><br><span class="line">  <span class="comment">// data: 插入内容</span></span><br><span class="line">  LinkedList.prototype.insertNode = <span class="function"><span class="keyword">function</span> (<span class="params">position, data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 先排除几种情况</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">      <span class="comment">// 如果插入位置为 0, 则让新节点指向原来的第一个节点, 也就是原来头指针指向的节点</span></span><br><span class="line">      <span class="keyword">if</span> (position == <span class="number">0</span>) &#123;</span><br><span class="line">        newNode.next = <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="built_in">this</span>.head = newNode;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 临时节点, 去匹配 position</span></span><br><span class="line">        <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="comment">// 因为插入节点需要两个节点操作, previousNode 为前驱, currentNode 为后继</span></span><br><span class="line">        <span class="keyword">let</span> previousNode = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 找到 position 的位置</span></span><br><span class="line">        <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">          previousNode = currentNode;</span><br><span class="line">          currentNode = currentNode.next;</span><br><span class="line">        &#125;</span><br><span class="line">        newNode.next = currentNode;</span><br><span class="line">        previousNode.next = newNode;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">this</span>.length++;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取对应节点数据方法</span></span><br><span class="line">  LinkedList.prototype.getNodeDataByPosition = <span class="function"><span class="keyword">function</span> (<span class="params">position</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 排除越界访问情况</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 从头节点开始往后找</span></span><br><span class="line">      <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">      <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> currentNode.data;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// indexOf 方法</span></span><br><span class="line">  LinkedList.prototype.indexOf = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (currentNode) &#123;</span><br><span class="line">      <span class="keyword">if</span> (currentNode.data == data) &#123;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">        index++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// update 方法</span></span><br><span class="line">  LinkedList.prototype.updateNode = <span class="function"><span class="keyword">function</span> (<span class="params">position, newData</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 越界情况</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 先找到要修改的节点的位置</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">      currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">    currentNode.data = newData;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// removeAt 方法</span></span><br><span class="line">  LinkedList.prototype.removeAt = <span class="function"><span class="keyword">function</span> (<span class="params">position</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (position == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.head = <span class="built_in">this</span>.head.next;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> previousNode = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">          previousNode = currentNode;</span><br><span class="line">          currentNode = currentNode.next;</span><br><span class="line">        &#125;</span><br><span class="line">        previousNode.next = currentNode.next;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">this</span>.length--;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// remove 方法</span></span><br><span class="line">  LinkedList.prototype.remove = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.removeAt(<span class="built_in">this</span>.indexOf(data));</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// isEmpty 方法</span></span><br><span class="line">  LinkedList.prototype.isEmpty = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length == <span class="number">0</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// size 方法</span></span><br><span class="line">  LinkedList.prototype.size = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="数据结构" scheme="https://codehhr.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="链表结构" scheme="https://codehhr.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://codehhr.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="单链表" scheme="https://codehhr.cn/tags/%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>用 Js 封装优先级队列</title>
    <link href="https://codehhr.cn/2021/10/12/data-structure/ds-priorityQueue/"/>
    <id>https://codehhr.cn/2021/10/12/data-structure/ds-priorityQueue/</id>
    <published>2021-10-12T12:23:10.000Z</published>
    <updated>2021-10-19T11:27:46.567Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 优先级队列</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装一个类来实现: 优先级队列</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PriorityQueue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 封装属性</span></span><br><span class="line">  <span class="built_in">this</span>.list = [];</span><br><span class="line">  <span class="comment">// 封装一个类来承载带优先级的数据</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Element</span>(<span class="params">data, priority</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.data = data;</span><br><span class="line">    <span class="built_in">this</span>.priority = priority;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  PriorityQueue.prototype.add = <span class="function"><span class="keyword">function</span> (<span class="params">data, priority</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> element = <span class="keyword">new</span> Element(data, priority);</span><br><span class="line">    <span class="comment">// 判断优先级并将元素加入队列</span></span><br><span class="line">    <span class="comment">// 如果队列长度为 0,直接加入队列</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.list.length) &#123;</span><br><span class="line">      <span class="built_in">this</span>.list.push(element);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 立一个 flag,当 element 加入 list 了就把 added 改为 true</span></span><br><span class="line">      <span class="keyword">let</span> added = <span class="literal">false</span>;</span><br><span class="line">      <span class="comment">// 遍历 list,比较优先级</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.list.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (element.priority &lt; <span class="built_in">this</span>.list[i].priority) &#123;</span><br><span class="line">          <span class="built_in">this</span>.list.splice(i, <span class="number">0</span>, element);</span><br><span class="line">          added = <span class="literal">true</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果遍历完 list 都没有找到合适的位置,就直接加到后面</span></span><br><span class="line">      <span class="keyword">if</span> (!added) &#123;</span><br><span class="line">        <span class="built_in">this</span>.list.push(element);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.list;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个优先级队列实例</span></span><br><span class="line"><span class="keyword">let</span> priorityQueue = <span class="keyword">new</span> PriorityQueue();</span><br><span class="line"><span class="comment">// 试着添加元素</span></span><br><span class="line">priorityQueue.add(<span class="string">&quot;A&quot;</span>, <span class="number">10</span>);</span><br><span class="line">priorityQueue.add(<span class="string">&quot;B&quot;</span>, <span class="number">40</span>);</span><br><span class="line">priorityQueue.add(<span class="string">&quot;C&quot;</span>, <span class="number">20</span>);</span><br><span class="line">priorityQueue.add(<span class="string">&quot;D&quot;</span>, <span class="number">100</span>);</span><br><span class="line">priorityQueue.add(<span class="string">&quot;E&quot;</span>, <span class="number">60</span>);</span><br><span class="line"><span class="built_in">console</span>.log(priorityQueue);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="数据结构" scheme="https://codehhr.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="队列结构" scheme="https://codehhr.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://codehhr.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="队列" scheme="https://codehhr.cn/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>面试题-击鼓传花 ( 队列 )</title>
    <link href="https://codehhr.cn/2021/10/12/data-structure/ds-passflower/"/>
    <id>https://codehhr.cn/2021/10/12/data-structure/ds-passflower/</id>
    <published>2021-10-12T12:07:56.000Z</published>
    <updated>2021-10-20T12:04:18.224Z</updated>
    
    <content type="html"><![CDATA[<div class="note warning no-icon flat"><p>设有 <code>N</code> 个人围成一个圈 , 随机选一个数字 , 从第一个人开始数数 , 数到该数字的人出列 , 直到剩下最后一人 , 即为赢家</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  击鼓传花</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建队列结构</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.queue = [];</span><br><span class="line">  <span class="comment">// 队尾添加新元素</span></span><br><span class="line">  Queue.prototype.add = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.queue.push(e);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 队首删除</span></span><br><span class="line">  Queue.prototype.del = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.queue.shift();</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 查看队首元素</span></span><br><span class="line">  Queue.prototype.head = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.queue[<span class="number">0</span>];</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 检查队列的长度</span></span><br><span class="line">  Queue.prototype.size = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.queue.length;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装函数实现: 击鼓传花</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">passFlower</span>(<span class="params">list, n</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 创建队列结构</span></span><br><span class="line">  <span class="keyword">let</span> queue = <span class="keyword">new</span> Queue();</span><br><span class="line">  <span class="comment">// 将所有人加入队列</span></span><br><span class="line">  list.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    queue.add(item);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 开始数数,数了的人排到后面,重新依次加入队列,数到 n 的人淘汰,从队列中删除</span></span><br><span class="line">  <span class="comment">// 因为是数到 n 的人淘汰,所以前 n-1 的人 (下标 0&lt;i&lt;n-1) 重新加入队列</span></span><br><span class="line">  <span class="comment">// 重复此操作,直到剩下一人</span></span><br><span class="line">  <span class="keyword">while</span> (queue.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">      queue.add(queue.del());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 剩下的这个人 (第 n 个人) 被淘汰</span></span><br><span class="line">    queue.del();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 拿到最后剩下的那个人 (赢家) 及下标</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: queue.head(),</span><br><span class="line">    <span class="attr">index</span>: list.indexOf(queue.head()),</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> list = [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;E&quot;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(passFlower(list, <span class="number">3</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note warning no-icon flat&quot;&gt;&lt;p&gt;设有 &lt;code&gt;N&lt;/code&gt; 个人围成一个圈 , 随机选一个数字 , 从第一个人开始数数 , 数到该数字的人出列 , 直到剩下最后一人 , 即为赢家&lt;/p&gt;
&lt;/div&gt;

&lt;figure </summary>
      
    
    
    
    <category term="数据结构" scheme="https://codehhr.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="队列结构" scheme="https://codehhr.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://codehhr.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="队列" scheme="https://codehhr.cn/tags/%E9%98%9F%E5%88%97/"/>
    
    <category term="击鼓传花" scheme="https://codehhr.cn/tags/%E5%87%BB%E9%BC%93%E4%BC%A0%E8%8A%B1/"/>
    
  </entry>
  
  <entry>
    <title>实现 promiseAll 方法</title>
    <link href="https://codehhr.cn/2021/10/12/js/js-promiseAll/"/>
    <id>https://codehhr.cn/2021/10/12/js/js-promiseAll/</id>
    <published>2021-10-12T11:42:01.000Z</published>
    <updated>2021-10-12T11:51:02.108Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">&quot;I&#x27;m p1&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">&quot;I&#x27;m p2&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dealPromiseAll</span>(<span class="params">list</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> promiseArr = [];</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    list.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">      item.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        promiseArr.push(res);</span><br><span class="line">        <span class="keyword">if</span> (index == list.length - <span class="number">1</span>) &#123;</span><br><span class="line">          resolve(promiseArr);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dealPromiseAll([p1, p2]).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res); <span class="comment">// [ &quot;I&#x27;m p1&quot;, &quot;I&#x27;m p2&quot; ]</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="js" scheme="https://codehhr.cn/categories/js/"/>
    
    
    <category term="js" scheme="https://codehhr.cn/tags/js/"/>
    
    <category term="javascript" scheme="https://codehhr.cn/tags/javascript/"/>
    
    <category term="promiseAll" scheme="https://codehhr.cn/tags/promiseAll/"/>
    
  </entry>
  
  <entry>
    <title>配置 loader 进行 css 打包</title>
    <link href="https://codehhr.cn/2021/09/20/webpack/webpack-loader/"/>
    <id>https://codehhr.cn/2021/09/20/webpack/webpack-loader/</id>
    <published>2021-09-20T08:07:08.000Z</published>
    <updated>2021-09-20T13:32:17.179Z</updated>
    
    <content type="html"><![CDATA[<div class="note info flat"><p><code>Webpack</code> 原生支持 <code>js</code> 和 <code>json</code> , 可以使用 <code>loader</code> 告诉 <code>webpack</code> 加载 <code>CSS</code> 文件 , 或者将 <code>TypeScript</code> 转为 <code>JavaScript</code></p></div><h1 id="安装相对应的-loader"><a href="#安装相对应的-loader" class="headerlink" title="安装相对应的 loader"></a>安装相对应的 loader</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install style-loader css-loader -S -D</span><br></pre></td></tr></table></figure><h1 id="引入-CSS"><a href="#引入-CSS" class="headerlink" title="引入 CSS"></a>引入 CSS</h1><p>在入口文件里使用 <code>import</code> 引入 <code>css</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;./style.css&quot;</span>;</span><br></pre></td></tr></table></figure><h1 id="loader-的配置"><a href="#loader-的配置" class="headerlink" title="loader 的配置"></a>loader 的配置</h1><p>在 <code>webpack.config.js</code> 里添加配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  <span class="comment">// 对某个格式的文件进行转换</span></span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 正则匹配</span></span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      <span class="comment">// style-loader 将 js 的样式内容插入</span></span><br><span class="line">      <span class="comment">// css-loader 将 css 转换为 js</span></span><br><span class="line">      <span class="comment">// use 数组里 loader 解析的顺序是从后往前 (逆序)</span></span><br><span class="line">      use: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">  ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前 <code>webpack.config.js</code> 的完整配置是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 入口文件</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/index.js&quot;</span>,</span><br><span class="line">  <span class="comment">// 输出</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="comment">// 输出文件名</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;pack.js&quot;</span>,</span><br><span class="line">    <span class="comment">// 输出路径 (绝对路径)</span></span><br><span class="line">    <span class="comment">// 利用 path 模块获取当前路径</span></span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 打包模式; 开发环境--development, 生产环境--production</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="comment">// 对某个格式的文件进行转换</span></span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 正则匹配</span></span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">// style-loader 将 js 的样式内容插入</span></span><br><span class="line">        <span class="comment">// css-loader 将 css 转换为 js</span></span><br><span class="line">        <span class="comment">// use 数组里 loader 解析的顺序是从后往前 (逆序)</span></span><br><span class="line">        use: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="尝试打包"><a href="#尝试打包" class="headerlink" title="尝试打包"></a>尝试打包</h1><p>在根目录 (<code>webpack.config.js</code> 所在路径) 下直接输入 <code>webpack</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack</span><br></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>在 <code>html</code> 文件里引入打包好的 <code>js</code> 文件 , 用浏览器打开验证 <code>样式</code> 是否生效</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info flat&quot;&gt;&lt;p&gt;&lt;code&gt;Webpack&lt;/code&gt; 原生支持 &lt;code&gt;js&lt;/code&gt; 和 &lt;code&gt;json&lt;/code&gt; , 可以使用 &lt;code&gt;loader&lt;/code&gt; 告诉 &lt;code&gt;webpack&lt;/co</summary>
      
    
    
    
    <category term="Webpack" scheme="https://codehhr.cn/categories/Webpack/"/>
    
    
    <category term="Webpack" scheme="https://codehhr.cn/tags/Webpack/"/>
    
    <category term="loader" scheme="https://codehhr.cn/tags/loader/"/>
    
  </entry>
  
  <entry>
    <title>Webpack 使用配置文件打包</title>
    <link href="https://codehhr.cn/2021/09/19/webpack/webpack-use-config/"/>
    <id>https://codehhr.cn/2021/09/19/webpack/webpack-use-config/</id>
    <published>2021-09-19T06:16:55.000Z</published>
    <updated>2021-09-20T13:02:42.111Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h1><p>创建 <code>webpack.config.js</code> 文件 , 一般放在项目根目录下</p><h2 id="文件内容"><a href="#文件内容" class="headerlink" title="文件内容"></a>文件内容</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 入口文件</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/index.js&quot;</span>,</span><br><span class="line">  <span class="comment">// 输出</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="comment">// 输出文件名</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;pack.js&quot;</span>,</span><br><span class="line">    <span class="comment">// 输出路径 (绝对路径)</span></span><br><span class="line">    <span class="comment">// 利用 path 模块获取当前路径</span></span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 打包模式; 开发环境--development, 生产环境--production</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="试着打包"><a href="#试着打包" class="headerlink" title="试着打包"></a>试着打包</h2><p>终端下直接输入 <code>webpack</code> , 这次不用输入参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;创建配置文件&quot;&gt;&lt;a href=&quot;#创建配置文件&quot; class=&quot;headerlink&quot; title=&quot;创建配置文件&quot;&gt;&lt;/a&gt;创建配置文件&lt;/h1&gt;&lt;p&gt;创建 &lt;code&gt;webpack.config.js&lt;/code&gt; 文件 , 一般放在项目根目录下&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Webpack" scheme="https://codehhr.cn/categories/Webpack/"/>
    
    
    <category term="Webpack" scheme="https://codehhr.cn/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>Webpack 打包初体验</title>
    <link href="https://codehhr.cn/2021/09/17/webpack/webpack-first/"/>
    <id>https://codehhr.cn/2021/09/17/webpack/webpack-first/</id>
    <published>2021-09-17T14:44:25.000Z</published>
    <updated>2021-09-19T06:48:39.447Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装-Webpack"><a href="#安装-Webpack" class="headerlink" title="安装 Webpack"></a>安装 Webpack</h1><p>直接全局安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack webpack-cli -g</span><br></pre></td></tr></table></figure><h1 id="初始化-package-json"><a href="#初始化-package-json" class="headerlink" title="初始化 package.json"></a>初始化 package.json</h1><p><code>-y</code> 参数就是 <code>yes</code> , 省得一路回车</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><h1 id="试着打包几个文件"><a href="#试着打包几个文件" class="headerlink" title="试着打包几个文件"></a>试着打包几个文件</h1><p>比如按照 <code>Vue</code> 框架的目录 , 创建一个 <code>src</code> 的子文件夹 , 在 <code>src</code> 里面创建一个 <code>index.js</code> 和 <code>data.js</code> 的文件 , <strong>把 <code>index.js</code> 但当作入口文件</strong></p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><ul><li>project<ul><li>src<ul><li>index.js</li><li>data.js</li></ul></li></ul></li></ul><h2 id="文件内容"><a href="#文件内容" class="headerlink" title="文件内容"></a>文件内容</h2><p>随便写点东西</p><h3 id="data-json"><a href="#data-json" class="headerlink" title="data.json"></a>data.json</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">job</span>: <span class="string">&quot;Coding every day&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 data.json</span></span><br><span class="line"><span class="keyword">import</span> data <span class="keyword">from</span> <span class="string">&quot;./date&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;这是 index.js&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br></pre></td></tr></table></figure><h1 id="安装-Webpack-依赖"><a href="#安装-Webpack-依赖" class="headerlink" title="安装 Webpack 依赖"></a>安装 Webpack 依赖</h1><p><code>-S</code> 就是 <code>--save</code> , 用于生产环境 , <code>-D</code> 就是 <code>--dev</code> , 用户开发环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack webpack-cli -S -D</span><br></pre></td></tr></table></figure><h1 id="打包为开发-生产-环境"><a href="#打包为开发-生产-环境" class="headerlink" title="打包为开发(生产)环境"></a>打包为开发(生产)环境</h1><p><strong>不同版本的 <code>webpack</code> 打包的命令参数还不太一样</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack --entry ./src/index.js --mode development</span><br></pre></td></tr></table></figure><p><code>--entry</code> 为入口文件 , <code>-o</code> 可以指定输出路径, <code>--mode</code> 指定打包模式 , <code>development</code> 为开发环境模式 , <code>production</code> 为生产环境模式 , 也就是上线用的 ( 压缩的 )</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安装-Webpack&quot;&gt;&lt;a href=&quot;#安装-Webpack&quot; class=&quot;headerlink&quot; title=&quot;安装 Webpack&quot;&gt;&lt;/a&gt;安装 Webpack&lt;/h1&gt;&lt;p&gt;直接全局安装&lt;/p&gt;
&lt;figure class=&quot;highlight ba</summary>
      
    
    
    
    <category term="Webpack" scheme="https://codehhr.cn/categories/Webpack/"/>
    
    
    <category term="Webpack" scheme="https://codehhr.cn/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 环境安装</title>
    <link href="https://codehhr.cn/2021/09/15/ts/ts-install-typescript/"/>
    <id>https://codehhr.cn/2021/09/15/ts/ts-install-typescript/</id>
    <published>2021-09-15T15:33:41.000Z</published>
    <updated>2021-09-15T16:18:07.497Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h1><p><code>TypeScript</code> 是 <code>JavaScript</code> 的一个超集 , 支持 <code>ECMAScript 6</code> 标准 ( <a href="https://codehhr.cn/categories/js/ES6/"><strong>关于 ES6</strong></a> )<br><code>TypeScript</code> 由微软开发的自由和开源的编程语言 , <code>TypeScript</code> 设计目标是开发大型应用 , 它可以编译成纯 <code>JavaScript</code> , 编译出来的 <code>JavaScript</code> 可以运行在任何浏览器上</p><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/ts/ts.jpeg" alt="TypeScript"></p><h1 id="TypeScript-安装"><a href="#TypeScript-安装" class="headerlink" title="TypeScript 安装"></a>TypeScript 安装</h1><h2 id="使用-npm-安装"><a href="#使用-npm-安装" class="headerlink" title="使用 npm 安装"></a>使用 <code>npm</code> 安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install typescript -g</span><br></pre></td></tr></table></figure><p><strong>Linux 用户的话 , <code>-g</code> 全局安装会出现 <code>permission denied</code> , 意思就是权限不够嘛 , 用 <code>sudo</code> 或 <code>root</code> 用户就可以了</strong></p><h2 id="安装完成后可以使用-tsc-命令来执行-TypeScript-的相关代码-比如查看版本号"><a href="#安装完成后可以使用-tsc-命令来执行-TypeScript-的相关代码-比如查看版本号" class="headerlink" title="安装完成后可以使用 tsc 命令来执行 TypeScript 的相关代码 , 比如查看版本号 :"></a>安装完成后可以使用 <code>tsc</code> 命令来执行 <code>TypeScript</code> 的相关代码 , 比如查看版本号 :</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc -v</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Version 4.4.3</span><br></pre></td></tr></table></figure><h2 id="把-ts-文件转换为-js-文件"><a href="#把-ts-文件转换为-js-文件" class="headerlink" title="把 ts 文件转换为 js 文件"></a>把 ts 文件转换为 js 文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc index.ts</span><br></pre></td></tr></table></figure><p>结果会多出一个 <code>js</code> 文件 , 然后你可以用 <code>node index.js</code> 来执行 , 确实有点麻烦 , 当然有解决办法 , 安装 <code>ts-node</code></p><h2 id="安装-ts-node"><a href="#安装-ts-node" class="headerlink" title="安装 ts-node"></a>安装 ts-node</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install ts-node -g</span><br></pre></td></tr></table></figure><h2 id="用-ts-node-来执行"><a href="#用-ts-node-来执行" class="headerlink" title="用 ts-node 来执行"></a>用 ts-node 来执行</h2><p>就是略慢 , 他得转换一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ts-node index.ts</span><br></pre></td></tr></table></figure><h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;TypeScript&quot;&gt;&lt;a href=&quot;#TypeScript&quot; class=&quot;headerlink&quot; title=&quot;TypeScript&quot;&gt;&lt;/a&gt;TypeScript&lt;/h1&gt;&lt;p&gt;&lt;code&gt;TypeScript&lt;/code&gt; 是 &lt;code&gt;JavaSc</summary>
      
    
    
    
    <category term="TypeScript" scheme="https://codehhr.cn/categories/TypeScript/"/>
    
    
    <category term="TypeScript" scheme="https://codehhr.cn/tags/TypeScript/"/>
    
    <category term="ts" scheme="https://codehhr.cn/tags/ts/"/>
    
    <category term="ts-node" scheme="https://codehhr.cn/tags/ts-node/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs EventEmitter</title>
    <link href="https://codehhr.cn/2021/09/08/node/node-EventEmitter/"/>
    <id>https://codehhr.cn/2021/09/08/node/node-EventEmitter/</id>
    <published>2021-09-08T14:24:57.000Z</published>
    <updated>2021-09-08T16:04:42.258Z</updated>
    
    <content type="html"><![CDATA[<div class="note info flat"><p><strong>Node.js EventEmitter</strong><br><code>Node.js</code> 所有的异步 <code>I/O</code> 操作在完成时都会发送一个事件到事件队列<br><code>Node.js</code> 里面的许多对象都会分发事件 : 一个 <code>net.Server</code> 对象会在每次有新连接时触发一个事件 , 一个 <code>fs.readStream</code> 对象会在文件被打开的时候触发一个事件 , 所有这些产生事件的对象都是 <code>events.EventEmitter</code> 的实例</p></div><h1 id="EventEmitter-类"><a href="#EventEmitter-类" class="headerlink" title="EventEmitter 类"></a>EventEmitter 类</h1><p><code>events</code> 模块只提供了一个对象： <code>events.EventEmitter</code> , <code>EventEmitter</code> 的核心就是事件触发与事件监听器功能的封装</p><p>可以通过 <code>require(&quot;events&quot;)</code> 来访问该模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 events 模块</span></span><br><span class="line"><span class="keyword">let</span> events = <span class="built_in">require</span>(<span class="string">&quot;events&quot;</span>);</span><br><span class="line"><span class="comment">// 创建 eventEmitter 对象</span></span><br><span class="line"><span class="keyword">let</span> eventEmitter = <span class="keyword">new</span> events.EventEmitter();</span><br></pre></td></tr></table></figure><h1 id="EventEmitter-的事件监听和触发"><a href="#EventEmitter-的事件监听和触发" class="headerlink" title="EventEmitter 的事件监听和触发"></a>EventEmitter 的事件监听和触发</h1><p><code>EventEmitter</code> 的每个事件由一个<code>事件名</code>和<code>若干个参数</code>组成 , 事件名是一个自定义的字符串 , 通常表达一定的语义 , 对于每个事件 , <code>EventEmitter</code> 支持若干个事件监听器<br>当事件触发时 , 注册到这个事件的事件监听器被依次调用 , 事件参数作为回调函数参数传递</p><p>让我们以下面的例子解释这个过程 :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 events 模块</span></span><br><span class="line"><span class="keyword">let</span> events = <span class="built_in">require</span>(<span class="string">&quot;events&quot;</span>);</span><br><span class="line"><span class="comment">// 创建 eventEmitter 对象</span></span><br><span class="line"><span class="keyword">let</span> eventEmitter = <span class="keyword">new</span> events.EventEmitter();</span><br><span class="line">eventEmitter.on(<span class="string">&quot;someEvent&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;listener1&quot;</span>, arg1, arg2);</span><br><span class="line">&#125;);</span><br><span class="line">eventEmitter.on(<span class="string">&quot;someEvent&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;listener2&quot;</span>, arg1, arg2);</span><br><span class="line">&#125;);</span><br><span class="line">eventEmitter.emit(<span class="string">&quot;someEvent&quot;</span>, <span class="string">&quot;参数 1&quot;</span>, <span class="string">&quot;参数 2&quot;</span>);</span><br></pre></td></tr></table></figure><p>执行结果 :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">listener1 参数 1 参数 2</span><br><span class="line">listener2 参数 1 参数 2</span><br></pre></td></tr></table></figure><p>以上例子中 , <code>eventEmitter</code> 为事件 <code>someEvent</code> 注册了两个事件监听器 , 然后触发了 <code>someEvent</code> 事件<br>运行结果中可以看到两个事件监听器回调函数被先后调用 , 这就是 <code>EventEmitter</code> 最简单的用法<br><strong><code>EventEmitter</code> 提供了多个属性 , 如 <code>on</code> 和 <code>emit</code> , <code>on</code> 函数用于绑定事件函数 , <code>emit</code> 属性用于触发一个事件</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info flat&quot;&gt;&lt;p&gt;&lt;strong&gt;Node.js EventEmitter&lt;/strong&gt;&lt;br&gt;&lt;code&gt;Node.js&lt;/code&gt; 所有的异步 &lt;code&gt;I/O&lt;/code&gt; 操作在完成时都会发送一个事件到事件队列&lt;br&gt;&lt;</summary>
      
    
    
    
    <category term="node" scheme="https://codehhr.cn/categories/node/"/>
    
    
    <category term="node" scheme="https://codehhr.cn/tags/node/"/>
    
    <category term="EventEmitter" scheme="https://codehhr.cn/tags/EventEmitter/"/>
    
  </entry>
  
  <entry>
    <title>Vue 路由守卫</title>
    <link href="https://codehhr.cn/2021/07/31/vue/vue-beforeEach/"/>
    <id>https://codehhr.cn/2021/07/31/vue/vue-beforeEach/</id>
    <published>2021-07-31T12:27:13.000Z</published>
    <updated>2021-08-16T13:09:21.604Z</updated>
    
    <content type="html"><![CDATA[<h1 id="全局前置守卫"><a href="#全局前置守卫" class="headerlink" title="全局前置守卫"></a>全局前置守卫</h1><p>你可以使用 <code>router.beforeEach</code> 注册一个全局前置守卫</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123; ... &#125;)</span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当一个导航触发时 , 全局前置守卫按照创建顺序调用,守卫是异步解析执行 , 此时导航在所有守卫 <code>resolve</code> 完之前一直处于 等待中</p><p><strong>每个守卫方法接收三个参数 :</strong></p><ul><li><code>to: Route</code>: 即将要进入的目标 <code>路由对象</code></li><li><code>from: Route</code>: 当前导航正要离开的路由</li><li><code>next: Function</code>: 一定要调用该方法来 <code>resolve</code> 这个钩子,执行效果依赖 <code>next</code> 方法的调用参数</li><li><code>next()</code>: 进行管道中的下一个钩子,如果全部钩子执行完了 , 则导航的状态就是 <code>confirmed</code> (确认的)<ul><li><code>next(false)</code>: 中断当前的导航,如果浏览器的 <code>URL</code> 改变了 (可能是用户手动或者浏览器后退按钮) , 那么 <code>URL</code> 地址会重置到 <code>from</code> 路由对应的地址</li><li><code>next(&#39;/&#39;)</code> 或者 <code>next(&#123; path: &#39;/&#39; &#125;)</code>: 跳转到一个不同的地址,当前的导航被中断 , 然后进行一个新的导航,你可以向 <code>next</code> 传递任意位置对象 , 且允许设置诸如 <code>replace: true</code>、<code>name: &#39;home&#39;</code> 之类的选项以及任何用在 <code>router-link</code> 的 <code>to</code> <code>prop</code> 或 <code>router.push</code> 中的选项</li><li><code>next(error)</code>: <code>(2.4.0+)</code> 如果传入 <code>next</code> 的参数是一个 <code>Error</code> 实例 , 则导航会被终止且该错误会被传递给 <code>router.onError()</code> 注册过的回调</li></ul></li></ul><p><strong>确保 <code>next</code> 函数在任何给定的导航守卫中都被严格调用一次 , 它可以出现多于一次 , 但是只能在所有的逻辑路径都不重叠的情况下，否则钩子永远都不会被解析或报错</strong> , 这里用一个在用户未能验证身份时重定向到 <code>/login</code> 的示例</p><p><strong>错误示范</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误示范</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.name !== <span class="string">&quot;Login&quot;</span> &amp;&amp; !isAuthenticated) next(&#123; <span class="attr">name</span>: <span class="string">&quot;Login&quot;</span> &#125;);</span><br><span class="line">  <span class="comment">// 如果用户未能验证身份,则 next 会被调用两次,这是不对的</span></span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>正确示范</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确示范</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.name !== <span class="string">&quot;Login&quot;</span> &amp;&amp; !isAuthenticated) &#123;</span><br><span class="line">    next(&#123; <span class="attr">name</span>: <span class="string">&quot;Login&quot;</span> &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="路由独享的守卫"><a href="#路由独享的守卫" class="headerlink" title="路由独享的守卫"></a>路由独享的守卫</h1><p>你可以在路由配置上直接定义 <code>beforeEnter</code> 守卫 :<br>这些守卫与全局前置守卫的方法参数是一样的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/foo&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: Foo,</span><br><span class="line">      <span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;全局前置守卫&quot;&gt;&lt;a href=&quot;#全局前置守卫&quot; class=&quot;headerlink&quot; title=&quot;全局前置守卫&quot;&gt;&lt;/a&gt;全局前置守卫&lt;/h1&gt;&lt;p&gt;你可以使用 &lt;code&gt;router.beforeEach&lt;/code&gt; 注册一个全局前置守卫&lt;/p&gt;
&lt;f</summary>
      
    
    
    
    <category term="Vue" scheme="https://codehhr.cn/categories/Vue/"/>
    
    <category term="Vue基础" scheme="https://codehhr.cn/categories/Vue/Vue%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Vue" scheme="https://codehhr.cn/tags/Vue/"/>
    
    <category term="Vue-router" scheme="https://codehhr.cn/tags/Vue-router/"/>
    
    <category term="beforeEach" scheme="https://codehhr.cn/tags/beforeEach/"/>
    
  </entry>
  
  <entry>
    <title>Vuex</title>
    <link href="https://codehhr.cn/2021/07/31/vue/vuex/"/>
    <id>https://codehhr.cn/2021/07/31/vue/vuex/</id>
    <published>2021-07-31T12:24:20.000Z</published>
    <updated>2021-08-14T10:15:09.119Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vuex-是一个专为-Vue-js-应用程序开发的状态管理模式"><a href="#Vuex-是一个专为-Vue-js-应用程序开发的状态管理模式" class="headerlink" title="Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式"></a>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式</h1><ul><li><code>state</code> , 驱动应用的数据源</li><li><code>view</code> , 以声明方式将 state 映射到视图</li><li><code>actions</code> , 响应在 view 上的用户输入导致的状态变化</li></ul><p><strong>以下是一个表示“单向数据流”理念的简单示意</strong><br><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vuebasic/vuexstate.png" alt="state_view_actions"></p><p>但是 , 当我们的应用遇到多个组件共享状态时 , 单向数据流的简洁性很容易被破坏 :</p><ul><li>多个视图依赖于同一状态</li><li>来自不同视图的行为需要变更同一状态</li></ul><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vuebasic/vuex.png" alt="vuex"></p><h1 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h1><h1 id="State"><a href="#State" class="headerlink" title="State"></a>State</h1><h2 id="在-Vue-组件中获得-Vuex-状态"><a href="#在-Vue-组件中获得-Vuex-状态" class="headerlink" title="在 Vue 组件中获得 Vuex 状态"></a>在 <code>Vue</code> 组件中获得 <code>Vuex</code> 状态</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比如创建一个组件</span></span><br><span class="line"><span class="keyword">const</span> componentA = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;div&gt;&#123;&#123; valueA &#125;&#125;&lt;/div&gt;`</span>,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">valueA</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> store.state.valueA;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>每当 <code>store.state.valueA</code> 变化的时候, 都会重新求取计算属性 , 并且触发更新相关联的 <code>DOM</code></p><p>然而 , 这种模式导致组件依赖全局状态单例 ,在模块化的构建系统中 , 在每个需要使用 <code>state</code> 的组件中需要频繁地导入 , 并且在测试组件时需要模拟状态。</p><p><code>Vuex</code> 通过 <code>store</code> 选项 , 提供了一种机制将状态从根组件 <code>注入</code> 到每一个子组件中 ( 需调用 <code>Vue.use(Vuex)</code> )</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="comment">// 把 store 对象提供给 &quot;store&quot; 选项 , 这可以把 store 的实例注入所有的子组件</span></span><br><span class="line">  store,</span><br><span class="line">  <span class="attr">components</span>: &#123; componentA &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;app&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;componentA&gt;&lt;/componentA&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="mapState-辅助函数"><a href="#mapState-辅助函数" class="headerlink" title="mapState 辅助函数"></a>mapState 辅助函数</h3><p>当一个组件需要获取多个状态的时候 , 将这些状态都声明为计算属性会有些重复和冗余 , 为了解决这个问题 , 我们可以使用 <code>mapState</code> 辅助函数帮助我们生成计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    ...mapState(&#123;</span><br><span class="line">      <span class="attr">valueA</span>: <span class="string">&quot;valueA&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h1><p>有时候我们需要从 <code>store</code> 中的 <code>state</code> 中派生出一些状态 , 例如对列表进行过滤并计数:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  doneTodosCount () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.$store.state.todos.filter(<span class="function"><span class="params">todo</span> =&gt;</span> todo.done).length</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Vuex</code> 允许我们在 <code>store</code> 中定义 <code>getter</code> ( 可以认为是 <code>store</code> 的计算属性 ) , 就像计算属性一样 , <code>getter</code> 的返回值会根据它的依赖被缓存起来 , 且只有当它的依赖值发生了改变才会被重新计算</p><p><code>Getter</code> 接受 <code>state</code> 作为其第一个参数 :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">todos</span>: [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">&quot;...&quot;</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">&quot;...&quot;</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="attr">doneTodos</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.todos.filter(<span class="function">(<span class="params">todo</span>) =&gt;</span> todo.done);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="mapGetters-辅助函数"><a href="#mapGetters-辅助函数" class="headerlink" title="mapGetters 辅助函数"></a>mapGetters 辅助函数</h3><p><code>mapGetters</code> 辅助函数仅仅是将 <code>store</code> 中的 <code>getter</code> 映射到局部计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">// 使用对象展开运算符将 getter 混入 computed 对象中</span></span><br><span class="line">    ...mapGetters([</span><br><span class="line">      <span class="string">&quot;doneTodosCount&quot;</span>,</span><br><span class="line">      <span class="string">&quot;anotherGetter&quot;</span>,</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    ]),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果你想将一个 <code>getter</code> 属性另取一个名字 , 使用对象形式 :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...mapGetters(&#123;</span><br><span class="line">  <span class="comment">// 把 `this.doneCount` 映射为 `this.$store.getters.doneTodosCount`</span></span><br><span class="line">  <span class="attr">doneCount</span>: <span class="string">&#x27;doneTodosCount&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h1><p>更改 <code>Vuex</code> 的 <code>store</code> 中的状态的唯一方法是提交 <code>mutation</code></p><h2 id="提交载荷-Payload"><a href="#提交载荷-Payload" class="headerlink" title="提交载荷( Payload )"></a>提交载荷( <code>Payload</code> )</h2><p>你可以向 <code>store.commit</code> 传入额外的参数 , 即 <code>mutation</code> 的 载荷 ( `payload ) :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$store.commit(<span class="string">&quot;increment&quot;</span>, payload);</span><br></pre></td></tr></table></figure><p>在大多数情况下 , 载荷应该是一个对象 , 这样可以包含多个字段并且记录的 <code>mutation</code> 会更易读 :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.commit(<span class="string">&quot;increment&quot;</span>, &#123; <span class="attr">amount</span>: <span class="number">10</span> &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line">  increment (state, payload) &#123;</span><br><span class="line">    state.count = payload.amount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h1><p><code>Action</code> 类似于 <code>mutation</code> , 不同在于 :</p><ul><li><code>Action</code> 提交的是 <code>mutation</code> , 而不是直接变更状态</li><li><code>Action</code> 可以包含任意异步操作</li></ul><p><code>Action</code> 函数接受一个与 <code>store</code> 实例具有相同方法和属性的 <code>context</code> 对象 , 因此你可以调用 <code>context.commit</code> 提交一个 <code>mutation</code> , 或者通过 <code>context.state</code> 和 <code>context.getters</code> 来获取 <code>state</code> 和 <code>getters</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  increment (context,payload) &#123;</span><br><span class="line">     context.commit(<span class="string">&#x27;increment&#x27;</span>,payload)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>乍一眼看上去感觉多此一举 , 我们直接分发 <code>mutation</code> 岂不更方便 ? 实际上并非如此 , 还记得 <code>mutation</code> 必须同步执行这个限制么 ? <code>Action</code> 就不受约束 ! 我们可以在 <code>action</code> 内部执行异步操作 :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  increment (context,payload) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      context.commit(<span class="string">&#x27;increment&#x27;</span>,payload)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Actions</code> 支持同样的载荷方式和对象方式进行分发 :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以载荷形式分发</span></span><br><span class="line"><span class="built_in">this</span>.$store.dispatch(<span class="string">&quot;incrementAsync&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">amount</span>: <span class="number">10</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以对象形式分发</span></span><br><span class="line"><span class="built_in">this</span>.$store.dispatch(&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;incrementAsync&quot;</span>,</span><br><span class="line">  <span class="attr">amount</span>: <span class="number">10</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h1><p>由于使用单一状态树 , 应用的所有状态会集中到一个比较大的对象 , 当应用变得非常复杂时 , <code>store</code> 对象就有可能变得相当臃肿<br>为了解决以上问题 , <code>Vuex</code> 允许我们将 <code>store</code> 分割成模块 ( <code>module</code> ) , 每个模块拥有自己的 <code>state</code>、<code>mutation</code>、<code>action</code>、<code>getter</code>、甚至是嵌套子模块——从上至下进行同样方式的分割:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123; ... &#125;),</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123; ... &#125;),</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    <span class="attr">a</span>: moduleA,</span><br><span class="line">    <span class="attr">b</span>: moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.state.a <span class="comment">// -&gt; moduleA 的状态</span></span><br><span class="line">store.state.b <span class="comment">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure><h2 id="模块的局部状态"><a href="#模块的局部状态" class="headerlink" title="模块的局部状态"></a>模块的局部状态</h2><p>对于模块内部的 <code>mutation</code> 和 <code>getter</code> , 接收的第一个参数是模块的局部状态对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">increment</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 这里的 `state` 对象是模块的局部状态</span></span><br><span class="line">      state.count++;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">doubleCount</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.count * <span class="number">2</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>同样 , 对于模块内部的 action , 局部状态通过 <code>context.state</code> 暴露出来 , 根节点状态则为 <code>context.rootState</code> :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">incrementIfOddOnRootSum</span>(<span class="params">&#123; state, commit, rootState &#125;</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> ((state.count + rootState.count) % <span class="number">2</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        commit(<span class="string">&quot;increment&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>如果希望你的模块具有更高的封装度和复用性 , 你可以通过添加 <code>namespaced</code>: <code>true</code> 的方式使其成为带命名空间的模块。当模块被注册后 , 它的所有 <code>getter</code>、<code>action</code> 及 <code>mutation</code> 都会自动根据模块注册的路径调整命名 ,例如 :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    <span class="attr">account</span>: &#123;</span><br><span class="line">      <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 模块内容（module assets）</span></span><br><span class="line">      <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123; ... &#125;), <span class="comment">// 模块内的状态已经是嵌套的了 , 使用 `namespaced` 属性不会对其产生影响</span></span><br><span class="line">      <span class="attr">getters</span>: &#123;</span><br><span class="line">        isAdmin () &#123; ... &#125; <span class="comment">// -&gt; getters[&#x27;account/isAdmin&#x27;]</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">actions</span>: &#123;</span><br><span class="line">        login () &#123; ... &#125; <span class="comment">// -&gt; dispatch(&#x27;account/login&#x27;)</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">mutations</span>: &#123;</span><br><span class="line">        login () &#123; ... &#125; <span class="comment">// -&gt; commit(&#x27;account/login&#x27;)</span></span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 嵌套模块</span></span><br><span class="line">      <span class="attr">modules</span>: &#123;</span><br><span class="line">        <span class="comment">// 继承父模块的命名空间</span></span><br><span class="line">        <span class="attr">myPage</span>: &#123;</span><br><span class="line">          <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123; ... &#125;),</span><br><span class="line">          <span class="attr">getters</span>: &#123;</span><br><span class="line">            profile () &#123; ... &#125; <span class="comment">// -&gt; getters[&#x27;account/profile&#x27;]</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 进一步嵌套命名空间</span></span><br><span class="line">        <span class="attr">posts</span>: &#123;</span><br><span class="line">          <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">          <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123; ... &#125;),</span><br><span class="line">          <span class="attr">getters</span>: &#123;</span><br><span class="line">            popular () &#123; ... &#125; <span class="comment">// -&gt; getters[&#x27;account/posts/popular&#x27;]</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vuex-是一个专为-Vue-js-应用程序开发的状态管理模式&quot;&gt;&lt;a href=&quot;#Vuex-是一个专为-Vue-js-应用程序开发的状态管理模式&quot; class=&quot;headerlink&quot; title=&quot;Vuex 是一个专为 Vue.js 应用程序开发的状态管理模</summary>
      
    
    
    
    <category term="Vue" scheme="https://codehhr.cn/categories/Vue/"/>
    
    <category term="Vue脚手架" scheme="https://codehhr.cn/categories/Vue/Vue%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    
    
    <category term="Vue" scheme="https://codehhr.cn/tags/Vue/"/>
    
    <category term="vuex" scheme="https://codehhr.cn/tags/vuex/"/>
    
  </entry>
  
  <entry>
    <title>Vue 中路由的使用</title>
    <link href="https://codehhr.cn/2021/07/25/vue/vue-router/"/>
    <id>https://codehhr.cn/2021/07/25/vue/vue-router/</id>
    <published>2021-07-25T09:36:06.000Z</published>
    <updated>2021-08-11T14:09:35.136Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是路由"><a href="#什么是路由" class="headerlink" title="什么是路由"></a>什么是路由</h1><ul><li>后端路由 : 对于普通的网站 , 所有的超链接都是 URL 地址 , 所有的 <code>URL</code> 地址都对应服务器上对应的资源</li><li>前端路由 : 对于单页面应用程序来说 , 主要通过 URL 中的 <code>hash</code> ( <code>#</code> 号 ) 来实现不同页面之间的切换 , 同时 , <code>hash</code> 有一个特点 : <code>HTTP</code> 请求中不会包含 <code>hash</code> 相关的内容 ; 所以 , 单页面程序中的页面跳转主要用 <code>hash</code> 实现;</li><li>在单页面应用程序中 , 这种通过 <code>hash</code> 改变来切换页面的方式 , 称作前端路由 ( 区别于后端路由 )</li></ul><a class="btn-beautify button--animated green larger" href="https://router.vuejs.org/zh/"   title="中文官网"><i class="far fa-hand-point-right"></i><span>中文官网</span></a><h1 id="路由的基本使用"><a href="#路由的基本使用" class="headerlink" title="路由的基本使用"></a>路由的基本使用</h1><ul><li>引入 <code>js</code> 文件 , 这个 <code>js</code> 需要放在 <code>vue.js</code>的后面 , 自动安装 ( 提供了一个 <code>VueRouter</code> 的构造方法 )</li><li>创建路由 <code>new VueRouter()</code> , 接受的参数是一个对象</li><li>在实例化的对象里配置属性 <code>routes:[]</code> , 这个数组里的对象包含 <code>path</code> 属性和 <code>component</code> 属性</li><li><code>path</code> 属性是 <code>url</code> , <code>component</code> 属性就是显示的组件 ( 传组件的对象 )</li><li>创建的路由需要和 <code>vue</code> 实例关联一下</li><li>路由到的组件显示在哪个位置 <code>&lt;router-view&gt;&lt;/router-view&gt;</code></li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>引入 <code>vue-router.js</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue-router/3.5.2/vue-router.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过路由切换的组件会显示在这里 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;login&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> login = &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">template</span>: <span class="string">&quot;#login&quot;</span>,</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 这里实例化了一个路由</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">routes</span>: [</span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">path</span>: <span class="string">&quot;/login&quot;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="comment">//这里需要注意的是直接把组件的对象放在这里</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">component</span>: login,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">      ],</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 把路由挂在到实例上</span></span></span><br><span class="line"><span class="javascript">      <span class="attr">router</span>: router,</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="路由的跳转"><a href="#路由的跳转" class="headerlink" title="路由的跳转"></a>路由的跳转</h1><ul><li><code>router-link</code> 标签可以设置 <code>to</code> 属性</li><li>默认是 <code>a</code> 标签 , 可以通过 <code>tag</code> 设置包裹标签</li></ul><p><strong>示例</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/register&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h1><p><code>redirect</code> 可以进行路由的重定向</p><a class="btn-beautify button--animated green larger" href="https://vue-daily.netlify.app/vue-router.html"   title="在线演示"><i class="far fa-hand-point-right"></i><span>在线演示</span></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Blog<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> home = &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&quot;#home&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> blog = &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&quot;#blog&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/home&quot;</span>,</span><br><span class="line">      <span class="attr">redirect</span>: <span class="string">&quot;/blog&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/blog&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: blog,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="选中路由高亮"><a href="#选中路由高亮" class="headerlink" title="选中路由高亮"></a>选中路由高亮</h1><a class="btn-beautify button--animated green larger" href="https://vue-daily.netlify.app/vue-router.html"   title="在线演示"><i class="far fa-hand-point-right"></i><span>在线演示</span></a><ul><li>使用默认的样式<br>直接设置 <code>.router-link-active</code></li><li>自定义样式<br>配置  <code>linkActiveClass:&#39;自定义的类名&#39;</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/index&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: index,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">linkActiveClass</span>: <span class="string">&quot;router-active&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="定义参数"><a href="#定义参数" class="headerlink" title="定义参数"></a>定义参数</h1><h2 id="通过-query-的方式在-url-后加-参数名-参数的值"><a href="#通过-query-的方式在-url-后加-参数名-参数的值" class="headerlink" title="通过 query 的方式在 url 后加 ?参数名=参数的值"></a>通过 <code>query</code> 的方式在 <code>url</code> 后加 <code>?参数名=参数的值</code></h2><p>获取参数 : <code>$route.query.参数名</code></p><h2 id="使用浏览器参数的方式传递参数"><a href="#使用浏览器参数的方式传递参数" class="headerlink" title="使用浏览器参数的方式传递参数"></a>使用浏览器参数的方式传递参数</h2><ul><li>设置路由的时候 <code>/路由地址/:参数名</code></li><li>获取参数 <code>$route.params.参数名</code></li></ul><h1 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h1><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>路由传惨</span></div>    <div class="hide-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue-router/3.5.2/vue-router.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;script src=&#x27;https://codehhr.github.io/web/vue.js&#x27;&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-id">#app</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">1200px</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.router-link-active</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: <span class="number">#5e6466</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">2px</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">a</span><span class="selector-class">.router-active</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-weight</span>: <span class="number">800</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: <span class="number">#5e6466</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/index&quot;</span>&gt;</span>Index<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/blog?categories=vue&amp;tag=vue-touter&quot;</span>&gt;</span>Blog<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- &lt;router-link :to=&quot;&#123;path:&#x27;/about?page=2&#x27;&#125;&quot;&gt;About&lt;/router-link&gt; --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:to</span>=<span class="string">&quot;&#123;path:&#x27;/about&#x27;,query:&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">          id:1,</span></span></span><br><span class="line"><span class="string"><span class="tag">          page:2</span></span></span><br><span class="line"><span class="string"><span class="tag">      &#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span>About&lt;/router-link</span><br><span class="line">      &gt;</span><br><span class="line">      <span class="comment">&lt;!-- 观察地址变化 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in list&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">        path:&#x27;/about&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">        query:&#123;id:item.id,page:item.content&#125;</span></span></span><br><span class="line"><span class="string"><span class="tag">      &#125;&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        &#123;&#123;item.content&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name:&#x27;detail&#x27;,params:&#123;id:2&#125;&#125;&quot;</span>&gt;</span>Detail<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Index<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;about&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>About<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Blog<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;detail&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Detail<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> index = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">template</span>: <span class="string">&quot;#index&quot;</span>,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> home = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">template</span>: <span class="string">&quot;#home&quot;</span>,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> about = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">template</span>: <span class="string">&quot;#about&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="built_in">this</span>.$route.query);</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> blog = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">template</span>: <span class="string">&quot;#blog&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="built_in">this</span>.$route.query);</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> detail = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">template</span>: <span class="string">&quot;#detail&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="built_in">this</span>.$route.params);</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">routes</span>: [</span></span><br><span class="line"><span class="javascript">          &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">path</span>: <span class="string">&quot;/index&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">component</span>: index,</span></span><br><span class="line"><span class="javascript">          &#125;,</span></span><br><span class="line"><span class="javascript">          &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">path</span>: <span class="string">&quot;/home&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">component</span>: home,</span></span><br><span class="line"><span class="javascript">          &#125;,</span></span><br><span class="line"><span class="javascript">          &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">path</span>: <span class="string">&quot;/blog&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">component</span>: blog,</span></span><br><span class="line"><span class="javascript">          &#125;,</span></span><br><span class="line"><span class="javascript">          &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">path</span>: <span class="string">&quot;/about&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">component</span>: about,</span></span><br><span class="line"><span class="javascript">          &#125;,</span></span><br><span class="line"><span class="javascript">          &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">path</span>: <span class="string">&quot;/detail/:id&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">component</span>: detail,</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>: <span class="string">&quot;detail&quot;</span>,</span></span><br><span class="line"><span class="javascript">          &#125;,</span></span><br><span class="line"><span class="javascript">        ],</span></span><br><span class="line"><span class="javascript">        <span class="attr">linkActiveClass</span>: <span class="string">&quot;router-active&quot;</span>,</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">list</span>: [</span></span><br><span class="line"><span class="javascript">            &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">content</span>: <span class="string">&quot;A&quot;</span> &#125;,</span></span><br><span class="line"><span class="javascript">            &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">content</span>: <span class="string">&quot;B&quot;</span> &#125;,</span></span><br><span class="line"><span class="javascript">            &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">content</span>: <span class="string">&quot;C&quot;</span> &#125;,</span></span><br><span class="line"><span class="javascript">          ],</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 把路由挂在到实例上</span></span></span><br><span class="line"><span class="javascript">        router,</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是路由&quot;&gt;&lt;a href=&quot;#什么是路由&quot; class=&quot;headerlink&quot; title=&quot;什么是路由&quot;&gt;&lt;/a&gt;什么是路由&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;后端路由 : 对于普通的网站 , 所有的超链接都是 URL 地址 , 所有的 &lt;code&gt;URL&lt;/co</summary>
      
    
    
    
    <category term="Vue" scheme="https://codehhr.cn/categories/Vue/"/>
    
    <category term="Vue基础" scheme="https://codehhr.cn/categories/Vue/Vue%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Vue" scheme="https://codehhr.cn/tags/Vue/"/>
    
    <category term="Vue-router" scheme="https://codehhr.cn/tags/Vue-router/"/>
    
  </entry>
  
</feed>
