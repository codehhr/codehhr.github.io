<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Saturday_</title>
  
  
  <link href="https://codehhr.cn/atom.xml" rel="self"/>
  
  <link href="https://codehhr.cn/"/>
  <updated>2021-11-29T02:59:51.798Z</updated>
  <id>https://codehhr.cn/</id>
  
  <author>
    <name>HHR</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于 commonjs &amp; requirejs</title>
    <link href="https://codehhr.cn/2021/11/29/js/js-common-require/"/>
    <id>https://codehhr.cn/2021/11/29/js/js-common-require/</id>
    <published>2021-11-29T02:08:00.000Z</published>
    <updated>2021-11-29T02:59:51.798Z</updated>
    
    <content type="html"><![CDATA[<!-- <div class="note info flat"><p>info 提示块标籤</p></div> --><h1 id="commonjs-主要是为了代码模块化-node-端"><a href="#commonjs-主要是为了代码模块化-node-端" class="headerlink" title="commonjs 主要是为了代码模块化 (node 端)"></a><code>commonjs</code> 主要是为了代码模块化 (node 端)</h1><p>假设有一个目录是 <code>commonjs</code>,里面有俩文件,分别是<code>math.js</code> 和<code>server.js</code></p><h2 id="math-js"><a href="#math-js" class="headerlink" title="math.js"></a>math.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// math.js</span></span><br><span class="line"><span class="keyword">let</span> add = <span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> minus = <span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x - y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  add,</span><br><span class="line">  minus,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="server-js"><a href="#server-js" class="headerlink" title="server.js"></a>server.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">let</span> math = <span class="built_in">require</span>(<span class="string">&quot;./math.js&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(math.add(<span class="number">2</span>, <span class="number">1</span>));</span><br><span class="line"><span class="built_in">console</span>.log(math.minus(<span class="number">2</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure><h1 id="requirejs-是让浏览器端支持代码模块化的方式"><a href="#requirejs-是让浏览器端支持代码模块化的方式" class="headerlink" title="requirejs 是让浏览器端支持代码模块化的方式"></a><code>requirejs</code> 是让浏览器端支持代码模块化的方式</h1><p>假设有一个目录是 <code>requirejs</code>, 里面有仨文件,分别是 <code>add.js</code> , <code>minus.js</code> 和 <code>index.html</code></p><p><code>requirejs</code> 提供 <code>define</code> 方法来定义模块,第一个参数是依赖的模块,第二个参数是对外暴露此模块</p><h2 id="add-js"><a href="#add-js" class="headerlink" title="add.js"></a>add.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add.js</span></span><br><span class="line"><span class="keyword">let</span> add = <span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">define([], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> add;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="minus-js"><a href="#minus-js" class="headerlink" title="minus.js"></a>minus.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// minus.js</span></span><br><span class="line"><span class="keyword">let</span> minus = <span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x - y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">define([], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> minus;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="在浏览器端执行"><a href="#在浏览器端执行" class="headerlink" title="在浏览器端执行"></a>在浏览器端执行</h2><p>引入 <code>requirejs</code> 链接,比如 <code>CDN</code>, 再给 <code>data-main</code> 属性赋值入口文件 (比如是 <code>main.js</code>)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/require.js/2.3.6/require.min.js&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-main</span>=<span class="string">&quot;./main.js&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h2><p>这里依赖的路径以入口文件为基准</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">&quot;./add.js&quot;</span>, <span class="string">&quot;./minus.js&quot;</span>], <span class="function"><span class="keyword">function</span> (<span class="params">add, minus</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(add(<span class="number">2</span>, <span class="number">1</span>));</span><br><span class="line">  <span class="built_in">console</span>.log(minus(<span class="number">2</span>, <span class="number">1</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;!-- &lt;div class=&quot;note info flat&quot;&gt;&lt;p&gt;info 提示块标籤&lt;/p&gt;
&lt;/div&gt; --&gt;

&lt;h1 id=&quot;commonjs-主要是为了代码模块化-node-端&quot;&gt;&lt;a href=&quot;#commonjs-主要是为了代码模块化-node-端&quot; cla</summary>
      
    
    
    
    <category term="js" scheme="https://codehhr.cn/categories/js/"/>
    
    
    <category term="js" scheme="https://codehhr.cn/tags/js/"/>
    
    <category term="commonjs" scheme="https://codehhr.cn/tags/commonjs/"/>
    
    <category term="requirejs" scheme="https://codehhr.cn/tags/requirejs/"/>
    
  </entry>
  
  <entry>
    <title>Vue 打包优化</title>
    <link href="https://codehhr.cn/2021/11/18/vue/vue-build-optimization/"/>
    <id>https://codehhr.cn/2021/11/18/vue/vue-build-optimization/</id>
    <published>2021-11-18T14:16:21.000Z</published>
    <updated>2021-11-18T16:14:49.447Z</updated>
    
    <content type="html"><![CDATA[<h1 id="生成打包页面"><a href="#生成打包页面" class="headerlink" title="生成打包页面"></a>生成打包页面</h1><p>在 <code>package.json</code> 文件里的 <code>build</code> 命令后面添加 <code>--report</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;build&quot;</span>: <span class="string">&quot;vue-cli-service build --report&quot;</span>,</span><br></pre></td></tr></table></figure><p>或者在使用 <code>build</code> 命令时加上 <code>--report</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build --report</span><br></pre></td></tr></table></figure><h1 id="安装打包分析插件"><a href="#安装打包分析插件" class="headerlink" title="安装打包分析插件"></a>安装打包分析插件</h1><p><strong>webpack-bundle-analyzer 的 <a href="https://github.com/webpack-contrib/webpack-bundle-analyzer">Github</a></strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack-bundle-analyzer</span><br></pre></td></tr></table></figure><h2 id="配置-vue-打包配置文件"><a href="#配置-vue-打包配置文件" class="headerlink" title="配置 vue 打包配置文件"></a>配置 vue 打包配置文件</h2><p>在 <code>vue.config.js</code> 里对应添加以下内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> BundleAnalyzerPlugin =</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&quot;webpack-bundle-analyzer&quot;</span>).BundleAnalyzerPlugin;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">publicPath</span>: <span class="string">&quot;./&quot;</span>, <span class="comment">// 使用相对路径</span></span><br><span class="line">  <span class="attr">configureWebpack</span>: &#123;</span><br><span class="line">    <span class="attr">plugins</span>: [<span class="keyword">new</span> BundleAnalyzerPlugin()],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当再用 <code>npm run build</code> 的时候就会生成一个有关各模块大小的 <code>html</code> 页面, 也可以在控制台看到打包出来的 <code>js</code> 文件大小, 如下图</p><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/build-report.png" alt="build-report"></p><h1 id="利用引入-cdn-的方式来减小打包体积"><a href="#利用引入-cdn-的方式来减小打包体积" class="headerlink" title="利用引入 cdn 的方式来减小打包体积"></a>利用引入 <code>cdn</code> 的方式来减小打包体积</h1><h2 id="首先在-vue-config-js-里的-configureWebpack-里添加-externals-配置"><a href="#首先在-vue-config-js-里的-configureWebpack-里添加-externals-配置" class="headerlink" title="首先在 vue.config.js 里的 configureWebpack 里添加 externals 配置"></a>首先在 <code>vue.config.js</code> 里的 <code>configureWebpack</code> 里添加 <code>externals</code> 配置</h2><p>其属性对应的是导入过的模块, 值对应的是模块暴露的全局变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> BundleAnalyzerPlugin =</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&quot;webpack-bundle-analyzer&quot;</span>).BundleAnalyzerPlugin;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">configureWebpack</span>: &#123;</span><br><span class="line">    <span class="attr">externals</span>: &#123;</span><br><span class="line">      <span class="attr">vue</span>: <span class="string">&quot;Vue&quot;</span>,</span><br><span class="line">      <span class="string">&quot;vue-router&quot;</span>: <span class="string">&quot;VueRouter&quot;</span>,</span><br><span class="line">      <span class="attr">vuex</span>: <span class="string">&quot;Vuex&quot;</span>,</span><br><span class="line">      <span class="string">&quot;element-ui&quot;</span>: <span class="string">&quot;ELEMENT&quot;</span>,</span><br><span class="line">      <span class="attr">axios</span>: <span class="string">&quot;axios&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [<span class="keyword">new</span> BundleAnalyzerPlugin()],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样在打包的时候就不会把 <code>main.js</code> 里对应的 <code>import</code> 的模块打包进去</p><h2 id="引入-cdn"><a href="#引入-cdn" class="headerlink" title="引入 cdn"></a>引入 <code>cdn</code></h2><p><a href="https://www.bootcdn.cn/"><strong>bootcdn</strong></a></p><p>在 <code>public</code> 目录里的 <code>index.html</code> 里添加对应的 <code>cdn</code> 链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue-router/3.5.2/vue-router.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vuex/3.6.2/vuex.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/axios/0.21.1/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果引入了样式组件库, 同样在 <code>public/index.html</code> 里引入对应的链接<br>比如 <code>element-ui</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/element-ui/2.15.3/theme-chalk/index.min.css&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/element-ui/2.15.3/index.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>这样再打包后的体积就会变小了</strong></p><h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;生成打包页面&quot;&gt;&lt;a href=&quot;#生成打包页面&quot; class=&quot;headerlink&quot; title=&quot;生成打包页面&quot;&gt;&lt;/a&gt;生成打包页面&lt;/h1&gt;&lt;p&gt;在 &lt;code&gt;package.json&lt;/code&gt; 文件里的 &lt;code&gt;build&lt;/code&gt; 命令</summary>
      
    
    
    
    <category term="Vue" scheme="https://codehhr.cn/categories/Vue/"/>
    
    <category term="Vue 脚手架" scheme="https://codehhr.cn/categories/Vue/Vue-%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    
    
    <category term="Vue" scheme="https://codehhr.cn/tags/Vue/"/>
    
    <category term="vue优化" scheme="https://codehhr.cn/tags/vue%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Linux 终端走代理</title>
    <link href="https://codehhr.cn/2021/11/09/linux/linux-proxy/"/>
    <id>https://codehhr.cn/2021/11/09/linux/linux-proxy/</id>
    <published>2021-11-09T12:29:42.000Z</published>
    <updated>2021-11-11T13:44:12.204Z</updated>
    
    <content type="html"><![CDATA[<!-- <div class="note info flat"><p><strong>可以吧代理设置写入当前终端环境的 <code>rc</code> 文件或者在当前终端执行 ( 只作用在当前终端, 比较推荐 )</strong></p></div> --><h1 id="在当前终端执行"><a href="#在当前终端执行" class="headerlink" title="在当前终端执行"></a>在当前终端执行</h1><p>假设端口是 <code>2000</code>, 且是 <code>socks5</code> 协议</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ALL_PROXY=socks5://127.0.0.1:2000</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;!-- &lt;div class=&quot;note info flat&quot;&gt;&lt;p&gt;&lt;strong&gt;可以吧代理设置写入当前终端环境的 &lt;code&gt;rc&lt;/code&gt; 文件或者在当前终端执行 ( 只作用在当前终端, 比较推荐 )&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt; --&gt;

&lt;h1 id=</summary>
      
    
    
    
    <category term="linux" scheme="https://codehhr.cn/categories/linux/"/>
    
    
    <category term="linux" scheme="https://codehhr.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Ts 学习总结</title>
    <link href="https://codehhr.cn/2021/11/08/ts/ts-dataType/"/>
    <id>https://codehhr.cn/2021/11/08/ts/ts-dataType/</id>
    <published>2021-11-08T14:57:57.000Z</published>
    <updated>2022-01-03T11:55:36.600Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><h2 id="boolean-类型"><a href="#boolean-类型" class="headerlink" title="boolean 类型"></a>boolean 类型</h2><p>使用<code>boolean</code> 声明布尔值</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> finished: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>如果用构造函数 Boolean() 创造的对象不是布尔值，而是一个 Boolean 对象，会报错</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> finished: <span class="built_in">boolean</span> = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错：&#x27;boolean&#x27; is a primitive, but &#x27;Boolean&#x27; is a wrapper object</span></span><br></pre></td></tr></table></figure><h2 id="number-类型"><a href="#number-类型" class="headerlink" title="number 类型"></a>number 类型</h2><p>使用 number 来声明数字类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span> = <span class="number">12</span>; <span class="comment">// ES6中十进制表示法</span></span><br><span class="line"><span class="keyword">let</span> xnum: <span class="built_in">number</span> = <span class="number">0xf</span>; <span class="comment">// ES6中16进制表示法</span></span><br><span class="line"><span class="keyword">let</span> bnum: <span class="built_in">number</span> = <span class="number">0b1010</span>; <span class="comment">// ES6中二进制表示法</span></span><br><span class="line"><span class="keyword">let</span> onum: <span class="built_in">number</span> = <span class="number">0o744</span>; <span class="comment">// ES6中8进制表示法</span></span><br><span class="line"><span class="keyword">let</span> notANumber: <span class="built_in">number</span> = <span class="literal">NaN</span>;</span><br><span class="line"><span class="keyword">let</span> infinityNumber: <span class="built_in">number</span> = <span class="literal">Infinity</span>;</span><br></pre></td></tr></table></figure><p>编译结果：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span> = <span class="number">12</span>; <span class="comment">// ES6中十进制表示法</span></span><br><span class="line"><span class="keyword">let</span> xnum: <span class="built_in">number</span> = <span class="number">0xf</span>; <span class="comment">// ES6中16进制表示法</span></span><br><span class="line"><span class="keyword">let</span> bnum: <span class="built_in">number</span> = <span class="number">10</span>; <span class="comment">// ES6中二进制表示法</span></span><br><span class="line"><span class="keyword">let</span> onum: <span class="built_in">number</span> = <span class="number">484</span>; <span class="comment">// ES6中8进制表示法</span></span><br><span class="line"><span class="keyword">let</span> notANumber: <span class="built_in">number</span> = <span class="literal">NaN</span>;</span><br><span class="line"><span class="keyword">let</span> infinityNumber: <span class="built_in">number</span> = <span class="literal">Infinity</span>;</span><br></pre></td></tr></table></figure><p><strong>其中二进制和八进制会被编译为十进制</strong></p><h2 id="string-类型"><a href="#string-类型" class="headerlink" title="string 类型"></a>string 类型</h2><p>使用 string 来声明字符串类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name: <span class="built_in">string</span> = <span class="string">&quot;TypeScript&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="void-类型"><a href="#void-类型" class="headerlink" title="void 类型"></a>void 类型</h2><p>这个 void 在 js 里没有，在 ts 里表示没有任何返回值的函数:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">alert(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实则发现声明一个 void 类型的变量我感觉没啥用，只能赋值为 undefined：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nothing: <span class="built_in">void</span> = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><h2 id="null-和-undefined"><a href="#null-和-undefined" class="headerlink" title="null 和 undefined"></a>null 和 undefined</h2><p>声明方式</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> n: <span class="literal">null</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>这俩貌似也没啥用，和 void 的区别就是 undefined 和 null 都是所有类型的子类型，也就是 undefined 的类型的变量可以赋值给比如 number 类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面这两种方式都不会报错</span></span><br><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span> = u;</span><br><span class="line"><span class="keyword">let</span> unum: <span class="built_in">number</span> = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><p>void 类型试了不行</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> u: <span class="built_in">void</span>;</span><br><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span> = u;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错：Type &#x27;void&#x27; is not assignable to type &#x27;number&#x27;.</span></span><br></pre></td></tr></table></figure><h1 id="任意值-Any"><a href="#任意值-Any" class="headerlink" title="任意值 Any"></a>任意值 Any</h1><p>如果是一个基本数据类型，在赋值过程中改变类型是不被允许</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str: <span class="built_in">string</span> = <span class="string">&quot;seven&quot;</span>;</span><br><span class="line">str = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错：Type &#x27;number&#x27; is not assignable to type &#x27;string&#x27;.</span></span><br></pre></td></tr></table></figure><p>如果是 any 类型是允许被赋值任意类型的</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str: <span class="built_in">any</span> = <span class="string">&quot;seven&quot;</span>;</span><br><span class="line">str = <span class="number">7</span>;</span><br></pre></td></tr></table></figure><p>如果在声明变量的时候，未指定其类型，那么它会被识别为任意值类型</p><h1 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h1><p>也就是如果没有明确的声明变量的类型，那么 ts 就会推断出一个类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> code = <span class="string">&quot;js&quot;</span>;</span><br><span class="line">code = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错：Type &#x27;number&#x27; is not assignable to type &#x27;string&#x27;</span></span><br></pre></td></tr></table></figure><p>如果定义的时候没有赋值，不管之后有没有赋值，都会被推断成 any 类型，也就是不会被类型检查：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这样没问题</span></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">number</span>;</span><br><span class="line"><span class="built_in">number</span> = <span class="string">&quot;seven&quot;</span>;</span><br><span class="line"><span class="built_in">number</span> = <span class="number">7</span>;</span><br></pre></td></tr></table></figure><h1 id="联合类型-Union-Types"><a href="#联合类型-Union-Types" class="headerlink" title="联合类型 Union Types"></a>联合类型 Union Types</h1><p>取值可以为多种类型中的一种</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> code: <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line">code = <span class="string">&quot;ts&quot;</span>;</span><br><span class="line">code = <span class="number">123</span>;</span><br></pre></td></tr></table></figure><p>如果赋值的类型不是声明的那几种类型，就报错了</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> code: <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line">code = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错 Type &#x27;boolean&#x27; is not assignable to type &#x27;string | number&#x27;</span></span><br></pre></td></tr></table></figure><p>如果访问联合类型的属性的时候，因为 ts 也不确定变量类型，所以是能访问共有的属性或方法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为length不是string和number的共有属性，所以下边这个例子就报错了</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>(<span class="params">something: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> something.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>换成共有的属性或方法就可以了，比如.toString()</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>(<span class="params">something: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> something.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在给联合类型赋值的时候 ts 会推断出一个类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tom: <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line">tom = <span class="string">&quot;brother&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(tom.length); <span class="comment">// 7</span></span><br><span class="line"></span><br><span class="line">tom = <span class="number">123</span>;</span><br><span class="line"><span class="built_in">console</span>.log(tom.length); <span class="comment">// 报错：Property &#x27;length&#x27; does not exist on type &#x27;number&#x27;</span></span><br></pre></td></tr></table></figure><p>第一次赋值 “tom” 被推断成了 string 类型，访问 length 属性是没问题的<br>第二次赋值 “tom” 被推断成了 number 类型，number 类型没有 length 属性，所以就报错了</p><h1 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h1><p>用接口 interface 来定义对象类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Persion &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: Persion = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;Tom&quot;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接口一般首字母大写，我印象中有的编程语言中会建议接口的名称加上 <code>I</code> 前缀</p><p>定义的变量比接口少一些属性是不允许的</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;Tom&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错：Property &#x27;age&#x27; is missing in type &#x27;&#123; name: string; &#125;&#x27; but required in type &#x27;Persion&#x27;</span></span><br></pre></td></tr></table></figure><p>多一些属性也是不允许的</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;Tom&quot;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line"><span class="attr">gender</span>: <span class="string">&quot;male&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错：Type &#x27;&#123; name: string; age: number; gender: string; &#125;&#x27; is not assignable to type &#x27;Person&#x27;.</span></span><br><span class="line">  <span class="built_in">Object</span> literal may only specify known properties, and <span class="string">&#x27;gender&#x27;</span> does not exist <span class="keyword">in</span> <span class="keyword">type</span> <span class="string">&#x27;Person&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h2><p>如果不希望完全匹配，可以设置可选属性，属性后面加个问号，这时仍然不允许添加未定义的属性</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">age?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;Tom&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="任意属性"><a href="#任意属性" class="headerlink" title="任意属性"></a>任意属性</h2><p>有时候希望一个接口允许有任意的属性，可以使用如下方式<br>使用 [propName: string] 定义了任意属性取 string 类型的值</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">age?: <span class="built_in">number</span>;</span><br><span class="line">[propName: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;Tom&quot;</span>,</span><br><span class="line"><span class="attr">gender</span>: <span class="string">&quot;male&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>而且一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">age?: <span class="built_in">number</span>;</span><br><span class="line">[propName: <span class="built_in">string</span>]: <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;Tom&quot;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line"><span class="attr">gender</span>: <span class="string">&quot;male&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h2><p>如果希望对象中的一些字段只能在创建的时候被赋值，那么可以用 readonly 定义只读属性：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line"><span class="keyword">readonly</span> id: <span class="built_in">number</span>;</span><br><span class="line">name: <span class="built_in">string</span>;</span><br><span class="line">age?: <span class="built_in">number</span>;</span><br><span class="line">[propName: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line"><span class="attr">id</span>: <span class="number">89757</span>,</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;Tom&quot;</span>,</span><br><span class="line"><span class="attr">gender</span>: <span class="string">&quot;male&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">tom.id = <span class="number">9527</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cannot assign to &#x27;id&#x27; because it is a read-only property</span></span><br></pre></td></tr></table></figure><p><strong>只读的约束存在于第一次给对象赋值的时候，而不是第一次给只读属性赋值的时候，举个例子：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line"><span class="keyword">readonly</span> id: <span class="built_in">number</span>;</span><br><span class="line">name: <span class="built_in">string</span>;</span><br><span class="line">age?: <span class="built_in">number</span>;</span><br><span class="line">[propName: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;Tom&quot;</span>,</span><br><span class="line"><span class="attr">gender</span>: <span class="string">&quot;male&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">tom.id = <span class="number">89757</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里就有两个错了，第一次给对象赋值的时候缺少了id属性，第二次赋值的时候赋给了只读属性</span></span><br></pre></td></tr></table></figure><h1 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h1><p>最简单的数组表示方式是：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br></pre></td></tr></table></figure><p>数组中的项不允许出现其他类型：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;3&quot;</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type &#x27;string&#x27; is not assignable to type &#x27;number&#x27;</span></span><br></pre></td></tr></table></figure><p>很容易理解这样在数组定义的时候就限制了一些方法的参数：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr.push(<span class="string">&quot;6&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Argument of type &#x27;string&#x27; is not assignable to parameter of type &#x27;number&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="数组泛型"><a href="#数组泛型" class="headerlink" title="数组泛型"></a>数组泛型</h2><p>用数组泛型 Array<elemType> 来表示数组：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br></pre></td></tr></table></figure><p>接口也可以用来描述数组，我感觉描述很清晰，就是略显复杂：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> numberArray &#123;</span><br><span class="line">[index: <span class="built_in">number</span>]: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr: numberArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br></pre></td></tr></table></figure><h2 id="类数组"><a href="#类数组" class="headerlink" title="类数组"></a>类数组</h2><p>类数组就是伪数组，比如 arguments</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> args: <span class="built_in">number</span>[] = <span class="built_in">arguments</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Type &#x27;IArguments&#x27; is missing the following properties from type &#x27;number[]&#x27;: pop, push, concat, join, and 24 more</span></span><br></pre></td></tr></table></figure><p>arguments 实际上是一个伪数组，不能用普通的数组的方式来描述，而应该用接口</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> args: &#123;</span><br><span class="line">[index: <span class="built_in">number</span>]: <span class="built_in">any</span>;</span><br><span class="line">length: <span class="built_in">number</span>;</span><br><span class="line">callee: <span class="built_in">Function</span>;</span><br><span class="line">&#125; = <span class="built_in">arguments</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常用的类数组都有自己的接口定义，如 IArguments, NodeList, HTMLCollection 等：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> args: IArguments = <span class="built_in">arguments</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 IArguments 是 TypeScript 中定义好了的类型，实际上就是：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IArguments &#123;</span><br><span class="line">[index: <span class="built_in">number</span>]: <span class="built_in">any</span>;</span><br><span class="line">length: <span class="built_in">number</span>;</span><br><span class="line">callee: <span class="built_in">Function</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="any-在数组里的应用"><a href="#any-在数组里的应用" class="headerlink" title="any 在数组里的应用"></a>any 在数组里的应用</h2><p>用 any 表示数组中允许出现任意类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list: <span class="built_in">any</span>[] = [<span class="string">&quot;codehhr&quot;</span>, <span class="string">&quot;web&quot;</span>, <span class="number">22</span>, &#123; <span class="attr">blog</span>: <span class="string">&quot;codehhr.cn&quot;</span> &#125;];</span><br></pre></td></tr></table></figure><h1 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h1><p>js 中可以声明函数或者用表达式的形式，ts 要考虑输入输出个数：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我执行的时候输入了多余或者少参数，也不行</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// Expected 2 arguments, but got 3</span></span><br><span class="line">sum(<span class="number">1</span>); <span class="comment">// Expected 2 arguments, but got 1</span></span><br></pre></td></tr></table></figure><p>我感觉这就挺好，增强了程序的健壮性，即使报错也可以很快定位</p><h2 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h2><p>开始我以为 ts 里函数表达式是这样的：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sum: <span class="built_in">number</span> = <span class="function"><span class="keyword">function</span> (<span class="params">x: <span class="built_in">number</span>, x: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者箭头函数的形式：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sum: <span class="built_in">number</span> = (x: <span class="built_in">number</span>, <span class="attr">x</span>: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>实际上发现在 ES6 里 <code>=&gt;</code> 表示箭头函数，在 ts 里左边是输入类型，得用小括号括起来，右边是输出类型：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sum: <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="function"><span class="keyword">function</span> (<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>感觉虽然比 js 麻烦太多了，但是由牺牲的自由换来了稳定</p><h2 id="用-interface-来描述函数"><a href="#用-interface-来描述函数" class="headerlink" title="用 interface 来描述函数"></a>用 interface 来描述函数</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> fun &#123;</span><br><span class="line">(str1: <span class="built_in">string</span>, <span class="attr">str2</span>: <span class="built_in">string</span>): <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hadFinished: fun = <span class="function"><span class="keyword">function</span> (<span class="params">str1: <span class="built_in">string</span>, str2: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> str1 == str2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h2><p>之前在对象里用 ? 来指定可选参数，我寻思这函数里的参数是不是也这样，果然就是这样</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params">firstName: <span class="built_in">string</span>, lastName?: <span class="built_in">string</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (lastName) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> firstName;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getName(<span class="string">&quot;H&quot;</span>); <span class="comment">// H</span></span><br><span class="line">getName(<span class="string">&quot;H&quot;</span>, <span class="string">&quot;HR&quot;</span>); <span class="comment">// H HR</span></span><br></pre></td></tr></table></figure><p>但是有一点限制，可选参数后面不能出现必须参数了，也就是可选参数不能放到前面，例子就不敲了，容易误导自己 😂</p><h2 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h2><p>ts 会将有默认值的参数识别为可选参数，这就很合理</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params">lastName: <span class="built_in">string</span> = <span class="string">&quot;HR&quot;</span>, firstName: <span class="built_in">string</span> = <span class="string">&quot;H&quot;</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拓展运算符"><a href="#拓展运算符" class="headerlink" title="拓展运算符"></a>拓展运算符</h2><p>因为推展运算符的应用类型是数组，所以用数组来标注数据类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pushArr</span>(<span class="params">array: <span class="built_in">any</span>[], ...items: <span class="built_in">any</span>[]</span>) </span>&#123;</span><br><span class="line">items.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">array.push(item);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = [];</span><br><span class="line">pushArr(a, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><p>重载允许一个函数接受不同数量或类型的参数时，作出不同的处理<br>比如，我们需要实现一个函数 reverse，输入数字 123 的时候，输出反转的数字 321，输入字符串 ‘hello’ 的时候，输出反转的字符串 ‘olleh’。</p><p>利用联合类型，可以这么实现：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverseSth</span>(<span class="params">x: <span class="built_in">number</span> | <span class="built_in">string</span></span>): <span class="title">number</span> | <span class="title">string</span> | <span class="title">void</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Number</span>(x.toString().split(<span class="string">&quot;&quot;</span>).reverse().join(<span class="string">&quot;&quot;</span>));</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> x.split(<span class="string">&quot;&quot;</span>).reverse().join(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这样就太麻烦了，而且类型都写死了，不够通用<br>可以用重载来定义多个 reverseSth 函数类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverseSth</span>(<span class="params">x: <span class="built_in">number</span></span>): <span class="title">number</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverseSth</span>(<span class="params">x: <span class="built_in">string</span></span>): <span class="title">string</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverseSth</span>(<span class="params">x: <span class="built_in">number</span> | <span class="built_in">string</span></span>): <span class="title">number</span> | <span class="title">string</span> | <span class="title">void</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Number</span>(x.toString().split(<span class="string">&quot;&quot;</span>).reverse().join(<span class="string">&quot;&quot;</span>));</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> x.split(<span class="string">&quot;&quot;</span>).reverse().join(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实则这样看起来更麻烦了 😂<br>这次重复定义了多次函数 reverseSth，前几次都是函数定义，最后一次是函数实现，在 vscode 中会提示 <code>+1 overload</code></p><p>而且 TypeScript 会优先从最前面的函数定义开始匹配，所以多个函数定义如果有包含关系，需要优先把精确的定义写在前面</p><h1 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h1><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">值 <span class="keyword">as</span> 类型;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"></span><br><span class="line">&lt;类型&gt;值;</span><br></pre></td></tr></table></figure><h1 id="未完待续-…"><a href="#未完待续-…" class="headerlink" title="未完待续 …"></a>未完待续 …</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基本数据类型&quot;&gt;&lt;a href=&quot;#基本数据类型&quot; class=&quot;headerlink&quot; title=&quot;基本数据类型&quot;&gt;&lt;/a&gt;基本数据类型&lt;/h1&gt;&lt;h2 id=&quot;boolean-类型&quot;&gt;&lt;a href=&quot;#boolean-类型&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="TypeScript" scheme="https://codehhr.cn/categories/TypeScript/"/>
    
    
    <category term="TypeScript" scheme="https://codehhr.cn/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>Js 封装双向链表</title>
    <link href="https://codehhr.cn/2021/11/01/data-structure/ds-doublyLinkedList/"/>
    <id>https://codehhr.cn/2021/11/01/data-structure/ds-doublyLinkedList/</id>
    <published>2021-11-01T11:30:25.000Z</published>
    <updated>2021-11-04T16:56:25.645Z</updated>
    
    <content type="html"><![CDATA[<h1 id="总代码"><a href="#总代码" class="headerlink" title="总代码"></a>总代码</h1><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span></span></div>    <div class="hide-content"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 双向链表</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DoublyLinkedList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.head = <span class="literal">null</span>;</span><br><span class="line">  <span class="built_in">this</span>.tail = <span class="literal">null</span>;</span><br><span class="line">  <span class="built_in">this</span>.length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 节点类</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.prev = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">this</span>.data = data;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 追加节点</span></span><br><span class="line">  DoublyLinkedList.prototype.append = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.head = newNode;</span><br><span class="line">      <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      newNode.prev = <span class="built_in">this</span>.tail;</span><br><span class="line">      <span class="built_in">this</span>.tail.next = newNode;</span><br><span class="line">      <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.length += <span class="number">1</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 插入节点</span></span><br><span class="line">  DoublyLinkedList.prototype.insert = <span class="function"><span class="keyword">function</span> (<span class="params">position, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">    <span class="comment">// 先判断插入位置是否合法</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;Illegal position !&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.head = newNode;</span><br><span class="line">        <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (position == <span class="number">0</span>) &#123;</span><br><span class="line">          newNode.next = <span class="built_in">this</span>.head;</span><br><span class="line">          <span class="built_in">this</span>.head.prev = newNode;</span><br><span class="line">          <span class="built_in">this</span>.head = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position == <span class="built_in">this</span>.length) &#123;</span><br><span class="line">          <span class="comment">// this.append(data);</span></span><br><span class="line">          newNode.prev = <span class="built_in">this</span>.tail;</span><br><span class="line">          <span class="built_in">this</span>.tail.next = newNode;</span><br><span class="line">          <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position &gt; <span class="built_in">this</span>.length) &#123;</span><br><span class="line">          <span class="built_in">this</span>.append(data);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 先找到要插入的位置</span></span><br><span class="line">          <span class="comment">// 插入位置的节点 (原后继节点)</span></span><br><span class="line">          <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">          <span class="comment">// 插入位置的前一个节点 (前驱节点)</span></span><br><span class="line">          <span class="keyword">let</span> previousNode = <span class="literal">null</span>;</span><br><span class="line">          <span class="comment">// 去匹配 position</span></span><br><span class="line">          <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">            previousNode = currentNode;</span><br><span class="line">            currentNode = currentNode.next;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 已找到要插入的位置</span></span><br><span class="line">          newNode.next = currentNode;</span><br><span class="line">          newNode.prev = previousNode;</span><br><span class="line">          currentNode.prev = newNode;</span><br><span class="line">          previousNode.next = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">this</span>.length += <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 打印双链表</span></span><br><span class="line">  DoublyLinkedList.prototype.print = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    arr.push(currentNode.data);</span><br><span class="line">    <span class="keyword">while</span> (currentNode.next) &#123;</span><br><span class="line">      arr.push(currentNode.next.data);</span><br><span class="line">      currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取指定位置节点数据</span></span><br><span class="line">  <span class="comment">// 可以根据链表长度决定从前开始找还是从后开始找, 这样效率高一些, 此处略, 默认从前面开始找</span></span><br><span class="line">  DoublyLinkedList.prototype.get = <span class="function"><span class="keyword">function</span> (<span class="params">position</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 排除越界情况</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;Illegal position !&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">      <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> currentNode.data;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">let</span> doublyLinkedList = <span class="keyword">new</span> DoublyLinkedList();</span><br><span class="line"></span><br><span class="line"><span class="comment">// append</span></span><br><span class="line">doublyLinkedList.append(<span class="number">4</span>);</span><br><span class="line">doublyLinkedList.append(<span class="number">5</span>);</span><br><span class="line">doublyLinkedList.append(<span class="number">6</span>);</span><br><span class="line">doublyLinkedList.append(<span class="number">7</span>);</span><br><span class="line">doublyLinkedList.append(<span class="number">8</span>);</span><br><span class="line">doublyLinkedList.append(<span class="number">9</span>);</span><br><span class="line">doublyLinkedList.append(<span class="number">10</span>);</span><br><span class="line">doublyLinkedList.append(<span class="number">11</span>);</span><br><span class="line">doublyLinkedList.append(<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// print</span></span><br><span class="line"><span class="comment">// insert</span></span><br><span class="line"><span class="built_in">console</span>.log(doublyLinkedList.print());</span><br><span class="line"><span class="built_in">console</span>.log(doublyLinkedList.insert(<span class="number">999</span>, <span class="number">999</span>));</span><br><span class="line"><span class="built_in">console</span>.log(doublyLinkedList.print());</span><br><span class="line"></span><br><span class="line"><span class="comment">// get</span></span><br><span class="line"><span class="built_in">console</span>.log(doublyLinkedList.get(<span class="number">999</span>));</span><br></pre></td></tr></table></figure></div></div><h1 id="创建双向链表类"><a href="#创建双向链表类" class="headerlink" title="创建双向链表类"></a>创建双向链表类</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DoublyLinkedList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.head = <span class="literal">null</span>;</span><br><span class="line">  <span class="built_in">this</span>.tail = <span class="literal">null</span>;</span><br><span class="line">  <span class="built_in">this</span>.length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="创建节点类-用于承载每个节点"><a href="#创建节点类-用于承载每个节点" class="headerlink" title="创建节点类, 用于承载每个节点"></a>创建节点类, 用于承载每个节点</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 节点类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.prev = <span class="literal">null</span>;</span><br><span class="line">  <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">  <span class="built_in">this</span>.data = data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="封装一些方法"><a href="#封装一些方法" class="headerlink" title="封装一些方法"></a>封装一些方法</h1><h2 id="追加节点方法"><a href="#追加节点方法" class="headerlink" title="追加节点方法"></a>追加节点方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 追加节点</span></span><br><span class="line">DoublyLinkedList.prototype.append = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.length == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.head = newNode;</span><br><span class="line">    <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    newNode.prev = <span class="built_in">this</span>.tail;</span><br><span class="line">    <span class="built_in">this</span>.tail.next = newNode;</span><br><span class="line">    <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">this</span>.length += <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="插入节点方法"><a href="#插入节点方法" class="headerlink" title="插入节点方法"></a>插入节点方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插入节点</span></span><br><span class="line">DoublyLinkedList.prototype.insert = <span class="function"><span class="keyword">function</span> (<span class="params">position, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">  <span class="comment">// 先判断插入位置是否合法</span></span><br><span class="line">  <span class="keyword">if</span> (position &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Illegal position !&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.head = newNode;</span><br><span class="line">      <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (position == <span class="number">0</span>) &#123;</span><br><span class="line">        newNode.next = <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="built_in">this</span>.head.prev = newNode;</span><br><span class="line">        <span class="built_in">this</span>.head = newNode;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position == <span class="built_in">this</span>.length) &#123;</span><br><span class="line">        <span class="comment">// this.append(data);</span></span><br><span class="line">        newNode.prev = <span class="built_in">this</span>.tail;</span><br><span class="line">        <span class="built_in">this</span>.tail.next = newNode;</span><br><span class="line">        <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position &gt; <span class="built_in">this</span>.length) &#123;</span><br><span class="line">        <span class="built_in">this</span>.append(data);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 先找到要插入的位置</span></span><br><span class="line">        <span class="comment">// 插入位置的节点 (原后继节点)</span></span><br><span class="line">        <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="comment">// 插入位置的前一个节点 (前驱节点)</span></span><br><span class="line">        <span class="keyword">let</span> previousNode = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 去匹配 position</span></span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">          previousNode = currentNode;</span><br><span class="line">          currentNode = currentNode.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 已找到要插入的位置</span></span><br><span class="line">        newNode.next = currentNode;</span><br><span class="line">        newNode.prev = previousNode;</span><br><span class="line">        currentNode.prev = newNode;</span><br><span class="line">        previousNode.next = newNode;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.length += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="打印双链表"><a href="#打印双链表" class="headerlink" title="打印双链表"></a>打印双链表</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打印双链表</span></span><br><span class="line">DoublyLinkedList.prototype.print = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> arr = [];</span><br><span class="line">  <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">  arr.push(currentNode.data);</span><br><span class="line">  <span class="keyword">while</span> (currentNode.next) &#123;</span><br><span class="line">    arr.push(currentNode.next.data);</span><br><span class="line">    currentNode = currentNode.next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="获取指定位置节点数据"><a href="#获取指定位置节点数据" class="headerlink" title="获取指定位置节点数据"></a>获取指定位置节点数据</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取指定位置节点数据</span></span><br><span class="line"><span class="comment">// 可以根据链表长度决定从前开始找还是从后开始找, 这样效率高一些, 此处略, 默认从前面开始找</span></span><br><span class="line">DoublyLinkedList.prototype.get = <span class="function"><span class="keyword">function</span> (<span class="params">position</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 排除越界情况</span></span><br><span class="line">  <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Illegal position !&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">      currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> currentNode.data;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;总代码&quot;&gt;&lt;a href=&quot;#总代码&quot; class=&quot;headerlink&quot; title=&quot;总代码&quot;&gt;&lt;/a&gt;总代码&lt;/h1&gt;&lt;div class=&quot;hide-toggle&quot; &gt;&lt;div class=&quot;hide-button toggle-title&quot; style</summary>
      
    
    
    
    <category term="数据结构" scheme="https://codehhr.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="链表结构" scheme="https://codehhr.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://codehhr.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="双向链表" scheme="https://codehhr.cn/tags/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>Js 封装二叉搜索树</title>
    <link href="https://codehhr.cn/2021/10/19/data-structure/ds-binarySearchTree/"/>
    <id>https://codehhr.cn/2021/10/19/data-structure/ds-binarySearchTree/</id>
    <published>2021-10-19T13:51:50.000Z</published>
    <updated>2021-10-29T14:33:04.912Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-icon flat"><h1 id="二叉搜索树的封装"><a href="#二叉搜索树的封装" class="headerlink" title="二叉搜索树的封装"></a>二叉搜索树的封装</h1></div><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>code</span></div>    <div class="hide-content"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 二叉搜索树的封装</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BinarySearchTree</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 节点类 (每个节点都包含左右两个子节点以及自身的 key &amp; value )</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">obj = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.key = obj.key;</span><br><span class="line">    <span class="built_in">this</span>.value = obj.value;</span><br><span class="line">    <span class="built_in">this</span>.left = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">this</span>.right = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  根节点</span></span><br><span class="line">  <span class="built_in">this</span>.root = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 方法</span></span><br><span class="line">  <span class="comment">// 插入数据</span></span><br><span class="line">  BinarySearchTree.prototype.insert = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个节点</span></span><br><span class="line">    <span class="keyword">let</span> newNode = <span class="keyword">new</span> Node(obj);</span><br><span class="line">    <span class="comment">// 先判断根节点是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.root == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.root = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      insertNode(<span class="built_in">this</span>.root, newNode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">insertNode</span>(<span class="params">currentNode, newNode</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 向左查找</span></span><br><span class="line">      <span class="keyword">if</span> (newNode.key &lt; currentNode.key) &#123;</span><br><span class="line">        <span class="comment">// 找到 currentNode 的左子节点为 null 时放入</span></span><br><span class="line">        <span class="keyword">if</span> (currentNode.left == <span class="literal">null</span>) &#123;</span><br><span class="line">          currentNode.left = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          insertNode(currentNode.left, newNode);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 向右查找</span></span><br><span class="line">        <span class="keyword">if</span> (currentNode.right == <span class="literal">null</span>) &#123;</span><br><span class="line">          currentNode.right = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          insertNode(currentNode.right, newNode);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 树的遍历</span></span><br><span class="line">  <span class="comment">// 1.先序遍历</span></span><br><span class="line">  BinarySearchTree.prototype.preorderTraversal = <span class="function"><span class="keyword">function</span> (<span class="params">handler</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;===== 先序遍历 =====&quot;</span>);</span><br><span class="line">    preorderTraversalNode(<span class="built_in">this</span>.root);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">preorderTraversalNode</span>(<span class="params">currentNode</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (currentNode != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 传一个回调 handler, 让 handler 处理当前 (经过的节点) 节点的数据</span></span><br><span class="line">        handler(&#123; <span class="attr">key</span>: currentNode.key, <span class="attr">value</span>: currentNode.value &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查找子节点的左子节点</span></span><br><span class="line">        preorderTraversalNode(currentNode.left);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查找子节点的右子节点</span></span><br><span class="line">        preorderTraversalNode(currentNode.right);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.中序遍历</span></span><br><span class="line">  BinarySearchTree.prototype.inOrderTraversal = <span class="function"><span class="keyword">function</span> (<span class="params">handler</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;===== 中序遍历 =====&quot;</span>);</span><br><span class="line">    inOrderTraversalNode(<span class="built_in">this</span>.root);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inOrderTraversalNode</span>(<span class="params">currentNode</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (currentNode != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 查找子节点的左子节点</span></span><br><span class="line">        inOrderTraversalNode(currentNode.left);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 让 handler 处理当前 (经过的节点) 节点的数据</span></span><br><span class="line">        handler(&#123; <span class="attr">key</span>: currentNode.key, <span class="attr">value</span>: currentNode.value &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查找子节点的右子节点</span></span><br><span class="line">        inOrderTraversalNode(currentNode.right);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3.后序遍历</span></span><br><span class="line">  BinarySearchTree.prototype.postorderTraversal = <span class="function"><span class="keyword">function</span> (<span class="params">handler</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;===== 后序遍历 =====&quot;</span>);</span><br><span class="line">    postorderTraversalNode(<span class="built_in">this</span>.root);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">postorderTraversalNode</span>(<span class="params">currentNode</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (currentNode != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 查找子节点的左子节点</span></span><br><span class="line">        postorderTraversalNode(currentNode.left);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查找子节点的右子节点</span></span><br><span class="line">        postorderTraversalNode(currentNode.right);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 让 handler 处理当前 (经过的节点) 节点的数据</span></span><br><span class="line">        handler(&#123; <span class="attr">key</span>: currentNode.key, <span class="attr">value</span>: currentNode.value &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 寻找最值</span></span><br><span class="line">  <span class="comment">// 寻找最大值</span></span><br><span class="line">  BinarySearchTree.prototype.max = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取根节点</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.root;</span><br><span class="line">    <span class="comment">// 默认 value 值</span></span><br><span class="line">    <span class="keyword">let</span> value = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 一直向右查找,直到节点的右子节点为 null, 当前节点就是最大值</span></span><br><span class="line">    <span class="keyword">while</span> (currentNode.right != <span class="literal">null</span>) &#123;</span><br><span class="line">      value = currentNode.value;</span><br><span class="line">      currentNode = currentNode.right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">key</span>: currentNode.key, value &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 寻找最小值</span></span><br><span class="line">  BinarySearchTree.prototype.min = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取根节点</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.root;</span><br><span class="line">    <span class="comment">// 默认 value 值</span></span><br><span class="line">    <span class="keyword">let</span> value = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 一直向左查找,直到节点的左子节点为 null, 当前节点就是最小值</span></span><br><span class="line">    <span class="keyword">while</span> (currentNode.left != <span class="literal">null</span>) &#123;</span><br><span class="line">      value = currentNode.value;</span><br><span class="line">      currentNode = currentNode.left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">key</span>: currentNode.key, value &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// // 层序遍历方法 1</span></span><br><span class="line">  <span class="comment">// BinarySearchTree.prototype.levelTraversal = function () &#123;</span></span><br><span class="line">  <span class="comment">//   let currentNode = this.root;</span></span><br><span class="line">  <span class="comment">//   let result = [];</span></span><br><span class="line">  <span class="comment">//   levelTraversalNode(currentNode, 0);</span></span><br><span class="line">  <span class="comment">//   function levelTraversalNode(currentNode, level) &#123;</span></span><br><span class="line">  <span class="comment">//     if (currentNode != null) &#123;</span></span><br><span class="line">  <span class="comment">//       if (!result[level]) &#123;</span></span><br><span class="line">  <span class="comment">//         result[level] = [];</span></span><br><span class="line">  <span class="comment">//       &#125;</span></span><br><span class="line">  <span class="comment">//       result[level].push(currentNode.value);</span></span><br><span class="line">  <span class="comment">//       if (currentNode.left) &#123;</span></span><br><span class="line">  <span class="comment">//         levelTraversalNode(currentNode.left, level + 1);</span></span><br><span class="line">  <span class="comment">//       &#125;</span></span><br><span class="line">  <span class="comment">//       if (currentNode.right) &#123;</span></span><br><span class="line">  <span class="comment">//         levelTraversalNode(currentNode.right, level + 1);</span></span><br><span class="line">  <span class="comment">//       &#125;</span></span><br><span class="line">  <span class="comment">//     &#125;</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">  <span class="comment">//   return result;</span></span><br><span class="line">  <span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 层序遍历方法 2</span></span><br><span class="line">  BinarySearchTree.prototype.levelTraversal = <span class="function"><span class="keyword">function</span> <span class="title">levelTraversal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = []; <span class="comment">// 最后输出的多维数组</span></span><br><span class="line">    <span class="keyword">let</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> item = <span class="keyword">new</span> Node();</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.root) &#123;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> layer = []; <span class="comment">// 临时数组, 存放某一层的节点</span></span><br><span class="line">      layer.push(<span class="built_in">this</span>.root); <span class="comment">// 把根节点作为第一层放进数组</span></span><br><span class="line">      <span class="keyword">while</span> (layer.length != <span class="number">0</span>) &#123;</span><br><span class="line">        result.push([]); <span class="comment">// 添加新的一层</span></span><br><span class="line">        length = layer.length; <span class="comment">// 下面 shift 会改变 layer 数组长度, 所以先保存下</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">          item = layer.shift(); <span class="comment">// 层虚遍历从左到右</span></span><br><span class="line">          result[result.length - <span class="number">1</span>].push(item.key); <span class="comment">// 把这个节点的值, 添加到当前层的数组里面</span></span><br><span class="line">          <span class="comment">// 将下一层的节点加入 layer</span></span><br><span class="line">          <span class="keyword">if</span> (item.left) &#123;</span><br><span class="line">            layer.push(item.left);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (item.right) &#123;</span><br><span class="line">            layer.push(item.right);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 搜索 key 值</span></span><br><span class="line">  <span class="comment">// BinarySearchTree.prototype.search = function (key) &#123;</span></span><br><span class="line">  <span class="comment">//   return searchNode(this.root, key);</span></span><br><span class="line">  <span class="comment">//   function searchNode(currentNode, key) &#123;</span></span><br><span class="line">  <span class="comment">//     if (currentNode == null) &#123;</span></span><br><span class="line">  <span class="comment">//       return false;</span></span><br><span class="line">  <span class="comment">//     &#125; else &#123;</span></span><br><span class="line">  <span class="comment">//       if (key &lt; currentNode.key) &#123;</span></span><br><span class="line">  <span class="comment">//         return searchNode(currentNode.left, key);</span></span><br><span class="line">  <span class="comment">//       &#125; else if (key &gt; currentNode.key) &#123;</span></span><br><span class="line">  <span class="comment">//         return searchNode(currentNode.right, key);</span></span><br><span class="line">  <span class="comment">//       &#125; else &#123;</span></span><br><span class="line">  <span class="comment">//         return true;</span></span><br><span class="line">  <span class="comment">//       &#125;</span></span><br><span class="line">  <span class="comment">//     &#125;</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">  <span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 搜索 key 值 ( 非递归式 )</span></span><br><span class="line">  BinarySearchTree.prototype.search = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.root;</span><br><span class="line">    <span class="keyword">while</span> (currentNode != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (key &lt; currentNode.key) &#123;</span><br><span class="line">        currentNode = currentNode.left;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; currentNode.key) &#123;</span><br><span class="line">        currentNode = currentNode.right;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 删除节点</span></span><br><span class="line">  BinarySearchTree.prototype.remove = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!key) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 先寻找要删除的节点</span></span><br><span class="line">    <span class="comment">// 涉及到当前节点和父节点, 以及具体关系 ( 是左子节点还是右子节点 )</span></span><br><span class="line">    <span class="keyword">let</span> parentNode = <span class="built_in">this</span>.root;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.root;</span><br><span class="line">    <span class="keyword">let</span> isLeftChild = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (key != currentNode.key) &#123;</span><br><span class="line">      parentNode = currentNode;</span><br><span class="line">      <span class="keyword">if</span> (key &lt; currentNode.key) &#123;</span><br><span class="line">        isLeftChild = <span class="literal">true</span>;</span><br><span class="line">        currentNode = currentNode.left;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        isLeftChild = <span class="literal">false</span>;</span><br><span class="line">        currentNode = currentNode.right;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 没找到要删除的节点</span></span><br><span class="line">      <span class="keyword">if</span> (!currentNode) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// while 循环结束, 已找到要删除的节点, 下面分几种情况</span></span><br><span class="line">    <span class="comment">// 1. 要删除的节点是叶子节点</span></span><br><span class="line">    <span class="keyword">if</span> (currentNode.left == <span class="literal">null</span> &amp;&amp; currentNode.right == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (currentNode == <span class="built_in">this</span>.root) &#123;</span><br><span class="line">        <span class="built_in">this</span>.root = <span class="literal">null</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 判断当前节点和父节点的关系</span></span><br><span class="line">        <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">          parentNode.left = <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          parentNode.right = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. 要删除的节点只有一个子节点 ( 只有左子节点 )</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!currentNode.right) &#123;</span><br><span class="line">      <span class="keyword">if</span> (currentNode == <span class="built_in">this</span>.root) &#123;</span><br><span class="line">        <span class="built_in">this</span>.root == currentNode.left;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 判断当前节点和父节点的关系</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">        parentNode.left = currentNode.left;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        parentNode.right = currentNode.left;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3. 要删除的节点只有一个子节点 ( 只有右子节点 )</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!currentNode.left) &#123;</span><br><span class="line">      <span class="keyword">if</span> (currentNode == <span class="built_in">this</span>.root) &#123;</span><br><span class="line">        <span class="built_in">this</span>.root == currentNode.left;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 判断当前节点和父节点的关系</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">        parentNode.left = currentNode.right;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        parentNode.right = currentNode.right;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4. 要删除的节点有两个子节点</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 通过找规律发现, 该节点即在左子树中找最大的值 或者 在右子树中找最小的值</span></span><br><span class="line">      <span class="comment">// By the way, it&#x27;s fucking complicated !</span></span><br><span class="line">      <span class="comment">// 有两种方案, 这里只展示向删除节点的左子树方向查找</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (currentNode == <span class="built_in">this</span>.root) <span class="built_in">this</span>.root = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> candidateNode = currentNode.left; <span class="comment">// 初始候选替补节点</span></span><br><span class="line">      <span class="keyword">let</span> candidateParentNode = currentNode.left; <span class="comment">// 初始候选替补节点的父节点</span></span><br><span class="line">      <span class="comment">// 寻找合适的节点</span></span><br><span class="line">      <span class="keyword">while</span> (candidateNode.right) &#123;</span><br><span class="line">        candidateParentNode = candidateNode;</span><br><span class="line">        candidateNode = candidateNode.right;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果候选节点没有右子树, 则当前节点就是最终替补节点</span></span><br><span class="line">      <span class="keyword">if</span> (candidateNode == candidateParentNode) &#123;</span><br><span class="line">        candidateNode.right = currentNode.right;</span><br><span class="line">        <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">          parentNode.left = candidateNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          parentNode.right = candidateNode;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果候选节点有右子树</span></span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 再判断是否有左子树 (隔代)</span></span><br><span class="line">        <span class="keyword">if</span> (candidateNode.left) &#123;</span><br><span class="line">          candidateParentNode.right = candidateNode.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          candidateParentNode.right = <span class="literal">null</span>;</span><br><span class="line">          candidateNode.left = currentNode.left;</span><br><span class="line">          candidateNode.right = currentNode.right;</span><br><span class="line">          <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">            parentNode.left = candidateNode;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            parentNode.right = candidateNode;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> binarySearchTree = <span class="keyword">new</span> BinarySearchTree();</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">11</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 11 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">7</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 7 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">15</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 15 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">5</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 5 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">3</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 3 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">9</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 9 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">8</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 8 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">10</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 10 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">13</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 13 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">12</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 12 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">14</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 14 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">20</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 20 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">18</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 18 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">25</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 25 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">19</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 19 !&quot;</span> &#125;);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                            11</span></span><br><span class="line"><span class="comment">//                  7                     15</span></span><br><span class="line"><span class="comment">//            5         9             13      20</span></span><br><span class="line"><span class="comment">//        3           8  10         12 14   18   25</span></span><br><span class="line"><span class="comment">//                                           19</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先序</span></span><br><span class="line"><span class="comment">// binarySearchTree.preorderTraversal(function (value) &#123;</span></span><br><span class="line"><span class="comment">//   console.log(value);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// 中序</span></span><br><span class="line"><span class="comment">// binarySearchTree.inOrderTraversal(function (value) &#123;</span></span><br><span class="line"><span class="comment">//   console.log(value);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// 后序</span></span><br><span class="line"><span class="comment">// binarySearchTree.postorderTraversal(function (value) &#123;</span></span><br><span class="line"><span class="comment">//   console.log(value);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// 层序</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.levelTraversal());</span></span><br><span class="line"><span class="comment">// 最大值</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.max());</span></span><br><span class="line"><span class="comment">// 最小值</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.min());</span></span><br><span class="line"><span class="comment">// 搜索 key</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(11));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(7));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(15));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(5));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(3));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(9));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(8));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(10));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(6));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(13));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(12));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(14));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(20));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(18));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(25));</span></span><br><span class="line"><span class="built_in">console</span>.log(binarySearchTree.levelTraversal());</span><br><span class="line"><span class="built_in">console</span>.log(binarySearchTree.remove(<span class="number">11</span>));</span><br><span class="line"><span class="built_in">console</span>.log(binarySearchTree.levelTraversal());</span><br></pre></td></tr></table></figure></div></div><hr><h1 id="创建二叉搜索树这个类"><a href="#创建二叉搜索树这个类" class="headerlink" title="创建二叉搜索树这个类"></a>创建二叉搜索树这个类</h1><p><strong>顺便定义根节点, 先让它为空</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BinarySearchTree</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.root = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="创建节点类-用于承载每个节点"><a href="#创建节点类-用于承载每个节点" class="headerlink" title="创建节点类, 用于承载每个节点"></a>创建节点类, 用于承载每个节点</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">obj = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.key = obj.key;</span><br><span class="line">  <span class="built_in">this</span>.value = obj.value;</span><br><span class="line">  <span class="built_in">this</span>.left = <span class="literal">null</span>;</span><br><span class="line">  <span class="built_in">this</span>.right = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="封装二叉搜索树的一些方法"><a href="#封装二叉搜索树的一些方法" class="headerlink" title="封装二叉搜索树的一些方法"></a>封装二叉搜索树的一些方法</h1><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插入数据</span></span><br><span class="line">BinarySearchTree.prototype.insertNode = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 创建一个节点</span></span><br><span class="line">  <span class="keyword">let</span> newNode = <span class="keyword">new</span> Node(obj);</span><br><span class="line">  <span class="comment">// 先判断根节点是否存在</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.root == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.root = newNode;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    insert(<span class="built_in">this</span>.root, newNode);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params">currentNode, newNode</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 向左查找</span></span><br><span class="line">    <span class="keyword">if</span> (newNode.key &lt; currentNode.key) &#123;</span><br><span class="line">      <span class="comment">// 找到 currentNode 的左子节点为 null 时放入</span></span><br><span class="line">      <span class="keyword">if</span> (currentNode.left == <span class="literal">null</span>) &#123;</span><br><span class="line">        currentNode.left = newNode;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        insert(currentNode.left, newNode);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 向右查找</span></span><br><span class="line">      <span class="keyword">if</span> (currentNode.right == <span class="literal">null</span>) &#123;</span><br><span class="line">        currentNode.right = newNode;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        insert(currentNode.right, newNode);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先序遍历</span></span><br><span class="line">BinarySearchTree.prototype.preorderTraversal = <span class="function"><span class="keyword">function</span> (<span class="params">handler</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;===== 先序遍历 =====&quot;</span>);</span><br><span class="line">  preorderTraversalNode(<span class="built_in">this</span>.root);</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">preorderTraversalNode</span>(<span class="params">currentNode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (currentNode != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 传一个回调 handler, 让 handler 处理当前 (经过的节点) 节点的数据</span></span><br><span class="line">      handler(&#123; <span class="attr">key</span>: currentNode.key, <span class="attr">value</span>: currentNode.value &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 查找子节点的左子节点</span></span><br><span class="line">      preorderTraversalNode(currentNode.left);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 查找子节点的右子节点</span></span><br><span class="line">      preorderTraversalNode(currentNode.right);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中序遍历</span></span><br><span class="line">BinarySearchTree.prototype.inOrderTraversal = <span class="function"><span class="keyword">function</span> (<span class="params">handler</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;===== 中序遍历 =====&quot;</span>);</span><br><span class="line">  inOrderTraversalNode(<span class="built_in">this</span>.root);</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">inOrderTraversalNode</span>(<span class="params">currentNode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (currentNode != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 查找子节点的左子节点</span></span><br><span class="line">      inOrderTraversalNode(currentNode.left);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 让 handler 处理当前 (经过的节点) 节点的数据</span></span><br><span class="line">      handler(&#123; <span class="attr">key</span>: currentNode.key, <span class="attr">value</span>: currentNode.value &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 查找子节点的右子节点</span></span><br><span class="line">      inOrderTraversalNode(currentNode.right);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 后序遍历</span></span><br><span class="line">BinarySearchTree.prototype.postorderTraversal = <span class="function"><span class="keyword">function</span> (<span class="params">handler</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;===== 后序遍历 =====&quot;</span>);</span><br><span class="line">  postorderTraversalNode(<span class="built_in">this</span>.root);</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">postorderTraversalNode</span>(<span class="params">currentNode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (currentNode != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 查找子节点的左子节点</span></span><br><span class="line">      postorderTraversalNode(currentNode.left);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 查找子节点的右子节点</span></span><br><span class="line">      postorderTraversalNode(currentNode.right);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 让 handler 处理当前 (经过的节点) 节点的数据</span></span><br><span class="line">      handler(&#123; <span class="attr">key</span>: currentNode.key, <span class="attr">value</span>: currentNode.value &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="寻找最大值"><a href="#寻找最大值" class="headerlink" title="寻找最大值"></a>寻找最大值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 寻找最大值</span></span><br><span class="line">BinarySearchTree.prototype.max = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获取根节点</span></span><br><span class="line">  <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.root;</span><br><span class="line">  <span class="comment">// 默认 value 值</span></span><br><span class="line">  <span class="keyword">let</span> value = <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">// 一直向右查找,直到节点的右子节点为 null, 当前节点就是最大值</span></span><br><span class="line">  <span class="keyword">while</span> (currentNode.right != <span class="literal">null</span>) &#123;</span><br><span class="line">    value = currentNode.value;</span><br><span class="line">    currentNode = currentNode.right;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">key</span>: currentNode.key, value &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="寻找最小值"><a href="#寻找最小值" class="headerlink" title="寻找最小值"></a>寻找最小值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 寻找最小值</span></span><br><span class="line">BinarySearchTree.prototype.min = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获取根节点</span></span><br><span class="line">  <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.root;</span><br><span class="line">  <span class="comment">// 默认 value 值</span></span><br><span class="line">  <span class="keyword">let</span> value = <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">// 一直向左查找,直到节点的左子节点为 null, 当前节点就是最小值</span></span><br><span class="line">  <span class="keyword">while</span> (currentNode.left != <span class="literal">null</span>) &#123;</span><br><span class="line">    value = currentNode.value;</span><br><span class="line">    currentNode = currentNode.left;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">key</span>: currentNode.key, value &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h2><h3 id="层序遍历方法-1"><a href="#层序遍历方法-1" class="headerlink" title="层序遍历方法 1"></a>层序遍历方法 1</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 层序遍历方法 1</span></span><br><span class="line">BinarySearchTree.prototype.levelTraversal = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.root;</span><br><span class="line">  <span class="keyword">let</span> result = [];</span><br><span class="line">  levelTraversalNode(currentNode, <span class="number">0</span>);</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">levelTraversalNode</span>(<span class="params">currentNode, level</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (currentNode != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!result[level]) &#123;</span><br><span class="line">        result[level] = [];</span><br><span class="line">      &#125;</span><br><span class="line">      result[level].push(currentNode.value);</span><br><span class="line">      <span class="keyword">if</span> (currentNode.left) &#123;</span><br><span class="line">        levelTraversalNode(currentNode.left, level + <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (currentNode.right) &#123;</span><br><span class="line">        levelTraversalNode(currentNode.right, level + <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="层序遍历方法-2"><a href="#层序遍历方法-2" class="headerlink" title="层序遍历方法 2"></a>层序遍历方法 2</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">BinarySearchTree.prototype.levelTraversal = <span class="function"><span class="keyword">function</span> <span class="title">levelTraversal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = []; <span class="comment">// 最后输出的结构 (多维数组)</span></span><br><span class="line">  <span class="keyword">let</span> length = <span class="number">0</span>; <span class="comment">// layer 数组长度; 声明在外面是为了尽量不在 while 内部使用 let</span></span><br><span class="line">  <span class="keyword">let</span> item = &#123;&#125;; <span class="comment">// layer 数组里的每一个节点; 声明在外面是为了尽量不在 while 内部使用 let</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">this</span>.root) &#123;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> layer = []; <span class="comment">// 临时数组, 存放某一层的节点</span></span><br><span class="line">    layer.push(<span class="built_in">this</span>.root); <span class="comment">// 把根节点作为第一层放进数组</span></span><br><span class="line">    <span class="keyword">while</span> (layer.length != <span class="number">0</span>) &#123;</span><br><span class="line">      result.push([]); <span class="comment">// 添加新的一层</span></span><br><span class="line">      length = layer.length; <span class="comment">// 下面 shift() 会改变 layer 数组长度, 所以先保存下来</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        item = layer.shift(); <span class="comment">// 层虚遍历从左到右</span></span><br><span class="line">        result[result.length - <span class="number">1</span>].push(item.key); <span class="comment">// 把这个节点的值, 添加到当前层的数组里面</span></span><br><span class="line">        <span class="comment">// 将下一层的节点加入 layer</span></span><br><span class="line">        <span class="keyword">if</span> (item.left) &#123;</span><br><span class="line">          layer.push(item.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (item.right) &#123;</span><br><span class="line">          layer.push(item.right);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><h3 id="搜索-递归式"><a href="#搜索-递归式" class="headerlink" title="搜索 ( 递归式 )"></a>搜索 ( 递归式 )</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 搜索 key 值</span></span><br><span class="line">BinarySearchTree.prototype.search = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> searchNode(<span class="built_in">this</span>.root, key);</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">searchNode</span>(<span class="params">currentNode, key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (currentNode == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (key &lt; currentNode.key) &#123;</span><br><span class="line">        <span class="keyword">return</span> searchNode(currentNode.left, key);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; currentNode.key) &#123;</span><br><span class="line">        <span class="keyword">return</span> searchNode(currentNode.right, key);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="搜索-非递归式"><a href="#搜索-非递归式" class="headerlink" title="搜索 ( 非递归式 )"></a>搜索 ( 非递归式 )</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 搜索 key 值 ( 非递归式 )</span></span><br><span class="line">BinarySearchTree.prototype.search = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.root;</span><br><span class="line">  <span class="keyword">while</span> (currentNode != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key &lt; currentNode.key) &#123;</span><br><span class="line">      currentNode = currentNode.left;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; currentNode.key) &#123;</span><br><span class="line">      currentNode = currentNode.right;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除节点</span></span><br><span class="line">BinarySearchTree.prototype.remove = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!key) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// 先寻找要删除的节点</span></span><br><span class="line">  <span class="comment">// 涉及到当前节点和父节点, 以及具体关系 ( 是左子节点还是右子节点 )</span></span><br><span class="line">  <span class="keyword">let</span> parentNode = <span class="built_in">this</span>.root;</span><br><span class="line">  <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.root;</span><br><span class="line">  <span class="keyword">let</span> isLeftChild = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (key != currentNode.key) &#123;</span><br><span class="line">    parentNode = currentNode;</span><br><span class="line">    <span class="keyword">if</span> (key &lt; currentNode.key) &#123;</span><br><span class="line">      isLeftChild = <span class="literal">true</span>;</span><br><span class="line">      currentNode = currentNode.left;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      isLeftChild = <span class="literal">false</span>;</span><br><span class="line">      currentNode = currentNode.right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 没找到要删除的节点</span></span><br><span class="line">    <span class="keyword">if</span> (!currentNode) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// while 循环结束, 已找到要删除的节点, 下面分几种情况</span></span><br><span class="line">  <span class="comment">// 1. 要删除的节点是叶子节点</span></span><br><span class="line">  <span class="keyword">if</span> (currentNode.left == <span class="literal">null</span> &amp;&amp; currentNode.right == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (currentNode == <span class="built_in">this</span>.root) &#123;</span><br><span class="line">      <span class="built_in">this</span>.root = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 判断当前节点和父节点的关系</span></span><br><span class="line">      <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">        parentNode.left = <span class="literal">null</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        parentNode.right = <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 2. 要删除的节点只有一个子节点 ( 只有左子节点 )</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (!currentNode.right) &#123;</span><br><span class="line">    <span class="keyword">if</span> (currentNode == <span class="built_in">this</span>.root) &#123;</span><br><span class="line">      <span class="built_in">this</span>.root == currentNode.left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断当前节点和父节点的关系</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">      parentNode.left = currentNode.left;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      parentNode.right = currentNode.left;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 3. 要删除的节点只有一个子节点 ( 只有右子节点 )</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (!currentNode.left) &#123;</span><br><span class="line">    <span class="keyword">if</span> (currentNode == <span class="built_in">this</span>.root) &#123;</span><br><span class="line">      <span class="built_in">this</span>.root == currentNode.left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断当前节点和父节点的关系</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">      parentNode.left = currentNode.right;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      parentNode.right = currentNode.right;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 4. 要删除的节点有两个子节点</span></span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 通过找规律发现, 该节点即在左子树中找最大的值 或者 在右子树中找最小的值</span></span><br><span class="line">    <span class="comment">// By the way, it&#x27;s fucking complicated !</span></span><br><span class="line">    <span class="comment">// 有两种方案, 这里只展示向删除节点的左子树方向查找</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (currentNode == <span class="built_in">this</span>.root) <span class="built_in">this</span>.root = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> candidateNode = currentNode.left; <span class="comment">// 初始候选替补节点</span></span><br><span class="line">    <span class="keyword">let</span> candidateParentNode = currentNode.left; <span class="comment">// 初始候选替补节点的父节点</span></span><br><span class="line">    <span class="comment">// 寻找合适的节点</span></span><br><span class="line">    <span class="keyword">while</span> (candidateNode.right) &#123;</span><br><span class="line">      candidateParentNode = candidateNode;</span><br><span class="line">      candidateNode = candidateNode.right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果候选节点没有右子树, 则当前节点就是最终替补节点</span></span><br><span class="line">    <span class="keyword">if</span> (candidateNode == candidateParentNode) &#123;</span><br><span class="line">      candidateNode.right = currentNode.right;</span><br><span class="line">      <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">        parentNode.left = candidateNode;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        parentNode.right = candidateNode;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果候选节点有右子树</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 再判断是否有左子树 (隔代)</span></span><br><span class="line">      <span class="keyword">if</span> (candidateNode.left) &#123;</span><br><span class="line">        candidateParentNode.right = candidateNode.left;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        candidateParentNode.right = <span class="literal">null</span>;</span><br><span class="line">        candidateNode.left = currentNode.left;</span><br><span class="line">        candidateNode.right = currentNode.right;</span><br><span class="line">        <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">          parentNode.left = candidateNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          parentNode.right = candidateNode;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> binarySearchTree = <span class="keyword">new</span> BinarySearchTree();</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">11</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 11 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">7</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 7 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">15</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 15 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">5</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 5 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">3</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 3 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">9</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 9 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">8</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 8 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">10</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 10 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">13</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 13 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">12</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 12 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">14</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 14 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">20</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 20 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">18</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 18 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">25</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 25 !&quot;</span> &#125;);</span><br><span class="line">binarySearchTree.insert(&#123; <span class="attr">key</span>: <span class="number">19</span>, <span class="attr">value</span>: <span class="string">&quot;I&#x27;m 19 !&quot;</span> &#125;);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                            11</span></span><br><span class="line"><span class="comment">//                  7                     15</span></span><br><span class="line"><span class="comment">//            5         9             13      20</span></span><br><span class="line"><span class="comment">//        3           8  10         12 14   18   25</span></span><br><span class="line"><span class="comment">//                                           19</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先序</span></span><br><span class="line"><span class="comment">// binarySearchTree.preorderTraversal(function (value) &#123;</span></span><br><span class="line"><span class="comment">//   console.log(value);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// 中序</span></span><br><span class="line"><span class="comment">// binarySearchTree.inOrderTraversal(function (value) &#123;</span></span><br><span class="line"><span class="comment">//   console.log(value);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// 后序</span></span><br><span class="line"><span class="comment">// binarySearchTree.postorderTraversal(function (value) &#123;</span></span><br><span class="line"><span class="comment">//   console.log(value);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// 层序</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.levelTraversal());</span></span><br><span class="line"><span class="comment">// 最大值</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.max());</span></span><br><span class="line"><span class="comment">// 最小值</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.min());</span></span><br><span class="line"><span class="comment">// 搜索 key</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(11));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(7));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(15));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(5));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(3));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(9));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(8));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(10));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(6));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(13));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(12));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(14));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(20));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(18));</span></span><br><span class="line"><span class="comment">// console.log(binarySearchTree.search(25));</span></span><br><span class="line"><span class="built_in">console</span>.log(binarySearchTree.levelTraversal());</span><br><span class="line"><span class="built_in">console</span>.log(binarySearchTree.remove(<span class="number">11</span>));</span><br><span class="line"><span class="built_in">console</span>.log(binarySearchTree.levelTraversal());</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Js 封装二叉搜索树</summary>
    
    
    
    <category term="数据结构" scheme="https://codehhr.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="树结构" scheme="https://codehhr.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://codehhr.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="二叉树" scheme="https://codehhr.cn/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>用 Object.create 实现类式继承</title>
    <link href="https://codehhr.cn/2021/10/15/js/js-object-create/"/>
    <id>https://codehhr.cn/2021/10/15/js/js-object-create/</id>
    <published>2021-10-15T04:42:19.000Z</published>
    <updated>2021-10-15T04:52:38.247Z</updated>
    
    <content type="html"><![CDATA[<!-- <div class="note info flat"><p><code>Object.create()</code> 方法创建一个新对象 , 使用现有的对象来提供新创建的对象的 <code>__proto__</code></p></div> --><h1 id="下面的例子演示了如何使用-Object-create-来实现类式继承"><a href="#下面的例子演示了如何使用-Object-create-来实现类式继承" class="headerlink" title="下面的例子演示了如何使用 Object.create() 来实现类式继承"></a>下面的例子演示了如何使用 Object.create() 来实现类式继承</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Animal ( 父类 )</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二哈 ( 子类 )</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ErHa</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 拿到父类属性 ( call super constructor )</span></span><br><span class="line">  Animal.call(<span class="built_in">this</span>, color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类续承父类</span></span><br><span class="line">ErHa.prototype = <span class="built_in">Object</span>.create(Animal.prototype);</span><br><span class="line">ErHa.prototype.constructor = ErHa;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建子类实例</span></span><br><span class="line"><span class="keyword">let</span> erha = <span class="keyword">new</span> ErHa(<span class="string">&quot;black&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证</span></span><br><span class="line"><span class="built_in">console</span>.log(erha <span class="keyword">instanceof</span> ErHa); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(erha <span class="keyword">instanceof</span> Animal); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;!-- &lt;div class=&quot;note info flat&quot;&gt;&lt;p&gt;&lt;code&gt;Object.create()&lt;/code&gt; 方法创建一个新对象 , 使用现有的对象来提供新创建的对象的 &lt;code&gt;__proto__&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt; --&gt;

&lt;h1 id</summary>
      
    
    
    
    <category term="js" scheme="https://codehhr.cn/categories/js/"/>
    
    
    <category term="js" scheme="https://codehhr.cn/tags/js/"/>
    
    <category term="javascript" scheme="https://codehhr.cn/tags/javascript/"/>
    
    <category term="继承" scheme="https://codehhr.cn/tags/%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>express 路由</title>
    <link href="https://codehhr.cn/2021/10/13/express/express-route/"/>
    <id>https://codehhr.cn/2021/10/13/express/express-route/</id>
    <published>2021-10-12T16:32:39.000Z</published>
    <updated>2021-10-12T17:41:49.179Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p>路由是指确定应用程序如何响应客户端对特定端点的请求, 该特定端点是 <code>URL</code> (路径) 和特定的 <code>HTTP</code> 请求方法 (<code>GET</code>, <code>POST</code> 等)<br>每个路由可以具有一个或多个处理程序函数, 这些函数在匹配该路由时执行<br>路由定义采用以下结构 :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.METHOD(PATH, HANDLER);</span><br></pre></td></tr></table></figure><ul><li><code>app</code> 是 <code>Express</code> 实例</li><li><code>METHOD</code> 是小写的 <code>HTTP</code> 请求方法</li><li><code>PATH</code> 是服务器上的路径</li><li><code>HANDLER</code> 是当路由匹配时执行的功能</li></ul><h1 id="一些简单实例"><a href="#一些简单实例" class="headerlink" title="一些简单实例"></a>一些简单实例</h1><p><strong>可以用 <code>postman</code> 来测试</strong></p><h2 id="在根路径响应-HelloWorld"><a href="#在根路径响应-HelloWorld" class="headerlink" title="在根路径响应 HelloWorld"></a>在根路径响应 <code>HelloWorld</code></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="在根路径响应-POST-请求"><a href="#在根路径响应-POST-请求" class="headerlink" title="在根路径响应 POST 请求"></a>在根路径响应 <code>POST</code> 请求</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&quot;POST request&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="响应对-user-路径的-PUT-请求"><a href="#响应对-user-路径的-PUT-请求" class="headerlink" title="响应对 /user 路径的 PUT 请求"></a>响应对 <code>/user</code> 路径的 <code>PUT</code> 请求</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.put(<span class="string">&quot;/user&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&quot;PUT request at /user&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="响应对-user-路由的-DELETE-请求"><a href="#响应对-user-路由的-DELETE-请求" class="headerlink" title="响应对 /user 路由的 DELETE 请求"></a>响应对 <code>/user</code> 路由的 <code>DELETE</code> 请求</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.delete(<span class="string">&quot;/user&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&quot;DELETE request at /user&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h1&gt;&lt;p&gt;路由是指确定应用程序如何响应客户端对特定端点的请求, 该特定端点是 &lt;code&gt;URL&lt;/code&gt; (路径) 和特定的 &lt;code&gt;HTT</summary>
      
    
    
    
    <category term="express" scheme="https://codehhr.cn/categories/express/"/>
    
    
    <category term="express" scheme="https://codehhr.cn/tags/express/"/>
    
  </entry>
  
  <entry>
    <title>express 起步 - HelloWorld</title>
    <link href="https://codehhr.cn/2021/10/12/express/express-helloworld/"/>
    <id>https://codehhr.cn/2021/10/12/express/express-helloworld/</id>
    <published>2021-10-12T15:56:14.000Z</published>
    <updated>2021-10-12T16:29:16.764Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初始化-package-json"><a href="#初始化-package-json" class="headerlink" title="初始化 package.json"></a>初始化 package.json</h1><p>随便找个目录 , 使用 <code>npm</code> 初始化 <code>package.json</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p><code>-y</code> 这个参数意思是默认所有操作都为 <code>yes</code></p><h1 id="创建入口文件"><a href="#创建入口文件" class="headerlink" title="创建入口文件"></a>创建入口文件</h1><p>先创建一个 <code>js</code> 文件 , 比如 <code>app.js</code> , 然后简单写一些内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载 express 模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="comment">// 获得一个应用实例</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一个路由, 比如用 get 请求 &quot; / &quot; 响应一个 &quot;HelloWorld&quot;</span></span><br><span class="line">app.get(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置服务启动端口, 回调函数</span></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Server is running at http://localhost:3000&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node app.js</span><br></pre></td></tr></table></figure><p>此时打开 <code>http://localhost:3000</code> 就能看到 <code>HelloWorld</code> 了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;初始化-package-json&quot;&gt;&lt;a href=&quot;#初始化-package-json&quot; class=&quot;headerlink&quot; title=&quot;初始化 package.json&quot;&gt;&lt;/a&gt;初始化 package.json&lt;/h1&gt;&lt;p&gt;随便找个目录 , 使用 &lt;c</summary>
      
    
    
    
    <category term="express" scheme="https://codehhr.cn/categories/express/"/>
    
    
    <category term="express" scheme="https://codehhr.cn/tags/express/"/>
    
  </entry>
  
  <entry>
    <title>日期格式化</title>
    <link href="https://codehhr.cn/2021/10/12/js/js-formatDate/"/>
    <id>https://codehhr.cn/2021/10/12/js/js-formatDate/</id>
    <published>2021-10-12T12:44:17.000Z</published>
    <updated>2021-10-12T12:50:02.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一般用在-Vue-里的-filter-上"><a href="#一般用在-Vue-里的-filter-上" class="headerlink" title="一般用在 Vue 里的 filter 上"></a>一般用在 Vue 里的 filter 上</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatDate</span>(<span class="params">d, format</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> year = d.getFullYear(),</span><br><span class="line">    month = d.getMonth() + <span class="number">1</span>,</span><br><span class="line">    date = d.getDate(),</span><br><span class="line">    hour = d.getHours(),</span><br><span class="line">    minute = d.getMinutes(),</span><br><span class="line">    second = d.getSeconds(),</span><br><span class="line">    day = d.getDay(),</span><br><span class="line">    week = [<span class="string">&quot;日&quot;</span>, <span class="string">&quot;一&quot;</span>, <span class="string">&quot;二&quot;</span>, <span class="string">&quot;三&quot;</span>, <span class="string">&quot;四&quot;</span>, <span class="string">&quot;五&quot;</span>, <span class="string">&quot;六&quot;</span>];</span><br><span class="line">  <span class="keyword">return</span> format</span><br><span class="line">    .replace(<span class="regexp">/yyyy/</span>, year)</span><br><span class="line">    .replace(<span class="regexp">/yy/</span>, formatNum(year % <span class="number">100</span>))</span><br><span class="line">    .replace(<span class="regexp">/MM/</span>, formatNum(month))</span><br><span class="line">    .replace(<span class="regexp">/M/</span>, month)</span><br><span class="line">    .replace(<span class="regexp">/dd/</span>, formatNum(date))</span><br><span class="line">    .replace(<span class="regexp">/d/</span>, date)</span><br><span class="line">    .replace(<span class="regexp">/HH/</span>, formatNum(hour))</span><br><span class="line">    .replace(<span class="regexp">/H/</span>, hour)</span><br><span class="line">    .replace(<span class="regexp">/hh/</span>, formatNum(hour % <span class="number">12</span>))</span><br><span class="line">    .replace(<span class="regexp">/h/</span>, hour % <span class="number">12</span>)</span><br><span class="line">    .replace(<span class="regexp">/mm/</span>, formatNum(minute))</span><br><span class="line">    .replace(<span class="regexp">/m/</span>, minute)</span><br><span class="line">    .replace(<span class="regexp">/ss/</span>, formatNum(second))</span><br><span class="line">    .replace(<span class="regexp">/s/</span>, second)</span><br><span class="line">    .replace(<span class="regexp">/w/</span>, week[day]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatNum</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> n &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + +n : n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一般用在-Vue-里的-filter-上&quot;&gt;&lt;a href=&quot;#一般用在-Vue-里的-filter-上&quot; class=&quot;headerlink&quot; title=&quot;一般用在 Vue 里的 filter 上&quot;&gt;&lt;/a&gt;一般用在 Vue 里的 filter 上&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="js" scheme="https://codehhr.cn/categories/js/"/>
    
    
    <category term="js" scheme="https://codehhr.cn/tags/js/"/>
    
    <category term="formatDate" scheme="https://codehhr.cn/tags/formatDate/"/>
    
  </entry>
  
  <entry>
    <title>用 Js 封装单链表</title>
    <link href="https://codehhr.cn/2021/10/12/data-structure/ds-linkedList/"/>
    <id>https://codehhr.cn/2021/10/12/data-structure/ds-linkedList/</id>
    <published>2021-10-12T12:28:45.000Z</published>
    <updated>2021-10-19T16:49:44.554Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 单向链表</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装链表类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LinkedList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 链表头部 (头指针)</span></span><br><span class="line">  <span class="built_in">this</span>.head = <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">// 链表长度</span></span><br><span class="line">  <span class="built_in">this</span>.length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 封装节点</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.data = data;</span><br><span class="line">    <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 追加节点方法</span></span><br><span class="line">  <span class="comment">// data: 追加节点内容</span></span><br><span class="line">  LinkedList.prototype.appendNode = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 创建新节点</span></span><br><span class="line">    <span class="keyword">let</span> newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断追加位置</span></span><br><span class="line">    <span class="comment">// 如果链表长度为 0, 头指针指向这个新节点</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.head = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 把头节点当作临时节点, 一直向后找, 直到临时节点的 next 指向 null</span></span><br><span class="line">      <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">      <span class="keyword">while</span> (currentNode.next) &#123;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 此时以找到链表尾部, 可把新节点追加在后面</span></span><br><span class="line">      currentNode.next = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.length++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 插入节点方法</span></span><br><span class="line">  <span class="comment">// position: 插入位置</span></span><br><span class="line">  <span class="comment">// data: 插入内容</span></span><br><span class="line">  LinkedList.prototype.insertNode = <span class="function"><span class="keyword">function</span> (<span class="params">position, data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 先排除几种情况</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">      <span class="comment">// 如果插入位置为 0, 则让新节点指向原来的第一个节点, 也就是原来头指针指向的节点</span></span><br><span class="line">      <span class="keyword">if</span> (position == <span class="number">0</span>) &#123;</span><br><span class="line">        newNode.next = <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="built_in">this</span>.head = newNode;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 临时节点, 去匹配 position</span></span><br><span class="line">        <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="comment">// 因为插入节点需要两个节点操作, previousNode 为前驱, currentNode 为后继</span></span><br><span class="line">        <span class="keyword">let</span> previousNode = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 找到 position 的位置</span></span><br><span class="line">        <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">          previousNode = currentNode;</span><br><span class="line">          currentNode = currentNode.next;</span><br><span class="line">        &#125;</span><br><span class="line">        newNode.next = currentNode;</span><br><span class="line">        previousNode.next = newNode;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">this</span>.length++;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取对应节点数据方法</span></span><br><span class="line">  LinkedList.prototype.getNodeDataByPosition = <span class="function"><span class="keyword">function</span> (<span class="params">position</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 排除越界访问情况</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 从头节点开始往后找</span></span><br><span class="line">      <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">      <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> currentNode.data;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// indexOf 方法</span></span><br><span class="line">  LinkedList.prototype.indexOf = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (currentNode) &#123;</span><br><span class="line">      <span class="keyword">if</span> (currentNode.data == data) &#123;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">        index++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// update 方法</span></span><br><span class="line">  LinkedList.prototype.updateNode = <span class="function"><span class="keyword">function</span> (<span class="params">position, newData</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 越界情况</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 先找到要修改的节点的位置</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">      currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">    currentNode.data = newData;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// removeAt 方法</span></span><br><span class="line">  LinkedList.prototype.removeAt = <span class="function"><span class="keyword">function</span> (<span class="params">position</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (position == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.head = <span class="built_in">this</span>.head.next;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> previousNode = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">          previousNode = currentNode;</span><br><span class="line">          currentNode = currentNode.next;</span><br><span class="line">        &#125;</span><br><span class="line">        previousNode.next = currentNode.next;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">this</span>.length--;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// remove 方法</span></span><br><span class="line">  LinkedList.prototype.remove = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.removeAt(<span class="built_in">this</span>.indexOf(data));</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// isEmpty 方法</span></span><br><span class="line">  LinkedList.prototype.isEmpty = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length == <span class="number">0</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// size 方法</span></span><br><span class="line">  LinkedList.prototype.size = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="数据结构" scheme="https://codehhr.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="链表结构" scheme="https://codehhr.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://codehhr.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="单链表" scheme="https://codehhr.cn/tags/%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>用 Js 封装优先级队列</title>
    <link href="https://codehhr.cn/2021/10/12/data-structure/ds-priorityQueue/"/>
    <id>https://codehhr.cn/2021/10/12/data-structure/ds-priorityQueue/</id>
    <published>2021-10-12T12:23:10.000Z</published>
    <updated>2021-10-19T11:27:46.567Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 优先级队列</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装一个类来实现: 优先级队列</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PriorityQueue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 封装属性</span></span><br><span class="line">  <span class="built_in">this</span>.list = [];</span><br><span class="line">  <span class="comment">// 封装一个类来承载带优先级的数据</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Element</span>(<span class="params">data, priority</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.data = data;</span><br><span class="line">    <span class="built_in">this</span>.priority = priority;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  PriorityQueue.prototype.add = <span class="function"><span class="keyword">function</span> (<span class="params">data, priority</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> element = <span class="keyword">new</span> Element(data, priority);</span><br><span class="line">    <span class="comment">// 判断优先级并将元素加入队列</span></span><br><span class="line">    <span class="comment">// 如果队列长度为 0,直接加入队列</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.list.length) &#123;</span><br><span class="line">      <span class="built_in">this</span>.list.push(element);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 立一个 flag,当 element 加入 list 了就把 added 改为 true</span></span><br><span class="line">      <span class="keyword">let</span> added = <span class="literal">false</span>;</span><br><span class="line">      <span class="comment">// 遍历 list,比较优先级</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.list.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (element.priority &lt; <span class="built_in">this</span>.list[i].priority) &#123;</span><br><span class="line">          <span class="built_in">this</span>.list.splice(i, <span class="number">0</span>, element);</span><br><span class="line">          added = <span class="literal">true</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果遍历完 list 都没有找到合适的位置,就直接加到后面</span></span><br><span class="line">      <span class="keyword">if</span> (!added) &#123;</span><br><span class="line">        <span class="built_in">this</span>.list.push(element);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.list;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个优先级队列实例</span></span><br><span class="line"><span class="keyword">let</span> priorityQueue = <span class="keyword">new</span> PriorityQueue();</span><br><span class="line"><span class="comment">// 试着添加元素</span></span><br><span class="line">priorityQueue.add(<span class="string">&quot;A&quot;</span>, <span class="number">10</span>);</span><br><span class="line">priorityQueue.add(<span class="string">&quot;B&quot;</span>, <span class="number">40</span>);</span><br><span class="line">priorityQueue.add(<span class="string">&quot;C&quot;</span>, <span class="number">20</span>);</span><br><span class="line">priorityQueue.add(<span class="string">&quot;D&quot;</span>, <span class="number">100</span>);</span><br><span class="line">priorityQueue.add(<span class="string">&quot;E&quot;</span>, <span class="number">60</span>);</span><br><span class="line"><span class="built_in">console</span>.log(priorityQueue);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="数据结构" scheme="https://codehhr.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="队列结构" scheme="https://codehhr.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://codehhr.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="队列" scheme="https://codehhr.cn/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>面试题-击鼓传花 ( 队列 )</title>
    <link href="https://codehhr.cn/2021/10/12/data-structure/ds-passflower/"/>
    <id>https://codehhr.cn/2021/10/12/data-structure/ds-passflower/</id>
    <published>2021-10-12T12:07:56.000Z</published>
    <updated>2021-10-20T12:04:18.224Z</updated>
    
    <content type="html"><![CDATA[<div class="note warning no-icon flat"><p>设有 <code>N</code> 个人围成一个圈 , 随机选一个数字 , 从第一个人开始数数 , 数到该数字的人出列 , 直到剩下最后一人 , 即为赢家</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  击鼓传花</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建队列结构</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.queue = [];</span><br><span class="line">  <span class="comment">// 队尾添加新元素</span></span><br><span class="line">  Queue.prototype.add = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.queue.push(e);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 队首删除</span></span><br><span class="line">  Queue.prototype.del = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.queue.shift();</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 查看队首元素</span></span><br><span class="line">  Queue.prototype.head = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.queue[<span class="number">0</span>];</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 检查队列的长度</span></span><br><span class="line">  Queue.prototype.size = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.queue.length;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装函数实现: 击鼓传花</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">passFlower</span>(<span class="params">list, n</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 创建队列结构</span></span><br><span class="line">  <span class="keyword">let</span> queue = <span class="keyword">new</span> Queue();</span><br><span class="line">  <span class="comment">// 将所有人加入队列</span></span><br><span class="line">  list.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    queue.add(item);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 开始数数,数了的人排到后面,重新依次加入队列,数到 n 的人淘汰,从队列中删除</span></span><br><span class="line">  <span class="comment">// 因为是数到 n 的人淘汰,所以前 n-1 的人 (下标 0&lt;i&lt;n-1) 重新加入队列</span></span><br><span class="line">  <span class="comment">// 重复此操作,直到剩下一人</span></span><br><span class="line">  <span class="keyword">while</span> (queue.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">      queue.add(queue.del());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 剩下的这个人 (第 n 个人) 被淘汰</span></span><br><span class="line">    queue.del();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 拿到最后剩下的那个人 (赢家) 及下标</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: queue.head(),</span><br><span class="line">    <span class="attr">index</span>: list.indexOf(queue.head()),</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> list = [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;E&quot;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(passFlower(list, <span class="number">3</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note warning no-icon flat&quot;&gt;&lt;p&gt;设有 &lt;code&gt;N&lt;/code&gt; 个人围成一个圈 , 随机选一个数字 , 从第一个人开始数数 , 数到该数字的人出列 , 直到剩下最后一人 , 即为赢家&lt;/p&gt;
&lt;/div&gt;

&lt;figure </summary>
      
    
    
    
    <category term="数据结构" scheme="https://codehhr.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="队列结构" scheme="https://codehhr.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://codehhr.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="击鼓传花" scheme="https://codehhr.cn/tags/%E5%87%BB%E9%BC%93%E4%BC%A0%E8%8A%B1/"/>
    
    <category term="队列" scheme="https://codehhr.cn/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>实现 promiseAll 方法</title>
    <link href="https://codehhr.cn/2021/10/12/js/js-promiseAll/"/>
    <id>https://codehhr.cn/2021/10/12/js/js-promiseAll/</id>
    <published>2021-10-12T11:42:01.000Z</published>
    <updated>2021-10-12T11:51:02.108Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">&quot;I&#x27;m p1&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">&quot;I&#x27;m p2&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dealPromiseAll</span>(<span class="params">list</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> promiseArr = [];</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    list.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">      item.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        promiseArr.push(res);</span><br><span class="line">        <span class="keyword">if</span> (index == list.length - <span class="number">1</span>) &#123;</span><br><span class="line">          resolve(promiseArr);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dealPromiseAll([p1, p2]).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res); <span class="comment">// [ &quot;I&#x27;m p1&quot;, &quot;I&#x27;m p2&quot; ]</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="js" scheme="https://codehhr.cn/categories/js/"/>
    
    
    <category term="js" scheme="https://codehhr.cn/tags/js/"/>
    
    <category term="javascript" scheme="https://codehhr.cn/tags/javascript/"/>
    
    <category term="promiseAll" scheme="https://codehhr.cn/tags/promiseAll/"/>
    
  </entry>
  
  <entry>
    <title>配置 loader 进行 css 打包</title>
    <link href="https://codehhr.cn/2021/09/20/webpack/webpack-loader/"/>
    <id>https://codehhr.cn/2021/09/20/webpack/webpack-loader/</id>
    <published>2021-09-20T08:07:08.000Z</published>
    <updated>2021-09-20T13:32:17.179Z</updated>
    
    <content type="html"><![CDATA[<div class="note info flat"><p><code>Webpack</code> 原生支持 <code>js</code> 和 <code>json</code> , 可以使用 <code>loader</code> 告诉 <code>webpack</code> 加载 <code>CSS</code> 文件 , 或者将 <code>TypeScript</code> 转为 <code>JavaScript</code></p></div><h1 id="安装相对应的-loader"><a href="#安装相对应的-loader" class="headerlink" title="安装相对应的 loader"></a>安装相对应的 loader</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install style-loader css-loader -S -D</span><br></pre></td></tr></table></figure><h1 id="引入-CSS"><a href="#引入-CSS" class="headerlink" title="引入 CSS"></a>引入 CSS</h1><p>在入口文件里使用 <code>import</code> 引入 <code>css</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;./style.css&quot;</span>;</span><br></pre></td></tr></table></figure><h1 id="loader-的配置"><a href="#loader-的配置" class="headerlink" title="loader 的配置"></a>loader 的配置</h1><p>在 <code>webpack.config.js</code> 里添加配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  <span class="comment">// 对某个格式的文件进行转换</span></span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 正则匹配</span></span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      <span class="comment">// style-loader 将 js 的样式内容插入</span></span><br><span class="line">      <span class="comment">// css-loader 将 css 转换为 js</span></span><br><span class="line">      <span class="comment">// use 数组里 loader 解析的顺序是从后往前 (逆序)</span></span><br><span class="line">      use: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">  ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前 <code>webpack.config.js</code> 的完整配置是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 入口文件</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/index.js&quot;</span>,</span><br><span class="line">  <span class="comment">// 输出</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="comment">// 输出文件名</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;pack.js&quot;</span>,</span><br><span class="line">    <span class="comment">// 输出路径 (绝对路径)</span></span><br><span class="line">    <span class="comment">// 利用 path 模块获取当前路径</span></span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 打包模式; 开发环境--development, 生产环境--production</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="comment">// 对某个格式的文件进行转换</span></span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 正则匹配</span></span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">// style-loader 将 js 的样式内容插入</span></span><br><span class="line">        <span class="comment">// css-loader 将 css 转换为 js</span></span><br><span class="line">        <span class="comment">// use 数组里 loader 解析的顺序是从后往前 (逆序)</span></span><br><span class="line">        use: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="尝试打包"><a href="#尝试打包" class="headerlink" title="尝试打包"></a>尝试打包</h1><p>在根目录 (<code>webpack.config.js</code> 所在路径) 下直接输入 <code>webpack</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack</span><br></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>在 <code>html</code> 文件里引入打包好的 <code>js</code> 文件 , 用浏览器打开验证 <code>样式</code> 是否生效</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info flat&quot;&gt;&lt;p&gt;&lt;code&gt;Webpack&lt;/code&gt; 原生支持 &lt;code&gt;js&lt;/code&gt; 和 &lt;code&gt;json&lt;/code&gt; , 可以使用 &lt;code&gt;loader&lt;/code&gt; 告诉 &lt;code&gt;webpack&lt;/co</summary>
      
    
    
    
    <category term="Webpack" scheme="https://codehhr.cn/categories/Webpack/"/>
    
    
    <category term="Webpack" scheme="https://codehhr.cn/tags/Webpack/"/>
    
    <category term="loader" scheme="https://codehhr.cn/tags/loader/"/>
    
  </entry>
  
  <entry>
    <title>Webpack 使用配置文件打包</title>
    <link href="https://codehhr.cn/2021/09/19/webpack/webpack-use-config/"/>
    <id>https://codehhr.cn/2021/09/19/webpack/webpack-use-config/</id>
    <published>2021-09-19T06:16:55.000Z</published>
    <updated>2021-09-20T13:02:42.111Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h1><p>创建 <code>webpack.config.js</code> 文件 , 一般放在项目根目录下</p><h2 id="文件内容"><a href="#文件内容" class="headerlink" title="文件内容"></a>文件内容</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 入口文件</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/index.js&quot;</span>,</span><br><span class="line">  <span class="comment">// 输出</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="comment">// 输出文件名</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;pack.js&quot;</span>,</span><br><span class="line">    <span class="comment">// 输出路径 (绝对路径)</span></span><br><span class="line">    <span class="comment">// 利用 path 模块获取当前路径</span></span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 打包模式; 开发环境--development, 生产环境--production</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="试着打包"><a href="#试着打包" class="headerlink" title="试着打包"></a>试着打包</h2><p>终端下直接输入 <code>webpack</code> , 这次不用输入参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;创建配置文件&quot;&gt;&lt;a href=&quot;#创建配置文件&quot; class=&quot;headerlink&quot; title=&quot;创建配置文件&quot;&gt;&lt;/a&gt;创建配置文件&lt;/h1&gt;&lt;p&gt;创建 &lt;code&gt;webpack.config.js&lt;/code&gt; 文件 , 一般放在项目根目录下&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Webpack" scheme="https://codehhr.cn/categories/Webpack/"/>
    
    
    <category term="Webpack" scheme="https://codehhr.cn/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>Webpack 打包初体验</title>
    <link href="https://codehhr.cn/2021/09/17/webpack/webpack-first/"/>
    <id>https://codehhr.cn/2021/09/17/webpack/webpack-first/</id>
    <published>2021-09-17T14:44:25.000Z</published>
    <updated>2021-09-19T06:48:39.447Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装-Webpack"><a href="#安装-Webpack" class="headerlink" title="安装 Webpack"></a>安装 Webpack</h1><p>直接全局安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack webpack-cli -g</span><br></pre></td></tr></table></figure><h1 id="初始化-package-json"><a href="#初始化-package-json" class="headerlink" title="初始化 package.json"></a>初始化 package.json</h1><p><code>-y</code> 参数就是 <code>yes</code> , 省得一路回车</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><h1 id="试着打包几个文件"><a href="#试着打包几个文件" class="headerlink" title="试着打包几个文件"></a>试着打包几个文件</h1><p>比如按照 <code>Vue</code> 框架的目录 , 创建一个 <code>src</code> 的子文件夹 , 在 <code>src</code> 里面创建一个 <code>index.js</code> 和 <code>data.js</code> 的文件 , <strong>把 <code>index.js</code> 但当作入口文件</strong></p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><ul><li>project<ul><li>src<ul><li>index.js</li><li>data.js</li></ul></li></ul></li></ul><h2 id="文件内容"><a href="#文件内容" class="headerlink" title="文件内容"></a>文件内容</h2><p>随便写点东西</p><h3 id="data-json"><a href="#data-json" class="headerlink" title="data.json"></a>data.json</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">job</span>: <span class="string">&quot;Coding every day&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 data.json</span></span><br><span class="line"><span class="keyword">import</span> data <span class="keyword">from</span> <span class="string">&quot;./date&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;这是 index.js&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br></pre></td></tr></table></figure><h1 id="安装-Webpack-依赖"><a href="#安装-Webpack-依赖" class="headerlink" title="安装 Webpack 依赖"></a>安装 Webpack 依赖</h1><p><code>-S</code> 就是 <code>--save</code> , 用于生产环境 , <code>-D</code> 就是 <code>--dev</code> , 用户开发环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack webpack-cli -S -D</span><br></pre></td></tr></table></figure><h1 id="打包为开发-生产-环境"><a href="#打包为开发-生产-环境" class="headerlink" title="打包为开发(生产)环境"></a>打包为开发(生产)环境</h1><p><strong>不同版本的 <code>webpack</code> 打包的命令参数还不太一样</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack --entry ./src/index.js --mode development</span><br></pre></td></tr></table></figure><p><code>--entry</code> 为入口文件 , <code>-o</code> 可以指定输出路径, <code>--mode</code> 指定打包模式 , <code>development</code> 为开发环境模式 , <code>production</code> 为生产环境模式 , 也就是上线用的 ( 压缩的 )</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安装-Webpack&quot;&gt;&lt;a href=&quot;#安装-Webpack&quot; class=&quot;headerlink&quot; title=&quot;安装 Webpack&quot;&gt;&lt;/a&gt;安装 Webpack&lt;/h1&gt;&lt;p&gt;直接全局安装&lt;/p&gt;
&lt;figure class=&quot;highlight ba</summary>
      
    
    
    
    <category term="Webpack" scheme="https://codehhr.cn/categories/Webpack/"/>
    
    
    <category term="Webpack" scheme="https://codehhr.cn/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 环境安装</title>
    <link href="https://codehhr.cn/2021/09/15/ts/ts-install-typescript/"/>
    <id>https://codehhr.cn/2021/09/15/ts/ts-install-typescript/</id>
    <published>2021-09-15T15:33:41.000Z</published>
    <updated>2022-01-03T11:55:51.110Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h1><p><code>TypeScript</code> 是 <code>JavaScript</code> 的一个超集 , 支持 <code>ECMAScript 6</code> 标准 ( <a href="https://codehhr.cn/categories/js/ES6/"><strong>关于 ES6</strong></a> )<br><code>TypeScript</code> 由微软开发的自由和开源的编程语言 , <code>TypeScript</code> 设计目标是开发大型应用 , 它可以编译成纯 <code>JavaScript</code> , 编译出来的 <code>JavaScript</code> 可以运行在任何浏览器上</p><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/ts/ts.jpeg" alt="TypeScript"></p><h1 id="TypeScript-安装"><a href="#TypeScript-安装" class="headerlink" title="TypeScript 安装"></a>TypeScript 安装</h1><h2 id="使用-npm-安装"><a href="#使用-npm-安装" class="headerlink" title="使用 npm 安装"></a>使用 <code>npm</code> 安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install typescript -g</span><br></pre></td></tr></table></figure><p><strong>Linux 用户的话 , <code>-g</code> 全局安装会出现 <code>permission denied</code> , 意思就是权限不够嘛 , 用 <code>sudo</code> 或 <code>root</code> 用户就可以了</strong></p><h2 id="安装完成后可以使用-tsc-命令来执行-TypeScript-的相关代码-比如查看版本号"><a href="#安装完成后可以使用-tsc-命令来执行-TypeScript-的相关代码-比如查看版本号" class="headerlink" title="安装完成后可以使用 tsc 命令来执行 TypeScript 的相关代码 , 比如查看版本号 :"></a>安装完成后可以使用 <code>tsc</code> 命令来执行 <code>TypeScript</code> 的相关代码 , 比如查看版本号 :</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc -v</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Version 4.4.3</span><br></pre></td></tr></table></figure><h2 id="把-ts-文件转换为-js-文件"><a href="#把-ts-文件转换为-js-文件" class="headerlink" title="把 ts 文件转换为 js 文件"></a>把 ts 文件转换为 js 文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc index.ts</span><br></pre></td></tr></table></figure><p>结果会多出一个 <code>js</code> 文件 , 然后你可以用 <code>node index.js</code> 来执行 , 确实有点麻烦 , 当然有解决办法 , 安装 <code>ts-node</code></p><h2 id="安装-ts-node"><a href="#安装-ts-node" class="headerlink" title="安装 ts-node"></a>安装 ts-node</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install ts-node -g</span><br></pre></td></tr></table></figure><h2 id="用-ts-node-来执行"><a href="#用-ts-node-来执行" class="headerlink" title="用 ts-node 来执行"></a>用 ts-node 来执行</h2><p>就是略慢 , 他得转换一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ts-node index.ts</span><br></pre></td></tr></table></figure><h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;TypeScript&quot;&gt;&lt;a href=&quot;#TypeScript&quot; class=&quot;headerlink&quot; title=&quot;TypeScript&quot;&gt;&lt;/a&gt;TypeScript&lt;/h1&gt;&lt;p&gt;&lt;code&gt;TypeScript&lt;/code&gt; 是 &lt;code&gt;JavaSc</summary>
      
    
    
    
    <category term="TypeScript" scheme="https://codehhr.cn/categories/TypeScript/"/>
    
    
    <category term="TypeScript" scheme="https://codehhr.cn/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs EventEmitter</title>
    <link href="https://codehhr.cn/2021/09/08/node/node-EventEmitter/"/>
    <id>https://codehhr.cn/2021/09/08/node/node-EventEmitter/</id>
    <published>2021-09-08T14:24:57.000Z</published>
    <updated>2021-09-08T16:04:42.258Z</updated>
    
    <content type="html"><![CDATA[<div class="note info flat"><p><strong>Node.js EventEmitter</strong><br><code>Node.js</code> 所有的异步 <code>I/O</code> 操作在完成时都会发送一个事件到事件队列<br><code>Node.js</code> 里面的许多对象都会分发事件 : 一个 <code>net.Server</code> 对象会在每次有新连接时触发一个事件 , 一个 <code>fs.readStream</code> 对象会在文件被打开的时候触发一个事件 , 所有这些产生事件的对象都是 <code>events.EventEmitter</code> 的实例</p></div><h1 id="EventEmitter-类"><a href="#EventEmitter-类" class="headerlink" title="EventEmitter 类"></a>EventEmitter 类</h1><p><code>events</code> 模块只提供了一个对象： <code>events.EventEmitter</code> , <code>EventEmitter</code> 的核心就是事件触发与事件监听器功能的封装</p><p>可以通过 <code>require(&quot;events&quot;)</code> 来访问该模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 events 模块</span></span><br><span class="line"><span class="keyword">let</span> events = <span class="built_in">require</span>(<span class="string">&quot;events&quot;</span>);</span><br><span class="line"><span class="comment">// 创建 eventEmitter 对象</span></span><br><span class="line"><span class="keyword">let</span> eventEmitter = <span class="keyword">new</span> events.EventEmitter();</span><br></pre></td></tr></table></figure><h1 id="EventEmitter-的事件监听和触发"><a href="#EventEmitter-的事件监听和触发" class="headerlink" title="EventEmitter 的事件监听和触发"></a>EventEmitter 的事件监听和触发</h1><p><code>EventEmitter</code> 的每个事件由一个<code>事件名</code>和<code>若干个参数</code>组成 , 事件名是一个自定义的字符串 , 通常表达一定的语义 , 对于每个事件 , <code>EventEmitter</code> 支持若干个事件监听器<br>当事件触发时 , 注册到这个事件的事件监听器被依次调用 , 事件参数作为回调函数参数传递</p><p>让我们以下面的例子解释这个过程 :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 events 模块</span></span><br><span class="line"><span class="keyword">let</span> events = <span class="built_in">require</span>(<span class="string">&quot;events&quot;</span>);</span><br><span class="line"><span class="comment">// 创建 eventEmitter 对象</span></span><br><span class="line"><span class="keyword">let</span> eventEmitter = <span class="keyword">new</span> events.EventEmitter();</span><br><span class="line">eventEmitter.on(<span class="string">&quot;someEvent&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;listener1&quot;</span>, arg1, arg2);</span><br><span class="line">&#125;);</span><br><span class="line">eventEmitter.on(<span class="string">&quot;someEvent&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;listener2&quot;</span>, arg1, arg2);</span><br><span class="line">&#125;);</span><br><span class="line">eventEmitter.emit(<span class="string">&quot;someEvent&quot;</span>, <span class="string">&quot;参数 1&quot;</span>, <span class="string">&quot;参数 2&quot;</span>);</span><br></pre></td></tr></table></figure><p>执行结果 :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">listener1 参数 1 参数 2</span><br><span class="line">listener2 参数 1 参数 2</span><br></pre></td></tr></table></figure><p>以上例子中 , <code>eventEmitter</code> 为事件 <code>someEvent</code> 注册了两个事件监听器 , 然后触发了 <code>someEvent</code> 事件<br>运行结果中可以看到两个事件监听器回调函数被先后调用 , 这就是 <code>EventEmitter</code> 最简单的用法<br><strong><code>EventEmitter</code> 提供了多个属性 , 如 <code>on</code> 和 <code>emit</code> , <code>on</code> 函数用于绑定事件函数 , <code>emit</code> 属性用于触发一个事件</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info flat&quot;&gt;&lt;p&gt;&lt;strong&gt;Node.js EventEmitter&lt;/strong&gt;&lt;br&gt;&lt;code&gt;Node.js&lt;/code&gt; 所有的异步 &lt;code&gt;I/O&lt;/code&gt; 操作在完成时都会发送一个事件到事件队列&lt;br&gt;&lt;</summary>
      
    
    
    
    <category term="node" scheme="https://codehhr.cn/categories/node/"/>
    
    
    <category term="node" scheme="https://codehhr.cn/tags/node/"/>
    
    <category term="EventEmitter" scheme="https://codehhr.cn/tags/EventEmitter/"/>
    
  </entry>
  
  <entry>
    <title>Vue 路由守卫</title>
    <link href="https://codehhr.cn/2021/07/31/vue/vue-beforeEach/"/>
    <id>https://codehhr.cn/2021/07/31/vue/vue-beforeEach/</id>
    <published>2021-07-31T12:27:13.000Z</published>
    <updated>2021-11-18T14:26:55.098Z</updated>
    
    <content type="html"><![CDATA[<h1 id="全局前置守卫"><a href="#全局前置守卫" class="headerlink" title="全局前置守卫"></a>全局前置守卫</h1><p>你可以使用 <code>router.beforeEach</code> 注册一个全局前置守卫</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123; ... &#125;)</span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当一个导航触发时 , 全局前置守卫按照创建顺序调用,守卫是异步解析执行 , 此时导航在所有守卫 <code>resolve</code> 完之前一直处于 等待中</p><p><strong>每个守卫方法接收三个参数 :</strong></p><ul><li><code>to: Route</code>: 即将要进入的目标 <code>路由对象</code></li><li><code>from: Route</code>: 当前导航正要离开的路由</li><li><code>next: Function</code>: 一定要调用该方法来 <code>resolve</code> 这个钩子,执行效果依赖 <code>next</code> 方法的调用参数</li><li><code>next()</code>: 进行管道中的下一个钩子,如果全部钩子执行完了 , 则导航的状态就是 <code>confirmed</code> (确认的)<ul><li><code>next(false)</code>: 中断当前的导航,如果浏览器的 <code>URL</code> 改变了 (可能是用户手动或者浏览器后退按钮) , 那么 <code>URL</code> 地址会重置到 <code>from</code> 路由对应的地址</li><li><code>next(&#39;/&#39;)</code> 或者 <code>next(&#123; path: &#39;/&#39; &#125;)</code>: 跳转到一个不同的地址,当前的导航被中断 , 然后进行一个新的导航,你可以向 <code>next</code> 传递任意位置对象 , 且允许设置诸如 <code>replace: true</code>、<code>name: &#39;home&#39;</code> 之类的选项以及任何用在 <code>router-link</code> 的 <code>to</code> <code>prop</code> 或 <code>router.push</code> 中的选项</li><li><code>next(error)</code>: <code>(2.4.0+)</code> 如果传入 <code>next</code> 的参数是一个 <code>Error</code> 实例 , 则导航会被终止且该错误会被传递给 <code>router.onError()</code> 注册过的回调</li></ul></li></ul><p><strong>确保 <code>next</code> 函数在任何给定的导航守卫中都被严格调用一次 , 它可以出现多于一次 , 但是只能在所有的逻辑路径都不重叠的情况下，否则钩子永远都不会被解析或报错</strong> , 这里用一个在用户未能验证身份时重定向到 <code>/login</code> 的示例</p><p><strong>错误示范</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误示范</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.name !== <span class="string">&quot;Login&quot;</span> &amp;&amp; !isAuthenticated) next(&#123; <span class="attr">name</span>: <span class="string">&quot;Login&quot;</span> &#125;);</span><br><span class="line">  <span class="comment">// 如果用户未能验证身份,则 next 会被调用两次,这是不对的</span></span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>正确示范</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确示范</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.name !== <span class="string">&quot;Login&quot;</span> &amp;&amp; !isAuthenticated) &#123;</span><br><span class="line">    next(&#123; <span class="attr">name</span>: <span class="string">&quot;Login&quot;</span> &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="路由独享的守卫"><a href="#路由独享的守卫" class="headerlink" title="路由独享的守卫"></a>路由独享的守卫</h1><p>你可以在路由配置上直接定义 <code>beforeEnter</code> 守卫 :<br>这些守卫与全局前置守卫的方法参数是一样的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/foo&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: Foo,</span><br><span class="line">      <span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;全局前置守卫&quot;&gt;&lt;a href=&quot;#全局前置守卫&quot; class=&quot;headerlink&quot; title=&quot;全局前置守卫&quot;&gt;&lt;/a&gt;全局前置守卫&lt;/h1&gt;&lt;p&gt;你可以使用 &lt;code&gt;router.beforeEach&lt;/code&gt; 注册一个全局前置守卫&lt;/p&gt;
&lt;f</summary>
      
    
    
    
    <category term="Vue" scheme="https://codehhr.cn/categories/Vue/"/>
    
    <category term="Vue 基础" scheme="https://codehhr.cn/categories/Vue/Vue-%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Vue" scheme="https://codehhr.cn/tags/Vue/"/>
    
    <category term="Vue-router" scheme="https://codehhr.cn/tags/Vue-router/"/>
    
    <category term="beforeEach" scheme="https://codehhr.cn/tags/beforeEach/"/>
    
  </entry>
  
</feed>
