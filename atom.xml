<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Saturday_</title>
  
  
  <link href="https://codehhr.cn/atom.xml" rel="self"/>
  
  <link href="https://codehhr.cn/"/>
  <updated>2021-07-21T15:54:39.042Z</updated>
  <id>https://codehhr.cn/</id>
  
  <author>
    <name>HHR</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Axios 的使用</title>
    <link href="https://codehhr.cn/2021/07/21/vue/vue-axios/"/>
    <id>https://codehhr.cn/2021/07/21/vue/vue-axios/</id>
    <published>2021-07-21T14:28:53.000Z</published>
    <updated>2021-07-21T15:54:39.042Z</updated>
    
    <content type="html"><![CDATA[<h1 id="主要是-GET-和-POST-请求"><a href="#主要是-GET-和-POST-请求" class="headerlink" title="主要是 GET 和 POST 请求"></a>主要是 GET 和 POST 请求</h1><div class="tabs" id="axios"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#axios-1">GET 请求</button></li><li class="tab"><button type="button" data-href="#axios-2">POST 请求</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="axios-1"><h1 id="GET-请求"><a href="#GET-请求" class="headerlink" title="GET 请求"></a>GET 请求</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">axios</span><br><span class="line">  .get(<span class="string">&quot;/img?number=4&quot;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">axios</span><br><span class="line">  .get(<span class="string">&quot;/img&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      <span class="attr">number</span>: <span class="number">4</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&quot;https://img&quot;</span>,</span><br><span class="line">  <span class="comment">// get 请求参数</span></span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;zs&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="axios-2"><h1 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a>POST 请求</h1><p>传参方式大致用的有 <code>3</code> 种</p><h2 id="①-Content-Type-multipart-form-data"><a href="#①-Content-Type-multipart-form-data" class="headerlink" title="① Content-Type = multipart/form-data"></a>① Content-Type = multipart/form-data</h2><p>传参格式为 <code>formData</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">formData.append(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;free&quot;</span>);</span><br><span class="line">formData.append(<span class="string">&quot;pageNum&quot;</span>, <span class="number">1</span>);</span><br><span class="line">formData.append(<span class="string">&quot;pageSize&quot;</span>, <span class="number">10</span>);</span><br><span class="line">axios</span><br><span class="line">  .post(<span class="string">&quot;/course&quot;</span>, formData)</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h2 id="②-Content-Type-application-x-www-form-urlencoded"><a href="#②-Content-Type-application-x-www-form-urlencoded" class="headerlink" title="② Content-Type= application/x-www-form-urlencoded"></a>② Content-Type= application/x-www-form-urlencoded</h2><p>传参格式为 <code>query</code> 形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">axios</span><br><span class="line">  .post(</span><br><span class="line">    <span class="string">&quot;/course&quot;</span>,</span><br><span class="line">    <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;free&quot;</span>,</span><br><span class="line">      <span class="attr">pageNum</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">pageSize</span>: <span class="number">10</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;res=&gt;&quot;</span>, res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h2 id="③-Content-Type-application-json"><a href="#③-Content-Type-application-json" class="headerlink" title="③ Content-Type= application/json"></a>③ Content-Type= application/json</h2><p>传参格式为 <code>raw</code> ( <code>JSON</code> 格式)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">axios</span><br><span class="line">  .post(<span class="string">&quot;/course&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;free&quot;</span>,</span><br><span class="line">    <span class="attr">pageNum</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">pageSize</span>: <span class="number">10</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">axios</span><br><span class="line">  .post(</span><br><span class="line">    <span class="string">&quot;/course&quot;</span>,</span><br><span class="line">    <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;free&quot;</span>,</span><br><span class="line">      <span class="attr">pageNum</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">pageSize</span>: <span class="number">10</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;主要是-GET-和-POST-请求&quot;&gt;&lt;a href=&quot;#主要是-GET-和-POST-请求&quot; class=&quot;headerlink&quot; title=&quot;主要是 GET 和 POST 请求&quot;&gt;&lt;/a&gt;主要是 GET 和 POST 请求&lt;/h1&gt;&lt;div class=&quot;t</summary>
      
    
    
    
    <category term="Vue" scheme="https://codehhr.cn/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://codehhr.cn/tags/Vue/"/>
    
    <category term="Vue基础" scheme="https://codehhr.cn/tags/Vue%E5%9F%BA%E7%A1%80/"/>
    
    <category term="axios" scheme="https://codehhr.cn/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>Vue 生命周期 和 Vue-resource</title>
    <link href="https://codehhr.cn/2021/07/21/vue/vue-lifecycle-and-vue-resource/"/>
    <id>https://codehhr.cn/2021/07/21/vue/vue-lifecycle-and-vue-resource/</id>
    <published>2021-07-21T06:50:30.000Z</published>
    <updated>2021-07-21T14:28:23.354Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是生命周期"><a href="#什么是生命周期" class="headerlink" title="什么是生命周期"></a>什么是生命周期</h1><p>从 <code>Vue</code> 实例创建 , 运行 , 到销毁期间 , 总是伴随着各种各样的事件 , 这些事件 , 统称为生命周期 !</p><h1 id="vue-生命周期钩子函数"><a href="#vue-生命周期钩子函数" class="headerlink" title="vue 生命周期钩子函数"></a>vue 生命周期钩子函数</h1><p>每个 <code>Vue</code> 实例在被创建时都要经过一系列的初始化过程——例如 , 需要设置数据监听 , 编译模板 , 将实例挂载到 <code>DOM</code> 并在数据变化时更新 <code>DOM</code> 等 , 同时在这个过程中也会运行一些叫做生命周期钩子的函数 , 这给了用户在不同阶段添加自己的代码的机会</p><p><strong><code>生命周期函数</code>=<code>生命周期事件</code>=<code>生命周期钩子</code></strong></p><h1 id="vue-生命周期"><a href="#vue-生命周期" class="headerlink" title="vue 生命周期"></a>vue 生命周期</h1><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vuebasic/vuelifecycle.png" alt="vue 生命周期"></p><p><strong>详解</strong></p><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vuebasic/vuelifecycledetail.png" alt="vue 生命周期"></p><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>Vue生命周期函数</span></div>    <div class="hide-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入 Vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">msg</span>: <span class="string">&quot;Hello World&quot;</span>,</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 这是我们遇到的第一个生命周期函数</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 在 beforeCrate 生命周期函数执行的时候, data 和 methods 中的数据还没初始化</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;beforeCreate&quot;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.msg); <span class="comment">// -&gt; undefined</span></span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 此时 data 和 methods 中的数据已经好了始化</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 如果要调用 methods 中的方法或操作 data 里的数据,最早只能在 created 中操作</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;created&quot;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.msg); <span class="comment">// -&gt; Hello World</span></span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">beforeMount</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 此时模板已在内存中编译好了,还未渲染到页面上,页面还是旧的</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;beforeMount&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 执行完 mounted ,就表示这个 Vue 示例已经初始化完毕了</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 如果要通过某些插件操作页面上的 DOM 节点,最早要在 mounted 中进行</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;mounted&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">beforeUpdate</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 当 data 里的数据改变后会执行 beforeUpdate</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 此时页面显示的数据还是旧的, data 里的数据是最新的,页面尚未和数据保持同步</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;beforeUpdate&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// beforeUpdate 执行后,在内存里会渲染出一份最新的 内存 DOM 树,会重新渲染到真是的页面上去</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 这时候,就完成了数据从 data(model层) -&gt; view(视图层) 的更新</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">updated</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// updated 执行的时候,页面和 data 数据已经保持同步了,都是最新的</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;updated&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">beforeDestroy</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 准备销毁实例</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 此时还没有真正的执行销毁,还处于可用的状态</span></span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">destroyed</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 当执行到 destroyed函数的时候,组件已经被完全销毁了,data,methods,指令,过滤器...已经不可用了</span></span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><h1 id="vue-resource-的使用"><a href="#vue-resource-的使用" class="headerlink" title="vue-resource 的使用"></a>vue-resource 的使用</h1><ul><li>直接在页面中 , 通过 <code>script</code> 标签 , 引入 <code>vue-resource</code> 的脚本文件 ;</li><li>注意：引用的先后顺序是: 先引用 <code>Vue</code> 的脚本文件 , 再引用 <code>vue-resource</code> 的脚本文件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入 vue.js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入 vue-resource.js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue-resource/1.5.3/vue-resource.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>如果想在页面加载的时候就请求,可以写在 <code>update</code> 生命周期函数里</strong></p><h2 id="get-请求"><a href="#get-请求" class="headerlink" title="get 请求"></a>get 请求</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get 请求</span></span><br><span class="line"><span class="built_in">this</span>.$http</span><br><span class="line">  .get(<span class="string">&quot;http://wkt.myhope365.com/weChat/applet/course/banner/list?number=2&quot;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h2 id="post-请求"><a href="#post-请求" class="headerlink" title="post 请求"></a>post 请求</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// post请求</span></span><br><span class="line"><span class="comment">// post 方法接收三个参数：</span></span><br><span class="line"><span class="comment">//    参数1： 要请求的 URL 地址</span></span><br><span class="line"><span class="comment">//    参数2： 要发送的数据对象</span></span><br><span class="line"><span class="comment">//    参数3： 指定 post 提交的编码类型为 application/x-www-form-urlencoded 或 application/json</span></span><br><span class="line"><span class="built_in">this</span>.$http</span><br><span class="line">  .post(</span><br><span class="line">    <span class="string">&quot;http://wkt.myhope365.com/weChat/applet/subject/list&quot;</span>,</span><br><span class="line">    &#123; <span class="attr">enable</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">emulateJSON</span>: <span class="literal">false</span> &#125;</span><br><span class="line">  )</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是生命周期&quot;&gt;&lt;a href=&quot;#什么是生命周期&quot; class=&quot;headerlink&quot; title=&quot;什么是生命周期&quot;&gt;&lt;/a&gt;什么是生命周期&lt;/h1&gt;&lt;p&gt;从 &lt;code&gt;Vue&lt;/code&gt; 实例创建 , 运行 , 到销毁期间 , 总是伴随着各种各样的事</summary>
      
    
    
    
    <category term="Vue" scheme="https://codehhr.cn/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://codehhr.cn/tags/Vue/"/>
    
    <category term="Vue基础" scheme="https://codehhr.cn/tags/Vue%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Vue 简单的品牌管理案例</title>
    <link href="https://codehhr.cn/2021/07/21/vue/vue-basic-day02/"/>
    <id>https://codehhr.cn/2021/07/21/vue/vue-basic-day02/</id>
    <published>2021-07-21T06:45:50.000Z</published>
    <updated>2021-07-21T15:53:35.262Z</updated>
    
    <content type="html"><![CDATA[<a class="btn-beautify button--animated green larger" href="https://codehhr.github.io/vue-daily/brand-managment.html"   title="在线预览"><i class="far fa-hand-point-right"></i><span>在线预览</span></a><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>Vue 简单的品牌管理案例</span></div>    <div class="hide-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.4.1/css/bootstrap.css&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin</span>: <span class="number">60px</span> auto;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.form-group</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">th</span>,</span></span><br><span class="line"><span class="css">  <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">    <span class="attribute">line-height</span>: <span class="number">50px</span> <span class="meta">!important</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-info&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;panel-title&quot;</span>&gt;</span>品牌管理<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-inline&quot;</span> <span class="attr">role</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;search&quot;</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">              <span class="attr">id</span>=<span class="string">&quot;search&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">placeholder</span>=<span class="string">&quot;请输入品牌关键字&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">v-model:value</span>=<span class="string">&quot;keyword&quot;</span></span></span><br><span class="line"><span class="tag">              @<span class="attr">change</span>=<span class="string">&quot;showBrandList&quot;</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>名字<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">              <span class="attr">id</span>=<span class="string">&quot;name&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">placeholder</span>=<span class="string">&quot;请输入品牌名字&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">v-model:value</span>=<span class="string">&quot;name&quot;</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;addBrand&quot;</span>&gt;</span></span><br><span class="line">            添加</span><br><span class="line">          <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-striped table-bordered&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>NAME<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Time<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>OPTION<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in showBrandList()&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;index+1&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.time | timeFilter(&quot;YYYY-MM-DD hh:mm:ss&quot;)&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">type</span>=<span class="string">&quot;button&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">class</span>=<span class="string">&quot;btn btn-danger&quot;</span></span></span><br><span class="line"><span class="tag">                @<span class="attr">click</span>=<span class="string">&quot;delBrand(index)&quot;</span></span></span><br><span class="line"><span class="tag">              &gt;</span></span><br><span class="line">                删除</span><br><span class="line">              <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">name</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">keyword</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">brandList</span>: <span class="built_in">JSON</span>.parse(<span class="built_in">localStorage</span>.getItem(<span class="string">&quot;brandList&quot;</span>)) || [</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">name</span>: <span class="string">&quot;迈凯轮&quot;</span>, <span class="attr">time</span>: <span class="keyword">new</span> <span class="built_in">Date</span>() &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">name</span>: <span class="string">&quot;科尼赛格&quot;</span>, <span class="attr">time</span>: <span class="keyword">new</span> <span class="built_in">Date</span>() &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">name</span>: <span class="string">&quot;兰博基尼&quot;</span>, <span class="attr">time</span>: <span class="keyword">new</span> <span class="built_in">Date</span>() &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">name</span>: <span class="string">&quot;BMW&quot;</span>, <span class="attr">time</span>: <span class="keyword">new</span> <span class="built_in">Date</span>() &#125;,</span></span><br><span class="line"><span class="javascript">      ],</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;&#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 显示</span></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">showBrandList</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// this.brandList = localStorage.getItem(&quot;brandList&quot;);</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">this</span>.brandList.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> item.name.includes(<span class="built_in">this</span>.keyword);</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 添加</span></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">addBrand</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="built_in">this</span>.name) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.brandList.push(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>: <span class="built_in">this</span>.name,</span></span><br><span class="line"><span class="javascript">            <span class="attr">time</span>: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span></span><br><span class="line"><span class="javascript">          &#125;);</span></span><br><span class="line"><span class="javascript">          <span class="built_in">localStorage</span>.setItem(<span class="string">&quot;brandList&quot;</span>, <span class="built_in">JSON</span>.stringify(<span class="built_in">this</span>.brandList));</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.name = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          alert(<span class="string">&quot;空&quot;</span>);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 删除</span></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">delBrand</span>(<span class="params">index</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.brandList.splice(index, <span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">localStorage</span>.setItem(<span class="string">&quot;brandList&quot;</span>, <span class="built_in">JSON</span>.stringify(<span class="built_in">this</span>.brandList));</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">filters</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//定义过滤器 , 格式化时间</span></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">timeFilter</span>(<span class="params">nothing, dateFormat</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> dateFormat</span></span><br><span class="line"><span class="javascript">          .replace(<span class="string">&quot;YYYY&quot;</span>, date.getFullYear())</span></span><br><span class="line"><span class="javascript">          .replace(<span class="string">&quot;MM&quot;</span>, (date.getMonth() + <span class="number">1</span>).toString().padStart(<span class="number">2</span>, <span class="string">&quot;0&quot;</span>))</span></span><br><span class="line"><span class="javascript">          .replace(<span class="string">&quot;DD&quot;</span>, date.getDate().toString().padStart(<span class="number">2</span>, <span class="string">&quot;0&quot;</span>))</span></span><br><span class="line"><span class="javascript">          .replace(<span class="string">&quot;hh&quot;</span>, date.getHours().toString().padStart(<span class="number">2</span>, <span class="string">&quot;0&quot;</span>))</span></span><br><span class="line"><span class="javascript">          .replace(<span class="string">&quot;mm&quot;</span>, date.getMinutes().toString().padStart(<span class="number">2</span>, <span class="string">&quot;0&quot;</span>))</span></span><br><span class="line"><span class="javascript">          .replace(<span class="string">&quot;ss&quot;</span>, date.getSeconds().toString().padStart(<span class="number">2</span>, <span class="string">&quot;0&quot;</span>));</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;a class=&quot;btn-beautify button--animated green larger&quot; href=&quot;https://codehhr.github.io/vue-daily/brand-managment.html&quot; 
  title=&quot;在线预览&quot;&gt;&lt;i cla</summary>
      
    
    
    
    <category term="Vue" scheme="https://codehhr.cn/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://codehhr.cn/tags/Vue/"/>
    
    <category term="Vue基础" scheme="https://codehhr.cn/tags/Vue%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Vue 基础 ( 一 )</title>
    <link href="https://codehhr.cn/2021/07/19/vue/vue-basic-day01/"/>
    <id>https://codehhr.cn/2021/07/19/vue/vue-basic-day01/</id>
    <published>2021-07-19T13:39:18.000Z</published>
    <updated>2021-07-21T06:53:22.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h1><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vuebasic/vueall.png" alt="vue.js"></p><h1 id="什么是-vue-js"><a href="#什么是-vue-js" class="headerlink" title="什么是 vue.js"></a>什么是 <code>vue.js</code></h1><ul><li><code>Vue.js</code> 是一套<code>构建用户界面</code>的<code>渐进式</code> <code>框架</code> , 与其他重量级框架不同的是 , <code>Vue</code> 采用自底向上增量开发的设计 , <code>Vue</code> 的核心库只关注视图层 , 不仅易于上手 , 还便于与第三方库或既有项目整合 ,</li><li><code>Vue.js</code> 是前端的主流框架之一 , 和 <code>Angular.js</code>、<code>React.js</code> 一起 , 并成为前端三大主流框架！</li></ul><h2 id="为什么学习流行框架"><a href="#为什么学习流行框架" class="headerlink" title="为什么学习流行框架"></a>为什么学习流行框架</h2><ul><li>企业为了提高开发效率 : 在企业 <code>4E2D</code> , 时间就是效率 , 效率就是金钱 ;</li><li>企业中 , 使用框架 , 能够提高开发的效率 ;</li><li>提高开发效率的发展历程 : 原生 <code>JS</code> -&gt; <code>Jquery</code> 之类的类库 -&gt; 前端模板引擎 -&gt; <code>Angular.js</code> / <code>Vue.js</code></li><li>能够帮助我们减少不必要的 DOM 操作 ;提高渲染效率 ;双向数据绑定的概念【通过框架提供的指令 , 我们前端程序员只需要关心数据的业务逻辑 , 不再关心 <code>DOM</code> 是如何渲染的了】</li><li>在 <code>Vue</code> 中 , 一个核心的概念 , 就是让用户不再操作 <code>DOM</code> 元素 , 解放了用户的双手 , 让程序员可以更多的时间去关注业务逻辑 ;</li></ul><h2 id="框架和库的区别"><a href="#框架和库的区别" class="headerlink" title="框架和库的区别"></a>框架和库的区别</h2><ul><li>框架 : 是一套完整的解决方案 , 对项目的侵入性较大 , 项目如果需要更换框架 , 则需要重新架构整个项目<ul><li>例如 : <code>node</code> 中的 <code>express</code></li></ul></li><li>库 ( 插件 ) : 提供某一个小功能 , 对项目的侵入性较小 , 如果某个库无法完成某些需求 , 可以很容易切换到其它库实现需求<ul><li>例如 : 从 <code>Jquery</code> 切换到 <code>Zepto</code></li><li>例如 : 从 <code>EJS</code> 切换到 <code>art-template</code></li></ul></li></ul><h2 id="MVC-与-MVVM-的区别"><a href="#MVC-与-MVVM-的区别" class="headerlink" title="MVC 与 MVVM 的区别"></a>MVC 与 MVVM 的区别</h2><ul><li><code>MVC</code> 是后端的分层开发概念 ;</li><li><code>MVVM</code> 是前端视图层的概念 , 主要关注于视图层分离 , 也就是说 : <code>MVVM</code> 把前端的视图层 , 分为了三部分 <code>Model</code>、<code>View</code>、<code>VM ViewModel</code> ;</li></ul><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vuebasic/MVVM.png" alt="vue.js"></p><h1 id="开始写-Vue-js-代码"><a href="#开始写-Vue-js-代码" class="headerlink" title="开始写 Vue.js 代码"></a>开始写 Vue.js 代码</h1><h2 id="引入-vue-js"><a href="#引入-vue-js" class="headerlink" title="引入 vue.js"></a>引入 vue.js</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="写视图层-要展示的内容"><a href="#写视图层-要展示的内容" class="headerlink" title="写视图层 , 要展示的内容"></a>写视图层 , 要展示的内容</h2><p><code>Vue.js</code> 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 <code>DOM</code> 的系统 :</p><p><strong>示例</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 插值表达式 , 可以读取变量 --&gt;</span></span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="实例化-Vue"><a href="#实例化-Vue" class="headerlink" title="实例化 Vue()"></a>实例化 Vue()</h2><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>实例化 Vue()</span></div>    <div class="hide-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入 vue.js , 引入 js 之后他为我们提供了 Vue 类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 调度层</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// vue 控制的区域</span></span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// data 参数存放我们的数据 , 这一层就是 mvvm 里的 model 层</span></span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">message</span>: <span class="string">&quot;Hello Vue!&quot;</span>,</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><p>页面展示内容:</p><div class="note simple"><p>Hello Vue!</p></div><p><strong>注意 : 都是通过 <code>this</code> 对象去拿的 , 通过 <code>this</code> 也可以调用方法 , 写方法的时候我们需要注意 <code>this</code> 的指向问题</strong></p><h1 id="插值表达式-v-cloak-v-text-v-html"><a href="#插值表达式-v-cloak-v-text-v-html" class="headerlink" title="插值表达式 , v-cloak , v-text , v-html"></a>插值表达式 , v-cloak , v-text , v-html</h1><ul><li>如何获取变量值呢?<ul><li>插值表达式 : <code>&#123;&#123; &#125;&#125;</code> , 可以在前后插一些内容;</li><li><code>v-text</code> : 会替换掉元素里的内容;</li><li><code>v-html</code> : 可以渲染 <code>html</code> 界面;</li></ul></li></ul><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>插值表达式&sbquo;v-cloak&sbquo;v-text&sbquo;v-html</span></div>    <div class="hide-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入vue的js , 引入js之后他为我们提供了Vue类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 视图层 start --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 在 vue 加载之前 v-cloak 存在 , vue 加载结束之后 v-cloak就隐藏了 , 利用这个特性可以实现 : 界面防止闪烁</span></span><br><span class="line"><span class="comment">  如果网速够快的话也就看不出来了 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-cloak</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 使用 v-text 给界面元素赋值 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 如果我们想在变量之前或者后面加一些内容的话使用 插值表达式 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 如果我们想直接覆盖元素内容的话使用 v-text 指令 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;html&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 通过 v-html 指令把字符串解析成 html 的内容 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;html&quot;</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 视图层 end --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 调度层 start</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// vue 控制的区域</span></span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// data 参数存放我们的数据 , 这一层就是 mvvm 里的 model 层</span></span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">message</span>: <span class="string">&quot;Hello Vue!&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">html</span>: <span class="string">&quot;&lt;h1&gt;这是一个很大的标题&lt;/h1&gt;&quot;</span>,</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 调度层 end</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><h1 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h1><ul><li>界面元素属性值的绑定<ul><li>括号里不加引号的都是 <code>data</code> 里的数据读取</li><li>如果想使用字符串需要再加上引号 ( <code>&#123;&#123;"hello World"&#125;&#125;</code> )</li><li>里面可以写表达式</li><li>里面也可以调用定义好的方法 , 拿到的是方法的返回值</li></ul></li></ul><p><strong>示例</strong></p><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>v-bind</span></div>    <div class="hide-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入 vue 的js , 引入 js 之后他为我们提供了 Vue 类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 视图层 start --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 插值表达式 , 可以读取变量 --&gt;</span></span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line">  <span class="comment">&lt;!-- &lt;button v-bind:title=&quot;nihao&quot;&gt;按钮&lt;/button&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">:title</span>=<span class="string">&quot;hello&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;message&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 视图层 end --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 调度层 start</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// vue 控制的区域</span></span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// data 参数存放我们的数据 , 这一层就是 mvvm 里的 model 层</span></span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">message</span>: <span class="string">&quot;Hello Vue!&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">flag</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">hello</span>: <span class="string">&quot;你好世界&quot;</span>,</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 调度层 end</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><h1 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h1><ul><li>进行事件的绑定 , 我们用的最多的是 <code>click</code> 事件绑定</li><li>简写为 <code>@</code></li><li>实现跑马灯的效果</li></ul><p><strong>示例</strong></p><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>v-on</span></div>    <div class="hide-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入 vue 的js , 引入 js 之后他为我们提供了 Vue 类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 跑马灯 start --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;start&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;disabled&quot;</span>&gt;</span>开始<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;stop&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;!disabled&quot;</span>&gt;</span>暂停<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 跑马灯 end --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">msg</span>: <span class="string">&quot;猥琐发育,别浪~&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">disabled</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">lampTimer</span>: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">start</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;start&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.disabled = !<span class="built_in">this</span>.disabled;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">clearInterval</span>(<span class="built_in">this</span>.lampTimer);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> msgList;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.lampTimer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          msgList = <span class="built_in">this</span>.msg.split(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="javascript">          msgList.push(msgList.shift());</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.msg = msgList.join(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="javascript">        &#125;, <span class="number">200</span>);</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">stop</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;stop&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.disabled = !<span class="built_in">this</span>.disabled;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">clearInterval</span>(<span class="built_in">this</span>.lampTimer);</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><h1 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h1><ul><li><code>.stop</code> 阻止冒泡</li><li><code>.prevent</code> 阻止默认事件</li><li><code>.capture</code> 添加事件侦听器时使用事件捕获模式</li><li><code>.self</code> 只当事件在该元素本身 ( 比如不是子元素 ) 触发时触发回调</li><li><code>.once</code> 事件只触发一次</li></ul><p><strong>示例</strong></p><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>事件修饰符</span></div>    <div class="hide-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入 vue 的js , 引入 js 之后他为我们提供了 Vue 类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span> @<span class="attr">click.capture</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span> @<span class="attr">click.stop</span>=<span class="string">&quot;inner&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;self&quot;</span> @<span class="attr">click.self</span>=<span class="string">&quot;self&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;button&quot;</span>&gt;</span>button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://codehhr.cn&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;clickA&quot;</span>&gt;</span>a-link-tag<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">outer</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;outer&quot;</span>);</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">inner</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;inner&quot;</span>);</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">self</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;self&quot;</span>);</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">button</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;button&quot;</span>);</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">clickA</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;a-link-tag&quot;</span>);</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><h1 id="v-model-数据双向绑定"><a href="#v-model-数据双向绑定" class="headerlink" title="v-model 数据双向绑定"></a>v-model 数据双向绑定</h1><ul><li>作用 : 数据双向绑定</li><li>注意 : 绑定的是表单控件</li></ul><p><strong>示例</strong></p><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>v-model 数据双向绑定</span></div>    <div class="hide-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- vue.js start --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- vue.js end --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">v-model:value</span>=<span class="string">&quot;msg&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">msg</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><h1 id="Vue-中样式的使用"><a href="#Vue-中样式的使用" class="headerlink" title="Vue 中样式的使用"></a>Vue 中样式的使用</h1><h2 id="使用-class-样式"><a href="#使用-class-样式" class="headerlink" title="使用 class 样式 :"></a>使用 class 样式 :</h2><div class="tabs" id="class"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#class-1">数组</button></li><li class="tab"><button type="button" data-href="#class-2">三木表达式</button></li><li class="tab"><button type="button" data-href="#class-3">数组内置对象</button></li><li class="tab"><button type="button" data-href="#class-4">直接通过对象</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="class-1"><p>使用 <code>vue</code> 设置多个样式的时候可以使用数组</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;[font20,blue]&quot;</span>&gt;</span>Text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  font20: <span class="string">&quot;font20&quot;</span>,</span><br><span class="line">  blue: <span class="string">&quot;blue&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="class-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;flag?&#x27;class1&#x27;:&#x27;class2&#x27;&quot;</span>&gt;</span>Text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  flag: <span class="literal">true</span>,</span><br><span class="line">  class1: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">  class1: <span class="string">&quot;blue&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="class-3"><p>当我们根据某个条件显示某个样式的时候可以使用对象的方式 , 对象里的键就是我们显示的样式 , 值是个 <code>bool</code> 类型</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;[class1,&#123;&#x27;class2&#x27;:flag&#125;]&quot;</span>&gt;</span>Text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  flag: <span class="literal">true</span>,</span><br><span class="line">  class1: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">  class1: <span class="string">&quot;blue&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="class-4"><p>直接使用对象 , 对象里的键就是我们显示的样式 , 值是个 <code>bool</code> 类型</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;&#x27;class1&#x27;:false,&#x27;class2&#x27;:true&#125;&quot;</span>&gt;</span>Text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;classObj&quot;</span>&gt;</span>Text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  classObj: &#123;</span><br><span class="line">    class1: <span class="literal">true</span>,</span><br><span class="line">    class2: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="使用行内样式"><a href="#使用行内样式" class="headerlink" title="使用行内样式"></a>使用行内样式</h2><div class="tabs" id="style"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#style-1">:style 的形式</button></li><li class="tab"><button type="button" data-href="#style-2">在data中定义样式对象</button></li><li class="tab"><button type="button" data-href="#style-3">数组引用多个样式对象</button></li><li class="tab"><button type="button" data-href="#style-4">通过调用方法返回对象</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="style-1"><p>直接在元素上通过 <code>:style</code> 的形式 , 书写样式对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;&#x27;color&#x27;:color&#125;&quot;</span>&gt;</span>Text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  color: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="style-2"><ul><li>在 <code>data</code> 上定义样式</li><li>在元素中 , 通过属性绑定的形式 , 将样式对象应用到元素中</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;textStyle&quot;</span>&gt;</span>Text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  textStyle: &#123;</span><br><span class="line">    color: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;font-size&quot;</span>: <span class="string">&quot;50px&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="style-3"><p>在 <code>:style</code> 中通过数组 , 引用多个 <code>data</code> 上的样式对象</p><ul><li>在 <code>data</code> 上定义样式</li><li>在元素中 , 通过属性绑定的形式 , 将样式对象应用到元素中</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;[textStyle1,textStyle2]&quot;</span>&gt;</span>Text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  textStyle1: &#123;</span><br><span class="line">    color: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;font-size&quot;</span>: <span class="string">&quot;50px&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">   textStyle2: &#123;</span><br><span class="line">    <span class="attr">&quot;font-weight&quot;</span>: <span class="string">&quot;600&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="style-4"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  <span class="function"><span class="title">getStyle</span>(<span class="params">num</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;</span><br><span class="line">      <span class="attr">color</span>: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">      <span class="string">&quot;font-size&quot;</span>: <span class="string">&quot;50px&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (num == <span class="number">1</span>) &#123;</span><br><span class="line">      obj.color = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      obj.color = <span class="string">&quot;green&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="V-for-和-key-属性"><a href="#V-for-和-key-属性" class="headerlink" title="V-for 和 key 属性"></a>V-for 和 key 属性</h1><ul><li>遍历数组 , 参数 <code>(item,index) in list</code></li><li>遍历对象 , 参数 <code>(value,key,index) in list</code></li><li>遍历数字 , <code>num in 10 (1~10)</code></li><li><code>key</code> 在使用 <code>v-for</code> 的时候都需要去设置 <code>key</code><ul><li>让界面元素和数组里的每个记录进行绑定</li><li><code>key</code> 只能是字符串或者数字</li><li><code>key</code> 必须是唯一的</li></ul></li></ul><p><strong>示例</strong></p><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>V-for和key</span></div>    <div class="hide-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入 vue 的js , 引入 js 之后他为我们提供了 Vue 类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,key,index) in zhangsan&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;index&#125;&#125; - &#123;&#123;key&#125;&#125; : &#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;index&#125;&#125; : &#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item in 6&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>🦌<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">list</span>: [<span class="string">&quot;github&quot;</span>, <span class="string">&quot;gitee&quot;</span>, <span class="string">&quot;coding&quot;</span>, <span class="string">&quot;gitlab&quot;</span>],</span></span><br><span class="line"><span class="javascript">      <span class="attr">zhangsan</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">age</span>: <span class="number">35</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">nickName</span>: <span class="string">&quot;法外狂徒&quot;</span>,</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><p><strong>注意:</strong><br><code>2.2.0+</code> 的版本里 , 当在组件中使用 <code>v-for</code> 时 , <code>key</code> 现在是必须的;<br>当 <code>Vue.js</code> 用 <code>v-for</code> 正在更新已渲染过的元素列表时 , 它默认用 “就地复用” 策略 , 如果数据项的顺序被改变 , <code>Vue</code> 将不是移动 <code>DOM</code> 元素来匹配数据项的顺序 , 而是简单复用此处每个元素 , 并且确保它在特定索引下显示已被渲染过的每个元素<br>为了给 <code>Vue</code> 一个提示 , 以便它能跟踪每个节点的身份 , 从而重用和重新排序现有元素 , 你需要为每项提供一个唯一 <code>key</code> 属性。</p><h1 id="v-if-与-v-show-区别"><a href="#v-if-与-v-show-区别" class="headerlink" title="v-if 与 v-show 区别"></a>v-if 与 v-show 区别</h1><ul><li>区别：<ul><li><code>v-if</code> 删除 <code>dom</code> 元素</li><li><code>v-show</code> 设置 <code>display:none</code></li></ul></li><li>应用场景：<ul><li><code>v-if</code> 只修改一次的时候可以使用 <code>v-if</code></li><li><code>v-show</code> 频繁切换的时候可以使用 <code>v-show</code></li></ul></li></ul><p><strong>示例</strong></p><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>v-if与v-show 区别</span></div>    <div class="hide-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入 vue 的js , 引入 js 之后他为我们提供了 Vue 类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;flag&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;age&gt;18?flag:!flag&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>未成年<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;flag&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>show<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;!flag&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>show<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">flag</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">age</span>: <span class="number">20</span>,</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue-js&quot;&gt;&lt;a href=&quot;#Vue-js&quot; class=&quot;headerlink&quot; title=&quot;Vue.js&quot;&gt;&lt;/a&gt;Vue.js&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://codehhr.coding.net/p/codehhr/d/image</summary>
      
    
    
    
    <category term="Vue" scheme="https://codehhr.cn/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://codehhr.cn/tags/Vue/"/>
    
    <category term="Vue基础" scheme="https://codehhr.cn/tags/Vue%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Hexo butterfly 的标签功能</title>
    <link href="https://codehhr.cn/2021/07/18/blog/blog-hexo-butterfly-tag-plugins/"/>
    <id>https://codehhr.cn/2021/07/18/blog/blog-hexo-butterfly-tag-plugins/</id>
    <published>2021-07-18T12:11:24.000Z</published>
    <updated>2021-07-18T15:16:35.687Z</updated>
    
    <content type="html"><![CDATA[<div class="note info flat"><p>标签外挂是 <code>Hexo</code> 独有的功能 , 并不是标准的 <code>Markdown</code> 格式<br>以下的写法 , 只适用于 <code>Butterfly</code> 主题 , 用在其它主题上不会有效果 , 甚至可能会报错 , 使用前请留意<br>外挂虽然能为主题带来一些额外的功能和 <code>UI</code> 方面的强化，但是，标籤外挂也有明显的限制，使用时请留意</p></div><h1 id="未完待续-…"><a href="#未完待续-…" class="headerlink" title="未完待续 …"></a>未完待续 …</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info flat&quot;&gt;&lt;p&gt;标签外挂是 &lt;code&gt;Hexo&lt;/code&gt; 独有的功能 , 并不是标准的 &lt;code&gt;Markdown&lt;/code&gt; 格式&lt;br&gt;以下的写法 , 只适用于 &lt;code&gt;Butterfly&lt;/code&gt; 主题 , 用</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>node 连接 MySQL</title>
    <link href="https://codehhr.cn/2021/07/16/node/node-mysql/"/>
    <id>https://codehhr.cn/2021/07/16/node/node-mysql/</id>
    <published>2021-07-16T03:46:10.000Z</published>
    <updated>2021-07-21T15:58:16.222Z</updated>
    
    <content type="html"><![CDATA[<a class="btn-beautify button--animated green larger" href="https://github.com/codehhr/Message-board/"   title="留言版案例"><i class="far fa-hand-point-right"></i><span>留言版案例</span></a><h1 id="安装-mysql-驱动"><a href="#安装-mysql-驱动" class="headerlink" title="安装 mysql 驱动"></a>安装 mysql 驱动</h1><p>可以用淘宝镜像的 <code>cnpm</code> 安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mysql --save</span><br></pre></td></tr></table></figure><h1 id="引入-mysql-模块"><a href="#引入-mysql-模块" class="headerlink" title="引入 mysql 模块"></a>引入 mysql 模块</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mysql = <span class="built_in">require</span>(<span class="string">&quot;mysql&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="链接-MySQL"><a href="#链接-MySQL" class="headerlink" title="链接 MySQL"></a>链接 MySQL</h1><p>相应的修改<code>主机名</code> , <code>用户名</code> , <code>密码</code> 和 <code>数据库名</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mysql = <span class="built_in">require</span>(<span class="string">&quot;mysql&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> connection = mysql.createConnection(&#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">  <span class="attr">user</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&quot;12345678&quot;</span>,</span><br><span class="line">  <span class="attr">database</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line">connection.connect();</span><br><span class="line">connection.query(</span><br><span class="line">  <span class="string">&quot;SELECT * from comment_list&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">error, results, fields</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">    <span class="built_in">console</span>.log(results);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="把这几个步骤封装成函数"><a href="#把这几个步骤封装成函数" class="headerlink" title="把这几个步骤封装成函数"></a>把这几个步骤封装成函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    sql: 要执行的 sql 语句</span></span><br><span class="line"><span class="comment">    fun: 拿到数据库返回的 results 后执行的函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">interactingWithDatabase</span>(<span class="params">sql, fun</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> connection = mysql.createConnection(&#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">    <span class="attr">user</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&quot;12345678&quot;</span>,</span><br><span class="line">    <span class="attr">database</span>: <span class="string">&quot;comment_list&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  connection.connect();</span><br><span class="line">  connection.query(sql, <span class="function"><span class="keyword">function</span> (<span class="params">err, results</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fun(results);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  connection.end();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数据库操作-CURD"><a href="#数据库操作-CURD" class="headerlink" title="数据库操作 ( CURD )"></a>数据库操作 ( CURD )</h1><h2 id="sql-语句"><a href="#sql-语句" class="headerlink" title="sql 语句"></a>sql 语句</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">增 : <span class="keyword">insert</span> <span class="keyword">into</span> 表名 ( 字段 , 字段 ) <span class="keyword">values</span> ( 值 , 值 )</span><br><span class="line">删 : <span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件</span><br><span class="line">改 : update 表名 <span class="keyword">set</span> 字段 <span class="operator">=</span> 值 <span class="keyword">where</span> 条件</span><br><span class="line">查 : <span class="keyword">select</span> 字段 <span class="keyword">from</span> 表名 (<span class="keyword">where</span> 条件)</span><br></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">增 : <span class="keyword">INSERT</span> <span class="keyword">INTO</span> comment_list (name , comment) <span class="keyword">VALUES</span> (<span class="string">&#x27;name&#x27;</span> ,<span class="string">&#x27;comment&#x27;</span>)</span><br><span class="line">删 : <span class="keyword">DELETE</span> <span class="keyword">FROM</span> comment_list <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="string">&#x27;userid&#x27;</span></span><br><span class="line">改 : UPDATE comment_list <span class="keyword">SET</span> comment <span class="operator">=</span> &quot;newcomment&quot; <span class="keyword">WHERE</span> id <span class="operator">=</span> &quot;userid&quot;</span><br><span class="line">查 : <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> comment_list <span class="keyword">WHERE</span> comment <span class="keyword">LIKE</span> <span class="string">&#x27;%value%&#x27;</span> <span class="keyword">or</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;%value%&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;a class=&quot;btn-beautify button--animated green larger&quot; href=&quot;https://github.com/codehhr/Message-board/&quot; 
  title=&quot;留言版案例&quot;&gt;&lt;i class=&quot;far fa-han</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Node</title>
    <link href="https://codehhr.cn/2021/07/12/node/node-fs-http/"/>
    <id>https://codehhr.cn/2021/07/12/node/node-fs-http/</id>
    <published>2021-07-12T11:57:44.000Z</published>
    <updated>2021-07-18T09:29:59.938Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h1><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/node/nodeall.png" alt="node"></p><h1 id="Node-js-介绍"><a href="#Node-js-介绍" class="headerlink" title="Node.js 介绍"></a>Node.js 介绍</h1><p><code>Node.js</code> 不是一门语言 , 不是库或者框架 , <code>Node.js</code> 是一个 <code>JavaScript</code> 运行时的环境 , <code>Node.js</code> 可以解析和执行 <code>JavaScript</code> 代码</p><h2 id="浏览器中-JavaScript-由什么组成"><a href="#浏览器中-JavaScript-由什么组成" class="headerlink" title="浏览器中 JavaScript 由什么组成"></a>浏览器中 JavaScript 由什么组成</h2><ul><li><code>EcmaScript</code> : 基本语法 , <code>if</code> , <code>var</code> , <code>function</code> , <code>Object</code> , <code>Array</code></li><li><code>DOM</code></li><li><code>BOM</code></li></ul><h2 id="Node-js-中的-JavaScript"><a href="#Node-js-中的-JavaScript" class="headerlink" title="Node.js 中的 JavaScript"></a>Node.js 中的 JavaScript</h2><ul><li><strong>没有 <code>BOM</code> 和 <code>DOM</code> , 只有 <code>EcmaScript</code></strong></li><li>在 <code>Node.js</code> 这个 <code>JavaScript</code> 执行环境中为 <code>JavaScript</code> 提供了一些服务器级别的操作 <code>API</code> , 例如 : 文件读写 , 网络服务构建 , 网络请求与响应等 , 其实 <code>node</code> 学习相当于在学习后台服务处理开发 , 只不过后台服务编程使用的是 <code>JavaScript</code> 语言而已</li><li><strong>特性 : 事件驱动 , 非阻塞 <code>I/O</code> 模型 ( 简单说就是异步操作 ) , 轻量高效 , 随着学习的深入大家会明白这些特性的</strong></li><li><code>npm</code> 是世界上最大的 <code>Node.js</code> 开源库生态系统 , 用来管理 <code>JavaScript</code> 相关的包 , 这样的目的是为了更方便的让开发人员使用它</li></ul><h3 id="使用-npm-安装相关包的命令-以-jquery-为例-先了解即可"><a href="#使用-npm-安装相关包的命令-以-jquery-为例-先了解即可" class="headerlink" title="使用 npm 安装相关包的命令 ( 以 jquery 为例 , 先了解即可 ) :"></a>使用 <code>npm</code> 安装相关包的命令 ( 以 <code>jquery</code> 为例 , 先了解即可 ) :</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install jquery</span><br></pre></td></tr></table></figure><p><strong>包名后面加 <code>@</code> 可指定版本号</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install jquery@2</span><br></pre></td></tr></table></figure><h2 id="Node-js-能够做什么"><a href="#Node-js-能够做什么" class="headerlink" title="Node.js 能够做什么"></a>Node.js 能够做什么</h2><ul><li><code>Web</code> 服务器后台</li><li>命令行工具 , 例如 : <code>npm</code> , <code>git</code> , <code>webpack</code> 等</li><li>前端工程师接触 <code>node</code> 最多的是命令行工具 , 一般很少自己写 , 主要使用别人写好的第三方包</li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li><code>B/S</code> 编程模型<ul><li><code>Browser - Server</code></li><li><code>back-end</code> ( 后台开发 )</li><li>任何服务端技术这种 <code>BS</code> 编程模型都一样 , 与语言无关</li><li><code>Node</code> 只是我们学习 <code>BS</code> 编程模型的一个工具而已</li></ul></li><li>模块化编程<br><strong>模块化</strong>就是将不同功能的函数封装起来 , 并提供使用接口 , 他们彼此之间互不影响<ul><li><code>RequireJS</code></li><li><code>SeaJs</code></li><li>简单的来说 , 以前在我们 <code>JavaScript</code> 中只能通过<code>&lt;script&gt;</code>标签来引入 <code>js</code> 脚本文件 , 在 <code>node</code> 中可以更多方式来引入加载 <code>JavaScript</code> 脚本</li></ul></li><li><code>Node</code> 常用 <code>API</code></li></ul><h1 id="Node-起步"><a href="#Node-起步" class="headerlink" title="Node 起步"></a>Node 起步</h1><h2 id="安装-Node-环境"><a href="#安装-Node-环境" class="headerlink" title="安装 Node 环境"></a>安装 Node 环境</h2><p>安装依赖 : <code>npm install 依赖名字</code> , <code>install</code> 可简写为 <code>i</code><br>后面加 <code>@</code> 可指定版本号 , 比如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i jquery@2.2</span><br></pre></td></tr></table></figure><p><strong>参数 :</strong></p><ul><li><code>-g</code> 表示全局安装</li><li><code>--save</code> 表示生产环境 , 简写是 <code>-S</code></li><li><code>-dev</code> 是开发环境 , 简写是 <code>-D</code></li></ul><p><strong>国内 npm 比较慢 , 可安装淘宝镜像版的 cnpm</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><ul><li>第一步 : 创建编写 <code>JavaScript</code> 脚本文件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Hello World&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>第二步 : 打开终端 , 定位到脚本文件所属目录</li><li>第三步 : 输入 <code>node 文件名</code> 执行对应的文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node HelloWorld.js</span><br></pre></td></tr></table></figure><h2 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h2><p>浏览器中 <code>JavaScript</code> 是没有文件操作能力的 , 但是 <code>Node</code> 中的 <code>JavaScript</code> 具有文件操作的能力 , <code>Node</code> 中有一个 <code>fs</code> 模块 , <code>fs</code> 是 <code>file-system</code> 的简写 , 就是文件系统的意思 , 在 <code>Node</code> 中如果想要进行文件操作 , 就必须引入 <code>fs</code> 这个核心模块</p><ul><li>引入 <code>fs</code> 核心模块</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>用来读取文件的方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.readFile();</span><br></pre></td></tr></table></figure><ul><li>用来写文件的方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.writeFile();</span><br></pre></td></tr></table></figure><h2 id="http-服务"><a href="#http-服务" class="headerlink" title="http 服务"></a>http 服务</h2><p>服务器是干嘛的 ?</p><ul><li>提供服务：对数据的服务</li><li>发请求</li><li>接收请求</li><li>处理请求</li><li>给个响应</li></ul><p>我们可以使用 <code>Node</code> 非常轻松的构建一个 <code>Web</code> 服务器 , 在 <code>Node</code> 中 , <code>专门有个核心模块：http</code><br>思路 :</p><ul><li>加载 <code>http</code> 核心模块</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 加载 http 核心模块</span></span><br><span class="line"><span class="keyword">let</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>创建一个 <code>Web</code> 服务器</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.使用 http.createServer() 方法创建一个Web服务器 , 返回一个 Server 实例</span></span><br><span class="line"><span class="keyword">let</span> server = http.createServer();</span><br></pre></td></tr></table></figure><ul><li>注册 <code>request</code> 请求事件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3. 注册 request 请求事件</span></span><br><span class="line"><span class="comment">// 还记得刚才说的 node.js 的特性 : 事件驱动么 , 就是这种用法</span></span><br><span class="line"><span class="comment">// 还记得刚才说的 node.js 的特性 : 回调函数么 , 就是第二个参数的用法</span></span><br><span class="line"></span><br><span class="line">server.on(<span class="string">&quot;request&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;收到客户端的请求了啊&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>绑定端口号 , 启动服务器</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4. 绑定端口号 , 启动服务器</span></span><br><span class="line">server.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(</span><br><span class="line">    <span class="string">&quot;服务器启动成功了 , 可以通过浏览器访问http:localhost:3000发请求了&quot;</span></span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Node&quot;&gt;&lt;a href=&quot;#Node&quot; class=&quot;headerlink&quot; title=&quot;Node&quot;&gt;&lt;/a&gt;Node&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://codehhr.coding.net/p/codehhr/d/images/git/ra</summary>
      
    
    
    
    <category term="node" scheme="https://codehhr.cn/categories/node/"/>
    
    
    <category term="js" scheme="https://codehhr.cn/tags/js/"/>
    
    <category term="javascript" scheme="https://codehhr.cn/tags/javascript/"/>
    
    <category term="node" scheme="https://codehhr.cn/tags/node/"/>
    
    <category term="fs" scheme="https://codehhr.cn/tags/fs/"/>
    
    <category term="http" scheme="https://codehhr.cn/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrap</title>
    <link href="https://codehhr.cn/2021/07/11/bootstrap/bootstrap/"/>
    <id>https://codehhr.cn/2021/07/11/bootstrap/bootstrap/</id>
    <published>2021-07-11T12:51:51.000Z</published>
    <updated>2021-07-11T13:51:52.072Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Bootstrap-v3-中文文档"><a href="#Bootstrap-v3-中文文档" class="headerlink" title="Bootstrap v3 中文文档"></a>Bootstrap v3 中文文档</h1><blockquote><h2 id="https-v3-bootcss-com"><a href="#https-v3-bootcss-com" class="headerlink" title="https://v3.bootcss.com/"></a><a href="https://v3.bootcss.com/">https://v3.bootcss.com/</a></h2></blockquote><h1 id="引入使用"><a href="#引入使用" class="headerlink" title="引入使用"></a>引入使用</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 最新版本的 Bootstrap 核心 CSS 文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">  <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 可选的 Bootstrap 主题文件（一般不用引入） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">  <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap-theme.min.css&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>如果只是用一些样式 , 可以只引入 <code>css</code> 文件</strong></p><h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续 . . ."></a>未完待续 . . .</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Bootstrap-v3-中文文档&quot;&gt;&lt;a href=&quot;#Bootstrap-v3-中文文档&quot; class=&quot;headerlink&quot; title=&quot;Bootstrap v3 中文文档&quot;&gt;&lt;/a&gt;Bootstrap v3 中文文档&lt;/h1&gt;&lt;blockquote&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>jQuery ECharts 的使用</title>
    <link href="https://codehhr.cn/2021/07/06/js/jquery-echarts/"/>
    <id>https://codehhr.cn/2021/07/06/js/jquery-echarts/</id>
    <published>2021-07-06T03:30:16.000Z</published>
    <updated>2021-07-18T10:49:19.361Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ECharts-的使用"><a href="#ECharts-的使用" class="headerlink" title="ECharts 的使用"></a>ECharts 的使用</h1><h2 id="ECharts-是什么"><a href="#ECharts-是什么" class="headerlink" title="ECharts 是什么"></a>ECharts 是什么</h2><p>ECharts 是一个使用 <code>JavaScript</code> 实现的开源可视化库 , 涵盖各行业图表 , 满足各种需求<br>ECharts 遵循 <code>Apache-2.0</code> 开源协议 , 免费商用<br>ECharts 兼容当前绝大部分浏览器 ( IE8/9/10/11 , Chrome , Firefox , Safari 等 ) 及兼容多种设备 , 可随时随地任性展示</p><blockquote><h2 id="echarts-apache-org"><a href="#echarts-apache-org" class="headerlink" title="echarts.apache.org/"></a><a href="https://echarts.apache.org/">echarts.apache.org/</a></h2></blockquote><h2 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h2><h3 id="引入-jQuery-js-和-echarts-js"><a href="#引入-jQuery-js-和-echarts-js" class="headerlink" title="引入 jQuery.js 和 echarts.js"></a>引入 <code>jQuery.js</code> 和 <code>echarts.js</code></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/echarts.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><script src="/js/jquery.min.js"></script><script src="/js/echarts.min.js"></script><p><img class="tom-img" src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/tom/tom.jpg"></img></p><h3 id="创建一个容器"><a href="#创建一个容器" class="headerlink" title="创建一个容器"></a>创建一个容器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pie1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="给定容器具体大小"><a href="#给定容器具体大小" class="headerlink" title="给定容器具体大小"></a>给定容器具体大小</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.pie1</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整的数据配置"><a href="#完整的数据配置" class="headerlink" title="完整的数据配置"></a>完整的数据配置</h2><style>.pie1,.pie2,.bar,.kline,.radar,.draggable {  box-sizing: border-box;  margin: 0 auto;  width: 100%;  height: 600px;  overflow: auto;}@media screen and (max-width: 768px){.pie1,.pie2,.bar,.kline,.radar,.draggable {  box-sizing: border-box;  margin: 0 auto;  width: 100%;  height: 500px;  overflow: auto;  }}</style><h3 id="饼状图"><a href="#饼状图" class="headerlink" title="饼状图"></a>饼状图</h3><div class="pie1"></div><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>饼状图配置</span></div>    <div class="hide-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pie1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.pie1</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 饼图</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echartsPie1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> chart = echarts.init($(<span class="string">&quot;.pie1&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">let</span> option = &#123;</span><br><span class="line">    <span class="attr">title</span>: &#123;</span><br><span class="line">      <span class="attr">text</span>: <span class="string">&quot;Text&quot;</span>,</span><br><span class="line">      <span class="attr">subtext</span>: <span class="string">&quot;Subtext&quot;</span>,</span><br><span class="line">      <span class="attr">left</span>: <span class="string">&quot;center&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">tooltip</span>: &#123;</span><br><span class="line">      <span class="attr">trigger</span>: <span class="string">&quot;item&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">legend</span>: &#123;</span><br><span class="line">      <span class="attr">orient</span>: <span class="string">&quot;vertical&quot;</span>,</span><br><span class="line">      <span class="attr">left</span>: <span class="string">&quot;left&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">series</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;NAME&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;pie&quot;</span>,</span><br><span class="line">        <span class="attr">radius</span>: <span class="string">&quot;50%&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: [</span><br><span class="line">          &#123; <span class="attr">value</span>: <span class="number">148</span>, <span class="attr">name</span>: <span class="string">&quot;A&quot;</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">value</span>: <span class="number">735</span>, <span class="attr">name</span>: <span class="string">&quot;B&quot;</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">value</span>: <span class="number">580</span>, <span class="attr">name</span>: <span class="string">&quot;C&quot;</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">value</span>: <span class="number">484</span>, <span class="attr">name</span>: <span class="string">&quot;D&quot;</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">value</span>: <span class="number">300</span>, <span class="attr">name</span>: <span class="string">&quot;E&quot;</span> &#125;,</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">emphasis</span>: &#123;</span><br><span class="line">          <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">            <span class="attr">shadowBlur</span>: <span class="number">10</span>,</span><br><span class="line">            <span class="attr">shadowOffsetX</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">shadowColor</span>: <span class="string">&quot;rgba(0, 0, 0, 0.5)&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;;</span><br><span class="line">  chart.setOption(option);</span><br><span class="line">&#125;</span><br><span class="line">echartsPie1();</span><br></pre></td></tr></table></figure><script>// 饼图function echartsPie1() {  let chart = echarts.init($(".pie1")[0]);  let option = {    title: {      text: "Text",      subtext: "Subtext",      left: "center",    },    tooltip: {      trigger: "item",    },    legend: {      orient: "vertical",      left: "left",    },    series: [      {        name: "NAME",        type: "pie",        radius: "50%",        data: [          { value: 148, name: "A" },          { value: 735, name: "B" },          { value: 580, name: "C" },          { value: 484, name: "D" },          { value: 300, name: "E" },        ],        emphasis: {          itemStyle: {            shadowBlur: 10,            shadowOffsetX: 0,            shadowColor: "rgba(0, 0, 0, 0.5)",          },        },      },    ],  };  chart.setOption(option);}echartsPie1();</script></div></div><h3 id="带背景的柱状图"><a href="#带背景的柱状图" class="headerlink" title="带背景的柱状图"></a>带背景的柱状图</h3><div class="bar"></div><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>带背景的柱状图配置</span></div>    <div class="hide-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bar</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 带背景的柱状图</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echartsBar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> echart = echarts.init($(<span class="string">&quot;.bar&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">let</span> option = &#123;</span><br><span class="line">    <span class="attr">xAxis</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;category&quot;</span>,</span><br><span class="line">      <span class="attr">data</span>: [<span class="string">&quot;Mon&quot;</span>, <span class="string">&quot;Tue&quot;</span>, <span class="string">&quot;Wed&quot;</span>, <span class="string">&quot;Thu&quot;</span>, <span class="string">&quot;Fri&quot;</span>, <span class="string">&quot;Sat&quot;</span>, <span class="string">&quot;Sun&quot;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">yAxis</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;value&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">series</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;NAME&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: [<span class="number">120</span>, <span class="number">200</span>, <span class="number">150</span>, <span class="number">80</span>, <span class="number">70</span>, <span class="number">110</span>, <span class="number">130</span>],</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">        <span class="attr">showBackground</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">backgroundStyle</span>: &#123;</span><br><span class="line">          <span class="attr">color</span>: <span class="string">&quot;rgba(180, 180, 180, 0.2)&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;;</span><br><span class="line">  echart.setOption(option);</span><br><span class="line">&#125;</span><br><span class="line">echartsBar();</span><br></pre></td></tr></table></figure><script>// 带背景的柱状图function echartsBar() {  let echart = echarts.init($(".bar")[0]);  let option = {    xAxis: {      type: "category",      data: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],    },    yAxis: {      type: "value",    },    series: [      {        name: "NAME",        data: [120, 200, 150, 80, 70, 110, 130],        type: "bar",        showBackground: true,        backgroundStyle: {          color: "rgba(180, 180, 180, 0.2)",        },      },    ],  };  echart.setOption(option);}echartsBar();</script></div></div><h3 id="另一种饼图"><a href="#另一种饼图" class="headerlink" title="另一种饼图"></a>另一种饼图</h3><div class="pie2"></div><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>另一种饼图配置</span></div>    <div class="hide-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pie2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.pie2</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echartsPie2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> echart = echarts.init($(<span class="string">&quot;.pie2&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">let</span> option = &#123;</span><br><span class="line">    <span class="attr">legend</span>: &#123;</span><br><span class="line">      <span class="attr">top</span>: <span class="string">&quot;bottom&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">toolbox</span>: &#123;</span><br><span class="line">      <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// feature: &#123;</span></span><br><span class="line">      <span class="comment">//   mark: &#123; show: true &#125;,</span></span><br><span class="line">      <span class="comment">//   dataView: &#123; show: true, readOnly: false &#125;,</span></span><br><span class="line">      <span class="comment">//   restore: &#123; show: true &#125;,</span></span><br><span class="line">      <span class="comment">//   saveAsImage: &#123; show: true &#125;,</span></span><br><span class="line">      <span class="comment">// &#125;,</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">series</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;NAME&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;pie&quot;</span>,</span><br><span class="line">        <span class="attr">radius</span>: [<span class="number">50</span>, <span class="number">250</span>],</span><br><span class="line">        <span class="attr">center</span>: [<span class="string">&quot;50%&quot;</span>, <span class="string">&quot;50%&quot;</span>],</span><br><span class="line">        <span class="attr">roseType</span>: <span class="string">&quot;area&quot;</span>,</span><br><span class="line">        <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">          <span class="attr">borderRadius</span>: <span class="number">8</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">data</span>: [</span><br><span class="line">          &#123; <span class="attr">value</span>: <span class="number">40</span>, <span class="attr">name</span>: <span class="string">&quot;rose 1&quot;</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">value</span>: <span class="number">38</span>, <span class="attr">name</span>: <span class="string">&quot;rose 2&quot;</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">value</span>: <span class="number">32</span>, <span class="attr">name</span>: <span class="string">&quot;rose 3&quot;</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">value</span>: <span class="number">30</span>, <span class="attr">name</span>: <span class="string">&quot;rose 4&quot;</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">value</span>: <span class="number">28</span>, <span class="attr">name</span>: <span class="string">&quot;rose 5&quot;</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">value</span>: <span class="number">26</span>, <span class="attr">name</span>: <span class="string">&quot;rose 6&quot;</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">value</span>: <span class="number">22</span>, <span class="attr">name</span>: <span class="string">&quot;rose 7&quot;</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">value</span>: <span class="number">18</span>, <span class="attr">name</span>: <span class="string">&quot;rose 8&quot;</span> &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;;</span><br><span class="line">  echart.setOption(option);</span><br><span class="line">&#125;</span><br><span class="line">echartsPie2();</span><br></pre></td></tr></table></figure><script>function echartsPie2() {  let echart = echarts.init($(".pie2")[0]);  let option = {    legend: {      top: "bottom",    },    toolbox: {      show: true,      // feature: {      //   mark: { show: true },      //   dataView: { show: true, readOnly: false },      //   restore: { show: true },      //   saveAsImage: { show: true },      // },    },    series: [      {        name: "NAME",        type: "pie",        radius: [50, 250],        center: ["50%", "50%"],        roseType: "area",        itemStyle: {          borderRadius: 8,        },        data: [          { value: 40, name: "rose 1" },          { value: 38, name: "rose 2" },          { value: 32, name: "rose 3" },          { value: 30, name: "rose 4" },          { value: 28, name: "rose 5" },          { value: 26, name: "rose 6" },          { value: 22, name: "rose 7" },          { value: 18, name: "rose 8" },        ],      },    ],  };  echart.setOption(option);}echartsPie2();</script></div></div><h3 id="K-线图"><a href="#K-线图" class="headerlink" title="K 线图"></a>K 线图</h3><div class="kline"></div><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>K 线图配置</span></div>    <div class="hide-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;kline&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.kline</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echartsKline</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> echart = echarts.init($(<span class="string">&quot;.kline&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">let</span> option = &#123;</span><br><span class="line">    <span class="attr">xAxis</span>: &#123;</span><br><span class="line">      <span class="attr">data</span>: [<span class="string">&quot;2017-10-24&quot;</span>, <span class="string">&quot;2017-10-25&quot;</span>, <span class="string">&quot;2017-10-26&quot;</span>, <span class="string">&quot;2017-10-27&quot;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">yAxis</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">series</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;k&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: [</span><br><span class="line">          [<span class="number">20</span>, <span class="number">34</span>, <span class="number">10</span>, <span class="number">38</span>],</span><br><span class="line">          [<span class="number">40</span>, <span class="number">35</span>, <span class="number">30</span>, <span class="number">50</span>],</span><br><span class="line">          [<span class="number">31</span>, <span class="number">38</span>, <span class="number">33</span>, <span class="number">44</span>],</span><br><span class="line">          [<span class="number">38</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">42</span>],</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;;</span><br><span class="line">  echart.setOption(option);</span><br><span class="line">&#125;</span><br><span class="line">echartsKline();</span><br></pre></td></tr></table></figure><script>function echartsKline() {  let echart = echarts.init($(".kline")[0]);  let option = {    xAxis: {      data: ["2017-10-24", "2017-10-25", "2017-10-26", "2017-10-27"],    },    yAxis: {},    series: [      {        type: "k",        data: [          [20, 34, 10, 38],          [40, 35, 30, 50],          [31, 38, 33, 44],          [38, 15, 5, 42],        ],      },    ],  };  echart.setOption(option);}echartsKline();</script></div></div><h3 id="雷达图"><a href="#雷达图" class="headerlink" title="雷达图"></a>雷达图</h3><div class="radar"></div><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>雷达图配置</span></div>    <div class="hide-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;radar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.radar</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echartsRadar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> echart = echarts.init($(<span class="string">&quot;.radar&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">let</span> option = &#123;</span><br><span class="line">    <span class="attr">title</span>: &#123;</span><br><span class="line">      <span class="attr">text</span>: <span class="string">&quot;基础雷达图&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">legend</span>: &#123;</span><br><span class="line">      <span class="attr">data</span>: [<span class="string">&quot;预算分配（Allocated Budget）&quot;</span>, <span class="string">&quot;实际开销（Actual Spending）&quot;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">radar</span>: &#123;</span><br><span class="line">      <span class="comment">// shape: &#x27;circle&#x27;,</span></span><br><span class="line">      <span class="attr">indicator</span>: [</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&quot;销售（Sales）&quot;</span>, <span class="attr">max</span>: <span class="number">6500</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&quot;管理（Administration）&quot;</span>, <span class="attr">max</span>: <span class="number">16000</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&quot;信息技术（Information Technology）&quot;</span>, <span class="attr">max</span>: <span class="number">30000</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&quot;客服（Customer Support）&quot;</span>, <span class="attr">max</span>: <span class="number">38000</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&quot;研发（Development）&quot;</span>, <span class="attr">max</span>: <span class="number">52000</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&quot;市场（Marketing）&quot;</span>, <span class="attr">max</span>: <span class="number">25000</span> &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">series</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;预算 vs 开销（Budget vs spending）&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;radar&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">value</span>: [<span class="number">4200</span>, <span class="number">3000</span>, <span class="number">20000</span>, <span class="number">35000</span>, <span class="number">50000</span>, <span class="number">18000</span>],</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;预算分配（Allocated Budget）&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">value</span>: [<span class="number">5000</span>, <span class="number">14000</span>, <span class="number">28000</span>, <span class="number">26000</span>, <span class="number">42000</span>, <span class="number">21000</span>],</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;实际开销（Actual Spending）&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;;</span><br><span class="line">  echart.setOption(option);</span><br><span class="line">&#125;</span><br><span class="line">echartsRadar();</span><br></pre></td></tr></table></figure><script>function echartsRadar() {  let echart = echarts.init($(".radar")[0]);  let option = {    title: {      text: "基础雷达图",    },    legend: {      data: ["预算分配（Allocated Budget）", "实际开销（Actual Spending）"],    },    radar: {      // shape: 'circle',      indicator: [        { name: "销售（Sales）", max: 6500 },        { name: "管理（Administration）", max: 16000 },        { name: "信息技术（Information Technology）", max: 30000 },        { name: "客服（Customer Support）", max: 38000 },        { name: "研发（Development）", max: 52000 },        { name: "市场（Marketing）", max: 25000 },      ],    },    series: [      {        name: "预算 vs 开销（Budget vs spending）",        type: "radar",        data: [          {            value: [4200, 3000, 20000, 35000, 50000, 18000],            name: "预算分配（Allocated Budget）",          },          {            value: [5000, 14000, 28000, 26000, 42000, 21000],            name: "实际开销（Actual Spending）",          },        ],      },    ],  };  echart.setOption(option);}echartsRadar();</script></div></div><h3 id="可拖拽图"><a href="#可拖拽图" class="headerlink" title="可拖拽图"></a>可拖拽图</h3><div class="draggable"></div><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>可拖拽图配置</span></div>    <div class="hide-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;draggable&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.draggable</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echartsDraggable</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> myChart = echarts.init($(<span class="string">&quot;.draggable&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">let</span> symbolSize = <span class="number">20</span>;</span><br><span class="line">  <span class="keyword">let</span> data = [</span><br><span class="line">    [<span class="number">40</span>, -<span class="number">10</span>],</span><br><span class="line">    [-<span class="number">30</span>, -<span class="number">5</span>],</span><br><span class="line">    [-<span class="number">76.5</span>, <span class="number">20</span>],</span><br><span class="line">    [-<span class="number">63.5</span>, <span class="number">40</span>],</span><br><span class="line">    [-<span class="number">22.1</span>, <span class="number">50</span>],</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> option = &#123;</span><br><span class="line">    <span class="attr">title</span>: &#123;</span><br><span class="line">      <span class="attr">text</span>: <span class="string">&quot;Try Dragging these Points&quot;</span>,</span><br><span class="line">      <span class="attr">left</span>: <span class="string">&quot;center&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">tooltip</span>: &#123;</span><br><span class="line">      <span class="attr">triggerOn</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">      <span class="attr">formatter</span>: <span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">          <span class="string">&quot;X: &quot;</span> +</span><br><span class="line">          params.data[<span class="number">0</span>].toFixed(<span class="number">2</span>) +</span><br><span class="line">          <span class="string">&quot;&lt;br&gt;Y: &quot;</span> +</span><br><span class="line">          params.data[<span class="number">1</span>].toFixed(<span class="number">2</span>)</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">grid</span>: &#123;</span><br><span class="line">      <span class="attr">top</span>: <span class="string">&quot;8%&quot;</span>,</span><br><span class="line">      <span class="attr">bottom</span>: <span class="string">&quot;12%&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">xAxis</span>: &#123;</span><br><span class="line">      <span class="attr">min</span>: -<span class="number">100</span>,</span><br><span class="line">      <span class="attr">max</span>: <span class="number">70</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;value&quot;</span>,</span><br><span class="line">      <span class="attr">axisLine</span>: &#123; <span class="attr">onZero</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">yAxis</span>: &#123;</span><br><span class="line">      <span class="attr">min</span>: -<span class="number">30</span>,</span><br><span class="line">      <span class="attr">max</span>: <span class="number">60</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;value&quot;</span>,</span><br><span class="line">      <span class="attr">axisLine</span>: &#123; <span class="attr">onZero</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">dataZoom</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;slider&quot;</span>,</span><br><span class="line">        <span class="attr">xAxisIndex</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">filterMode</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;slider&quot;</span>,</span><br><span class="line">        <span class="attr">yAxisIndex</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">filterMode</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;inside&quot;</span>,</span><br><span class="line">        <span class="attr">xAxisIndex</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">filterMode</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;inside&quot;</span>,</span><br><span class="line">        <span class="attr">yAxisIndex</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">filterMode</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">series</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;a&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;line&quot;</span>,</span><br><span class="line">        <span class="attr">smooth</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">symbolSize</span>: symbolSize,</span><br><span class="line">        <span class="attr">data</span>: data,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    myChart.setOption(&#123;</span><br><span class="line">      <span class="attr">graphic</span>: data.map(<span class="function"><span class="keyword">function</span> (<span class="params">item, dataIndex</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;circle&quot;</span>,</span><br><span class="line">          <span class="attr">position</span>: myChart.convertToPixel(<span class="string">&quot;grid&quot;</span>, item),</span><br><span class="line">          <span class="attr">shape</span>: &#123;</span><br><span class="line">            <span class="attr">cx</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">cy</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">r</span>: symbolSize / <span class="number">2</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">invisible</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">draggable</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">ondrag</span>: <span class="function"><span class="keyword">function</span> (<span class="params">dx, dy</span>) </span>&#123;</span><br><span class="line">            onPointDragging(dataIndex, [<span class="built_in">this</span>.x, <span class="built_in">this</span>.y]);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">onmousemove</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            showTooltip(dataIndex);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">onmouseout</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            hideTooltip(dataIndex);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">z</span>: <span class="number">100</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">&quot;resize&quot;</span>, updatePosition);</span><br><span class="line"></span><br><span class="line">  myChart.on(<span class="string">&quot;dataZoom&quot;</span>, updatePosition);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">updatePosition</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    myChart.setOption(&#123;</span><br><span class="line">      <span class="attr">graphic</span>: data.map(<span class="function"><span class="keyword">function</span> (<span class="params">item, dataIndex</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">position</span>: myChart.convertToPixel(<span class="string">&quot;grid&quot;</span>, item),</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">showTooltip</span>(<span class="params">dataIndex</span>) </span>&#123;</span><br><span class="line">    myChart.dispatchAction(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;showTip&quot;</span>,</span><br><span class="line">      <span class="attr">seriesIndex</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">dataIndex</span>: dataIndex,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">hideTooltip</span>(<span class="params">dataIndex</span>) </span>&#123;</span><br><span class="line">    myChart.dispatchAction(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;hideTip&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onPointDragging</span>(<span class="params">dataIndex, pos</span>) </span>&#123;</span><br><span class="line">    data[dataIndex] = myChart.convertFromPixel(<span class="string">&quot;grid&quot;</span>, pos);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update data</span></span><br><span class="line">    myChart.setOption(&#123;</span><br><span class="line">      <span class="attr">series</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="string">&quot;a&quot;</span>,</span><br><span class="line">          <span class="attr">data</span>: data,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  myChart.setOption(option);</span><br><span class="line">&#125;</span><br><span class="line">echartsDraggable();</span><br></pre></td></tr></table></figure><script>function echartsDraggable() {  let myChart = echarts.init($(".draggable")[0]);  let symbolSize = 20;  let data = [    [40, -10],    [-30, -5],    [-76.5, 20],    [-63.5, 40],    [-22.1, 50],  ];  let option = {    title: {      text: "Try Dragging these Points",      left: "center",    },    tooltip: {      triggerOn: "none",      formatter: function (params) {        return (          "X: " +          params.data[0].toFixed(2) +          "<br>Y: " +          params.data[1].toFixed(2)        );      },    },    grid: {      top: "8%",      bottom: "12%",    },    xAxis: {      min: -100,      max: 70,      type: "value",      axisLine: { onZero: false },    },    yAxis: {      min: -30,      max: 60,      type: "value",      axisLine: { onZero: false },    },    dataZoom: [      {        type: "slider",        xAxisIndex: 0,        filterMode: "none",      },      {        type: "slider",        yAxisIndex: 0,        filterMode: "none",      },      {        type: "inside",        xAxisIndex: 0,        filterMode: "none",      },      {        type: "inside",        yAxisIndex: 0,        filterMode: "none",      },    ],    series: [      {        id: "a",        type: "line",        smooth: true,        symbolSize: symbolSize,        data: data,      },    ],  };  setTimeout(function () {    myChart.setOption({      graphic: data.map(function (item, dataIndex) {        return {          type: "circle",          position: myChart.convertToPixel("grid", item),          shape: {            cx: 0,            cy: 0,            r: symbolSize / 2,          },          invisible: true,          draggable: true,          ondrag: function (dx, dy) {            onPointDragging(dataIndex, [this.x, this.y]);          },          onmousemove: function () {            showTooltip(dataIndex);          },          onmouseout: function () {            hideTooltip(dataIndex);          },          z: 100,        };      }),    });  }, 0);  window.addEventListener("resize", updatePosition);  myChart.on("dataZoom", updatePosition);  function updatePosition() {    myChart.setOption({      graphic: data.map(function (item, dataIndex) {        return {          position: myChart.convertToPixel("grid", item),        };      }),    });  }  function showTooltip(dataIndex) {    myChart.dispatchAction({      type: "showTip",      seriesIndex: 0,      dataIndex: dataIndex,    });  }  function hideTooltip(dataIndex) {    myChart.dispatchAction({      type: "hideTip",    });  }  function onPointDragging(dataIndex, pos) {    data[dataIndex] = myChart.convertFromPixel("grid", pos);    // Update data    myChart.setOption({      series: [        {          id: "a",          data: data,        },      ],    });  }  myChart.setOption(option);}echartsDraggable();</script></div></div><h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ECharts-的使用&quot;&gt;&lt;a href=&quot;#ECharts-的使用&quot; class=&quot;headerlink&quot; title=&quot;ECharts 的使用&quot;&gt;&lt;/a&gt;ECharts 的使用&lt;/h1&gt;&lt;h2 id=&quot;ECharts-是什么&quot;&gt;&lt;a href=&quot;#EChart</summary>
      
    
    
    
    <category term="js" scheme="https://codehhr.cn/categories/js/"/>
    
    <category term="jQuery" scheme="https://codehhr.cn/categories/js/jQuery/"/>
    
    
    <category term="js" scheme="https://codehhr.cn/tags/js/"/>
    
    <category term="javascript" scheme="https://codehhr.cn/tags/javascript/"/>
    
    <category term="jQuery" scheme="https://codehhr.cn/tags/jQuery/"/>
    
    <category term="echarts" scheme="https://codehhr.cn/tags/echarts/"/>
    
  </entry>
  
  <entry>
    <title>jQuery Ajax 模板</title>
    <link href="https://codehhr.cn/2021/07/01/js/jquery-ajax/"/>
    <id>https://codehhr.cn/2021/07/01/js/jquery-ajax/</id>
    <published>2021-07-01T14:34:13.000Z</published>
    <updated>2021-07-06T03:31:01.384Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>, <span class="comment">//GET</span></span><br><span class="line">  <span class="attr">async</span>: <span class="literal">true</span>, <span class="comment">//或 false,是否异步</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;llc&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">22</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span>, <span class="comment">//超时时间</span></span><br><span class="line">  <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>, <span class="comment">//返回的数据格式：json/xml/html/script/jsonp/text</span></span><br><span class="line">  <span class="attr">beforeSend</span>: <span class="function"><span class="keyword">function</span> (<span class="params">xhr</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(xhr);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;发送前&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data, textStatus, jqXHR</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">error</span>: <span class="function"><span class="keyword">function</span> (<span class="params">xhr, textStatus</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">    <span class="built_in">console</span>.log(xhr);</span><br><span class="line">    <span class="built_in">console</span>.log(textStatus);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="js" scheme="https://codehhr.cn/categories/js/"/>
    
    <category term="jQuery" scheme="https://codehhr.cn/categories/js/jQuery/"/>
    
    
    <category term="js" scheme="https://codehhr.cn/tags/js/"/>
    
    <category term="javascript" scheme="https://codehhr.cn/tags/javascript/"/>
    
    <category term="jQuery" scheme="https://codehhr.cn/tags/jQuery/"/>
    
    <category term="Ajax" scheme="https://codehhr.cn/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>jQuery ( 二 )</title>
    <link href="https://codehhr.cn/2021/06/30/js/jquery-day02/"/>
    <id>https://codehhr.cn/2021/06/30/js/jquery-day02/</id>
    <published>2021-06-30T08:50:51.000Z</published>
    <updated>2021-07-06T03:32:34.951Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jQuery-事件机制"><a href="#jQuery-事件机制" class="headerlink" title="jQuery 事件机制"></a>jQuery 事件机制</h1><h2 id="注册事件"><a href="#注册事件" class="headerlink" title="注册事件"></a>注册事件</h2><p><code>bind()</code> , <code>on()</code> 方法向被选元素添加一个或多个事件处理程序 , 以及当事件发生时运行的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#div&quot;</span>).bind(&#123;</span><br><span class="line">  <span class="function"><span class="title">mouseover</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    $(<span class="built_in">this</span>).css(<span class="string">&quot;background-color&quot;</span>, <span class="string">&quot;blue&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">mouseout</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    $(<span class="built_in">this</span>).css(<span class="string">&quot;background-color&quot;</span>, <span class="string">&quot;black&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).on(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;该段落被点击了。&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="事件对象-event"><a href="#事件对象-event" class="headerlink" title="事件对象 event"></a>事件对象 event</h2><p><code>event</code> 对象有以下属性:</p><ul><li><code>type</code> : 事件类型 , 比如 <code>click</code></li><li><code>which</code> : 触发该事件的鼠标按钮或键盘的键</li><li><code>target</code> : 事件发生的初始对象</li><li><code>data</code> : 传入事件对象的数据</li><li><code>pageX</code> : 事件发生时 , 鼠标位置的水平坐标 ( 以页面左上角为基准 )</li><li><code>pageY</code> : 事件发生时 , 鼠标位置的垂直坐标 ( 以页面左上角为基准 )</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(evet);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="each"><a href="#each" class="headerlink" title="each( )"></a>each( )</h2><p><code>each()</code> 方法为每个匹配元素规定要运行的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;li&quot;</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log($(<span class="built_in">this</span>).text());</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="jQuery-each-函数用于遍历指定的对象和数组"><a href="#jQuery-each-函数用于遍历指定的对象和数组" class="headerlink" title="jQuery.each( )  函数用于遍历指定的对象和数组"></a>jQuery.each( )  函数用于遍历指定的对象和数组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>];</span><br><span class="line"></span><br><span class="line">$.each(arr, <span class="function">(<span class="params">index, value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`我是第<span class="subst">$&#123;index + <span class="number">1</span>&#125;</span>元素 , 值是<span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Good&quot;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$.each(obj, <span class="function">(<span class="params">key, value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="jQuery-对-HTML-的设置与捕获"><a href="#jQuery-对-HTML-的设置与捕获" class="headerlink" title="jQuery 对 HTML 的设置与捕获"></a>jQuery 对 HTML 的设置与捕获</h2><h3 id="html"><a href="#html" class="headerlink" title="html( )"></a>html( )</h3><p><code>html()</code> 设置或返回所选元素的内容 ( 包括 <code>HTML</code> 标记 )</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;HTML: &quot;</span> + $(<span class="string">&quot;#test&quot;</span>).html());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;#test2&quot;</span>).html(<span class="string">&quot;&lt;b&gt;Hello world!&lt;/b&gt;&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="text"><a href="#text" class="headerlink" title="text( )"></a>text( )</h3><p><code>text()</code> 设置或返回所选元素的文本内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;Text: &quot;</span> + $(<span class="string">&quot;#test&quot;</span>).text());</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;#test1&quot;</span>).text(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="val"><a href="#val" class="headerlink" title="val( )"></a>val( )</h3><p><code>val()</code> 设置或返回表单字段的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;值为: &quot;</span> + $(<span class="string">&quot;input&quot;</span>).val());</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;input&quot;</span>).val(<span class="string">&quot;666&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="text-html-以及-val-的回调函数"><a href="#text-html-以及-val-的回调函数" class="headerlink" title="text( ) html( ) 以及 val( ) 的回调函数"></a>text( ) html( ) 以及 val( ) 的回调函数</h3><p><code>text()</code> , <code>html()</code> 以及 <code>val()</code> , 同样拥有回调函数 , 回调函数有两个参数 : 被选元素列表中当前元素的下标 , 以及原始 ( 旧的 ) 值然后以函数新值返回您希望使用的字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;div&quot;</span>).text(<span class="function"><span class="keyword">function</span> (<span class="params">index, originText</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`旧文本 :<span class="subst">$&#123;originText&#125;</span>,新文本 :HelloWorld (<span class="subst">$&#123;index&#125;</span>)`</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="attr-和-prop"><a href="#attr-和-prop" class="headerlink" title="attr( ) 和 prop( )"></a>attr( ) 和 prop( )</h3><p><code>attr()</code> , <code>prop()</code> 方法用于获取和返回属性值<br><code>attr()</code> 不仅可以返回元素的原生属性 , 还可以返回元素的自定义属性<br>具有 <code>true</code> 和 <code>false</code> 两个属性值的属性 , 如 <code>checked</code>, <code>selected</code> 或者 <code>disabled</code> 使用 <code>prop()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log($(<span class="string">&quot;a&quot;</span>).attr(<span class="string">&quot;href&quot;</span>));</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;a&quot;</span>).attr(<span class="string">&quot;href&quot;</span>, <span class="string">&quot;https://codehhr.cn&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log($(<span class="string">&quot;a&quot;</span>).prop(<span class="string">&quot;href&quot;</span>));</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;a&quot;</span>).prop(<span class="string">&quot;href&quot;</span>, <span class="string">&quot;https://codehhr.cn&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="jQuery-对-HTML-的页面尺寸操作"><a href="#jQuery-对-HTML-的页面尺寸操作" class="headerlink" title="jQuery 对 HTML 的页面尺寸操作"></a>jQuery 对 HTML 的页面尺寸操作</h1><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/jquerybox.png" alt="jQueryBox"></p><h2 id="width-和-height"><a href="#width-和-height" class="headerlink" title="width( ) 和 height( )"></a>width( ) 和 height( )</h2><p><code>height()</code> 方法设置或返回元素的高度 ( 不包括内边距 , 边框或外边距 )<br><code>width()</code> 方法设置或返回元素的宽度 ( 不包括内边距 , 边框或外边距 )</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`div 的宽度是: <span class="subst">$&#123;$(<span class="string">&quot;#div1&quot;</span>).width()&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`div 的高度是: <span class="subst">$&#123;$(<span class="string">&quot;#div1&quot;</span>).height(<span class="number">20</span>)&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="innerWidth-和-innerHeight"><a href="#innerWidth-和-innerHeight" class="headerlink" title="innerWidth( ) 和 innerHeight( )"></a>innerWidth( ) 和 innerHeight( )</h2><p><code>innerWidth()</code> 方法返回元素的宽度 ( 包括内边距 )<br><code>innerHeight()</code> 方法返回元素的高度 ( 包括内边距 )</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`div 宽度 , 包含内边距: <span class="subst">$&#123;$(<span class="string">&quot;#div1&quot;</span>).innerWidth()&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`div 高度 , 包含内边距: <span class="subst">$&#123;$(<span class="string">&quot;#div1&quot;</span>).innerHeight()&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="outerWidth-和-outerHeight-方法"><a href="#outerWidth-和-outerHeight-方法" class="headerlink" title="outerWidth() 和 outerHeight() 方法"></a>outerWidth() 和 outerHeight() 方法</h2><p><code>outerWidth()</code> 方法返回元素的宽度 ( 包括内边距和边框 )<br><code>outerHeight()</code> 方法返回元素的高度 ( 包括内边距和边框 )</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`div 宽度 , 包含内边距和边框: <span class="subst">$&#123;$(<span class="string">&quot;#div1&quot;</span>).outerWidth()&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`div 高度 , 包含内边距和边框: <span class="subst">$&#123;$(<span class="string">&quot;#div1&quot;</span>).outerHeight()&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="scrollTop-和-scrollLeft-方法"><a href="#scrollTop-和-scrollLeft-方法" class="headerlink" title="scrollTop() 和 scrollLeft() 方法"></a>scrollTop() 和 scrollLeft() 方法</h2><p><code>scrollTop()</code> 方法设置或者返回滚动条被卷去的元素的高度<br><code>scrollLeft()</code> 方法设置或者返回滚动条被卷去的元素的宽度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log($(<span class="built_in">document</span>).scrollTop());</span><br><span class="line">  <span class="built_in">console</span>.log($(<span class="built_in">document</span>).scrollLeft());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="jQuery-添加元素和删除元素"><a href="#jQuery-添加元素和删除元素" class="headerlink" title="jQuery 添加元素和删除元素"></a>jQuery 添加元素和删除元素</h1><h2 id="append"><a href="#append" class="headerlink" title="append( )"></a>append( )</h2><p><code>append()</code> 方法在被选元素的结尾插入内容 ( 仍然在该元素的内部 )</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;ul&quot;</span>).append(<span class="string">&quot;&lt;li&gt;append here&lt;/li&gt;&quot;</span>);</span><br></pre></td></tr></table></figure><p>🢃</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>append here<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="prepend"><a href="#prepend" class="headerlink" title="prepend( )"></a>prepend( )</h2><p><code>prepend()</code> 方法在被选元素的开头插入内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;ul&quot;</span>).prepend(<span class="string">&quot;&lt;li&gt;prepend here&lt;/li&gt;&quot;</span>);</span><br></pre></td></tr></table></figure><p>🢃</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>prepend here<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="after"><a href="#after" class="headerlink" title="after( )"></a>after( )</h2><p>jQuery 的 <code>after()</code> 方法在被选元素之后插入内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).after(<span class="string">&quot;&lt;p&gt;after&lt;/p&gt;&quot;</span>);</span><br></pre></td></tr></table></figure><p>🢃</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>after<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="before"><a href="#before" class="headerlink" title="before( )"></a>before( )</h2><p>jQuery 的 <code>before()</code> 方法在被选元素之前插入内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).before(<span class="string">&quot;&lt;p&gt;before&lt;/p&gt;&quot;</span>);</span><br></pre></td></tr></table></figure><p>🢃</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>before<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="remove-和-empty"><a href="#remove-和-empty" class="headerlink" title="remove( ) 和 empty( )"></a>remove( ) 和 empty( )</h2><p><code>remove()</code> 删除被选元素 ( 及其子元素 )<br><code>empty()</code> 从被选元素中删除子元素</p><p><code>empty()</code>把子元素删除掉了 , 本身没有删除掉 , 所以本身占位置<br><code>remove()</code>把自己和子元素都删除掉了 , 本身已删除掉 , 所以不占位置</p><p><strong>比如</strong> 原 <code>DOM</code> 结构 🢃</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="empty"><a href="#empty" class="headerlink" title="empty( )"></a>empty( )</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;ul&quot;</span>).empty();</span><br></pre></td></tr></table></figure><p>结果 : 🢃</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 子元素都被删掉了 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="remove"><a href="#remove" class="headerlink" title="remove( )"></a>remove( )</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;ul&quot;</span>).remove();</span><br></pre></td></tr></table></figure><p>结果 : 🢃</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 把自己和子元素都删掉了,本身已删除掉  --&gt;</span></span><br></pre></td></tr></table></figure><h1 id="jquery-插件的认识"><a href="#jquery-插件的认识" class="headerlink" title="jquery 插件的认识"></a>jquery 插件的认识</h1><p><code>jquery</code> 不可能包含所有的功能 , 我们可以通过插件扩展 <code>jquery</code> 的功能<br><code>jquery</code> 有着丰富的插件 , 使用这些插件能给 <code>jquery</code> 提供一些额外的功能</p><h1 id="jquery-color-js-的使用"><a href="#jquery-color-js-的使用" class="headerlink" title="jquery.color.js 的使用"></a>jquery.color.js 的使用</h1><h2 id="引入-js-文件"><a href="#引入-js-文件" class="headerlink" title="引入 js 文件"></a>引入 js 文件</h2><p><code>jquery</code> 中的 <code>animate</code> 动画本身不支持变色 m 但是 <code>jquery.color.js</code> 弥补了这一缺陷<br><code>jquery.color.js</code> 依赖于 <code>jQuery</code> , 所以需要先引用 <code>jquery.js</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery.color.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).on(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;div&quot;</span>).animate(</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">width</span>: <span class="string">&quot;200px&quot;</span>,</span><br><span class="line">      <span class="string">&quot;background-color&quot;</span>: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">2000</span>,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;动画结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="jquery-lazyload-js-的使用"><a href="#jquery-lazyload-js-的使用" class="headerlink" title="jquery.lazyload.js 的使用"></a>jquery.lazyload.js 的使用</h1><h2 id="引入-js-文件-1"><a href="#引入-js-文件-1" class="headerlink" title="引入 js 文件"></a>引入 js 文件</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery.lazyload.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">&quot;640&quot;</span> <span class="attr">height</span>=<span class="string">&quot;480&quot;</span> <span class="attr">data-original</span>=<span class="string">&quot;./img/test.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&quot;img&quot;</span>).lazyload();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="jquery-ui-js-的使用"><a href="#jquery-ui-js-的使用" class="headerlink" title="jquery.ui.js 的使用"></a>jquery.ui.js 的使用</h1><p><code>jQuery</code> <code>UI</code> 是建立在 <code>jQuery</code> <code>JavaScript</code> 库上的一组用户界面交互 , 特效 , 小部件及主题</p><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/jquery-ui.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/jquery-ui.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h2><h3 id="操作日期选择器"><a href="#操作日期选择器" class="headerlink" title="操作日期选择器"></a>操作日期选择器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;date&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#date&quot;</span>).datepicker();</span><br></pre></td></tr></table></figure><h3 id="拖动"><a href="#拖动" class="headerlink" title="拖动"></a>拖动</h3><p>允许鼠标拖动元素 , 在任意的 <code>DOM</code> 元素上启用 <code>draggable</code> 功能 , 通过鼠标点击并在视区中拖动来移动 <code>draggable</code> 对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;draggable&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;#draggable&quot;</span>).draggable();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;jQuery-事件机制&quot;&gt;&lt;a href=&quot;#jQuery-事件机制&quot; class=&quot;headerlink&quot; title=&quot;jQuery 事件机制&quot;&gt;&lt;/a&gt;jQuery 事件机制&lt;/h1&gt;&lt;h2 id=&quot;注册事件&quot;&gt;&lt;a href=&quot;#注册事件&quot; class=&quot;</summary>
      
    
    
    
    <category term="js" scheme="https://codehhr.cn/categories/js/"/>
    
    <category term="jQuery" scheme="https://codehhr.cn/categories/js/jQuery/"/>
    
    
    <category term="js" scheme="https://codehhr.cn/tags/js/"/>
    
    <category term="javascript" scheme="https://codehhr.cn/tags/javascript/"/>
    
    <category term="jQuery" scheme="https://codehhr.cn/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>jQuery ( 一 )</title>
    <link href="https://codehhr.cn/2021/06/29/js/jquery-day01/"/>
    <id>https://codehhr.cn/2021/06/29/js/jquery-day01/</id>
    <published>2021-06-29T08:39:11.000Z</published>
    <updated>2021-06-30T08:46:08.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jQuery-整体结构图"><a href="#jQuery-整体结构图" class="headerlink" title="jQuery 整体结构图"></a>jQuery 整体结构图</h1><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/jquery.png" alt="jQuery"></p><h1 id="jQuery-语法"><a href="#jQuery-语法" class="headerlink" title="jQuery 语法"></a>jQuery 语法</h1><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><p>美元符号定义 <code>jQuery</code> , <code>jQuery</code> 简化了 <code>DOM</code> 操作<br><code>jQuery</code> 使用 <code>$(selector).action()</code> 的格式给一个 ( 或多个 ) 元素绑定事件 , 具体来说 , <code>$(selector)</code> 让 <code>jQuery</code> 选择匹配 <code>CSS</code> 选择器 <code>selector</code> 的元素 , 并将它/它们传递给叫做 <code>.action()</code> 的事件 <code>API</code></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><code>jQuery</code> 入口函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery 入口函数</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">  $(<span class="string">&quot;#blackBox&quot;</span>).hide();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>上述代码和以下原生 <code>js</code> 代码功能相同 :</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&quot;blackBox&quot;</span>).style.display = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="jQuery-入口函数与-JavaScript-入口函数的区别"><a href="#jQuery-入口函数与-JavaScript-入口函数的区别" class="headerlink" title="jQuery 入口函数与 JavaScript 入口函数的区别"></a>jQuery 入口函数与 JavaScript 入口函数的区别</h2><p><img src="https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/loadandready.png" alt="load and ready"></p><h1 id="JQuery-选择器"><a href="#JQuery-选择器" class="headerlink" title="JQuery 选择器"></a>JQuery 选择器</h1><h2 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h2><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>ID 选择器</td><td><code>$(&quot;#id&quot;)</code></td><td>获取指定 ID 的元素</td></tr><tr><td>类选择器</td><td><code>$(&quot;.class&quot;)</code></td><td>获取同一类 <code>class</code> 的元素</td></tr><tr><td>标签选择器</td><td><code>$(&quot;div&quot;)</code></td><td>获取同一类标签的所有元素</td></tr><tr><td>并集选择器</td><td><code>$(&quot;div,p,li&quot;)</code></td><td>使用逗号分隔,只要符合条件之一就可,获取所有的 <code>div</code>,<code>p</code>,<code>li</code> 元素</td></tr><tr><td>交集选择器</td><td><code>$(&quot;div.redClass&quot;)</code></td><td>此选择器 <code>div</code> 和 <code>.redClass</code> 之间没有空格,是指 <code>class</code> 为 <code>redClass</code> 的 <code>div</code> 元素</td></tr></tbody></table><h2 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h2><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>子代选择器</td><td><code>$(&quot;ul&gt;li&quot;)</code></td><td>使用 <code>&gt;</code>号,获取儿子层级的元素,注意,并不会获取孙子层级的元素</td></tr><tr><td>后代选择器</td><td><code>$&quot;ul li&quot;)</code></td><td>使用空格,代表后代选择器,获取 <code>ul</code> 下的所有 <code>li</code> 元素,包括孙子等</td></tr></tbody></table><h2 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h2><table><thead><tr><th></th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td><code>:eq(index)</code></td><td><code>$(&quot;li:eq(2)&quot;).css(&quot;color&quot;,&quot;red&quot;)</code></td><td>获取到的 <code>li</code> 元素中,选择索引号为 <code>2</code> 的元素,索引号 <code>index</code> 从 <code>0</code> 开始</td></tr><tr><td><code>:odd</code></td><td><code>$(&quot;li:odd&quot;).css(&quot;color&quot;,&quot;red&quot;)</code></td><td>获取到的 <code>li</code> 元素中,选择索引号为 奇数 的元素</td></tr><tr><td><code>:even</code></td><td><code>$(&quot;li:even&quot;).css(&quot;color&quot;,&quot;red&quot;)</code></td><td>获取到的 <code>li</code> 元素中,选择索引号为 偶数 的元素</td></tr></tbody></table><h2 id="筛选选择器-方法"><a href="#筛选选择器-方法" class="headerlink" title="筛选选择器 (方法)"></a>筛选选择器 (方法)</h2><table><thead><tr><th></th><th>用法</th><th>说明</th></tr></thead><tbody><tr><td><code>children(selector)</code></td><td><code>$(&quot;ul&quot;).children(&quot;li&quot;)</code></td><td>相当于 <code>$(&quot;ul&gt;li&quot;)</code> , 子类选择器</td></tr><tr><td><code>find(selector)</code></td><td><code>$(&quot;ul&quot;).find(&quot;li&quot;)</code></td><td>相当于 <code>$(&quot;ul li&quot;)</code> , 后代选择器</td></tr><tr><td><code>siblings(selector)</code></td><td><code>$(&quot;#first&quot;).siblings(&quot;li&quot;)</code></td><td>查找兄弟节点 , 不包括自己本身</td></tr><tr><td><code>parent()</code></td><td><code>$(&quot;#first&quot;).parent()</code></td><td>查找父亲</td></tr><tr><td><code>eq(index)</code></td><td><code>$(&quot;li&quot;).eq(2)</code></td><td>相当于 <code>$(&quot;li:eq(2)&quot;)</code> , <code>index</code> 从 <code>0</code> 开始</td></tr><tr><td><code>next()</code></td><td><code>$(&quot;li&quot;).next()</code></td><td>找下一个兄弟</td></tr><tr><td><code>prev()</code></td><td><code>$(&quot;li&quot;).prev()</code></td><td>找上一次兄弟</td></tr><tr><td><code>Index()</code></td><td><code>$(&quot;li&quot;).index()</code></td><td>获取当前的位置 (索引)</td></tr><tr><td><code>not()</code></td><td><code>$(&quot;p&quot;).not(&quot;.intro&quot;)</code></td><td>返回不带有类名 <code>intro</code> 的所有 <code>p</code> 元素</td></tr></tbody></table><h2 id="DOM-对象和-jQuery-对象的转换"><a href="#DOM-对象和-jQuery-对象的转换" class="headerlink" title="DOM 对象和 jQuery 对象的转换"></a>DOM 对象和 jQuery 对象的转换</h2><h3 id="DOM-对象转-JQuery-对象"><a href="#DOM-对象转-JQuery-对象" class="headerlink" title="DOM 对象转 JQuery 对象"></a>DOM 对象转 JQuery 对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(DOM);</span><br></pre></td></tr></table></figure><p><strong>比如 :</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;.class&quot;</span>);</span><br><span class="line">$(<span class="built_in">this</span>);</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><h3 id="JQuery-对象转-DOM-对象"><a href="#JQuery-对象转-DOM-对象" class="headerlink" title="JQuery 对象转 DOM 对象"></a>JQuery 对象转 DOM 对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(DOM)[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><p><strong>比如 :</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">$(<span class="string">&quot;.class&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">$(<span class="built_in">this</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><h1 id="jQuery-事件"><a href="#jQuery-事件" class="headerlink" title="jQuery 事件"></a>jQuery 事件</h1><h2 id="事件语法"><a href="#事件语法" class="headerlink" title="事件语法"></a>事件语法</h2><h3 id="单击事件"><a href="#单击事件" class="headerlink" title="单击事件"></a>单击事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 动作触发后执行的代码 !</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="双击事件"><a href="#双击事件" class="headerlink" title="双击事件"></a>双击事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).dblclick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 动作触发后执行的代码 !</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="鼠标进入"><a href="#鼠标进入" class="headerlink" title="鼠标进入"></a>鼠标进入</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#div&quot;</span>).mouseenter(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 动作触发后执行的代码 !</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="鼠标移出"><a href="#鼠标移出" class="headerlink" title="鼠标移出"></a>鼠标移出</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#div&quot;</span>).mouseleave(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 动作触发后执行的代码 !</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="获取焦点"><a href="#获取焦点" class="headerlink" title="获取焦点"></a>获取焦点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;input&quot;</span>).focus(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 动作触发后执行的代码 !</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="失去焦点"><a href="#失去焦点" class="headerlink" title="失去焦点"></a>失去焦点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;input&quot;</span>).blur(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 动作触发后执行的代码 !</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="jQuery-的-css-方法"><a href="#jQuery-的-css-方法" class="headerlink" title="jQuery 的 css() 方法"></a>jQuery 的 css() 方法</h1><p><code>jQuery</code> 的 <code>css()</code> 方法设置或返回被选元素的一个或多个样式属性</p><h2 id="返回-CSS-属性"><a href="#返回-CSS-属性" class="headerlink" title="返回 CSS 属性"></a>返回 CSS 属性</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="设置-CSS-属性"><a href="#设置-CSS-属性" class="headerlink" title="设置 CSS 属性"></a>设置 CSS 属性</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>, <span class="string">&quot;yellow&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="设置多个-CSS-属性"><a href="#设置多个-CSS-属性" class="headerlink" title="设置多个 CSS 属性"></a>设置多个 CSS 属性</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).css(&#123;</span><br><span class="line">  <span class="string">&quot;background-color&quot;</span>: <span class="string">&quot;yellow&quot;</span>,</span><br><span class="line">  <span class="string">&quot;font-size&quot;</span>: <span class="string">&quot;20px&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="jQuery-css-类"><a href="#jQuery-css-类" class="headerlink" title="jQuery css 类"></a>jQuery css 类</h1><h2 id="addClass"><a href="#addClass" class="headerlink" title="addClass( )"></a>addClass( )</h2><p>向被选元素添加一个或多个类</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.important</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">font-size</span>: xx-large;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.blue</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0000ff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;h1,p&quot;</span>).addClass(<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">  $(<span class="string">&quot;div&quot;</span>).addClass(<span class="string">&quot;important&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="removeClass"><a href="#removeClass" class="headerlink" title="removeClass( )"></a>removeClass( )</h2><p>从被选元素删除一个或多个类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;h1,h2,p&quot;</span>).removeClass(<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="toggleClass"><a href="#toggleClass" class="headerlink" title="toggleClass( )"></a>toggleClass( )</h2><p>对被选元素进行添加或删除类的切换操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;h1,h2,p&quot;</span>).toggleClass(<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="eq"><a href="#eq" class="headerlink" title="eq( )"></a>eq( )</h2><p>方法返回带有被选元素的指定索引号的元素 , 索引号从 <code>0</code> 开头 , 所以第一个元素的索引号是 <code>0</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).eq(index);</span><br></pre></td></tr></table></figure><h2 id="index"><a href="#index" class="headerlink" title="index( )"></a>index( )</h2><p><code>index()</code> 方法返回指定元素相对于其他 <span id="green-block">同级</span> 元素的 <code>index</code> 位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;li&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log($(<span class="built_in">this</span>).index());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="not"><a href="#not" class="headerlink" title="not()"></a>not()</h2><p><code>Not()</code> 方法返回指定元素之外的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;input&quot;</span>).not(<span class="string">&quot;.inputA&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="jQuery-动画"><a href="#jQuery-动画" class="headerlink" title="jQuery 动画"></a>jQuery 动画</h1><h2 id="jQuery-隐藏显示"><a href="#jQuery-隐藏显示" class="headerlink" title="jQuery 隐藏显示"></a>jQuery 隐藏显示</h2><p>可以使用 <code>hide()</code> 和 <code>show()</code> 方法来隐藏和显示 <code>HTML</code> 元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#hide&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;p&quot;</span>).hide();</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">&quot;#show&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;p&quot;</span>).show();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>可以使用 <code>toggle()</code> 方法来切换 <code>hide()</code> 和 <code>show()</code> 方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;p&quot;</span>).toggle();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="jQuery-淡入淡出"><a href="#jQuery-淡入淡出" class="headerlink" title="jQuery 淡入淡出"></a>jQuery 淡入淡出</h2><p><code>fadeIn()</code> 用于淡入已隐藏的元素 , <code>fadeOut()</code> 方法用于淡出可见元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;#div1&quot;</span>).fadeIn();</span><br><span class="line">  $(<span class="string">&quot;#div2&quot;</span>).fadeIn(<span class="string">&quot;slow&quot;</span>);</span><br><span class="line">  $(<span class="string">&quot;#div3&quot;</span>).fadeOut(<span class="number">3000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>fadeToggle()</code> 方法可以在 <code>fadeIn()</code> 与 <code>fadeOut()</code> 方法之间进行切换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;#div2&quot;</span>).fadeToggle(<span class="string">&quot;fast&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>fadeTo()</code> 方法允许渐变为给定的不透明度 ( 值介于 <code>0</code> 与 <code>1</code> 之间 )</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;#div1&quot;</span>).fadeTo(<span class="string">&quot;slow&quot;</span>, <span class="number">0.15</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="jQuery-滑动"><a href="#jQuery-滑动" class="headerlink" title="jQuery 滑动"></a>jQuery 滑动</h2><p><code>slideDown()</code> 方法用于向下滑动元素 , <code>slideUp()</code> 方法用于向上滑动元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#flip&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;#div1&quot;</span>).slideDown();</span><br><span class="line">  $(<span class="string">&quot;#div1&quot;</span>).slideUp();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>slideToggle()</code> 方法可以在 <code>slideDown()</code> 与 <code>slideUp()</code> 方法之间进行切换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#flip&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;#panel&quot;</span>).slideToggle();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="jQuery-自定义动画"><a href="#jQuery-自定义动画" class="headerlink" title="jQuery 自定义动画"></a>jQuery 自定义动画</h2><p><code>animate()</code> 方法用于创建自定义动画 , 可选的 <code>speed</code> 参数规定效果的时长 , 它可以取以下值 : <code>&quot;slow&quot;</code>,<code>&quot;fast&quot;</code> 或<code>毫秒</code> , 可选的 <code>callback</code> 参数是动画完成后所执行的函数名称</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;div&quot;</span>).animate(&#123;</span><br><span class="line">    <span class="attr">left</span>: <span class="string">&quot;250px&quot;</span>,</span><br><span class="line">    <span class="attr">opacity</span>: <span class="string">&quot;0.5&quot;</span>,</span><br><span class="line">    <span class="attr">width</span>: <span class="string">&quot;150px&quot;</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="string">&quot;150px&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="stop"><a href="#stop" class="headerlink" title="stop( )"></a>stop( )</h2><p><code>jQuery</code> 的 <code>stop()</code> 方法用于停止动画或效果 , 在它们完成之前 , 适用于所有 <code>jQuery</code> 效果函数 , 包括滑动 , 淡入淡出和自定义动画</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#stop&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;#panel&quot;</span>).stop();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>在当前动画 <code>100%</code> 完成之后执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;p&quot;</span>).hide(<span class="string">&quot;slow&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;段落现在被隐藏了&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><h2 id="简单的-tab-切换"><a href="#简单的-tab-切换" class="headerlink" title="简单的 tab 切换"></a>简单的 tab 切换</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#abaeb6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-title</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-title-item</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">25%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">1px</span> solid <span class="number">#171829</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#171829</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-title-item</span><span class="selector-pseudo">:nth-last-of-type</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="attribute">border-right</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-title-item</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#82858f</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-content-item</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">360px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-title&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-title-item&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-title-item&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-title-item&quot;</span>&gt;</span>C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-title-item&quot;</span>&gt;</span>D<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-content-item&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-content-item&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-content-item&quot;</span>&gt;</span>C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-content-item&quot;</span>&gt;</span>D<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;.tab-content-item&quot;</span>).hide();</span><br><span class="line">  $(<span class="string">&quot;.tab-content-item:eq(0)&quot;</span>).show();</span><br><span class="line"></span><br><span class="line">  $(<span class="string">&quot;.tab-title-item&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&quot;.tab-content-item&quot;</span>).hide();</span><br><span class="line">    $(<span class="string">&quot;.tab-content-item&quot;</span>).eq($(<span class="built_in">this</span>).index()).show();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="手风琴"><a href="#手风琴" class="headerlink" title="手风琴"></a>手风琴</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="comment">/* height: 200px; */</span></span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#9298a5</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: inherit;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: inherit;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.title</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#c1d5e2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">48px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">800</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#696d77</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>首 页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>666<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>归 档<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>666<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>标签<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>666<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>分类<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>666<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;.content&quot;</span>).hide();</span><br><span class="line">  $(<span class="string">&quot;.title&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&quot;.content&quot;</span>).slideUp();</span><br><span class="line">    $(<span class="built_in">this</span>).next().stop().slideDown();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;jQuery-整体结构图&quot;&gt;&lt;a href=&quot;#jQuery-整体结构图&quot; class=&quot;headerlink&quot; title=&quot;jQuery 整体结构图&quot;&gt;&lt;/a&gt;jQuery 整体结构图&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://codehhr.codi</summary>
      
    
    
    
    <category term="js" scheme="https://codehhr.cn/categories/js/"/>
    
    <category term="jQuery" scheme="https://codehhr.cn/categories/js/jQuery/"/>
    
    
    <category term="js" scheme="https://codehhr.cn/tags/js/"/>
    
    <category term="javascript" scheme="https://codehhr.cn/tags/javascript/"/>
    
    <category term="jQuery" scheme="https://codehhr.cn/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>var 与 ES6 中的 let const 的区别</title>
    <link href="https://codehhr.cn/2021/06/29/js/es6-var-let-const/"/>
    <id>https://codehhr.cn/2021/06/29/js/es6-var-let-const/</id>
    <published>2021-06-29T06:22:44.000Z</published>
    <updated>2021-06-29T06:34:09.824Z</updated>
    
    <content type="html"><![CDATA[<h1 id="let-const-var-定义变量的区别是什么"><a href="#let-const-var-定义变量的区别是什么" class="headerlink" title="let const var 定义变量的区别是什么"></a>let const var 定义变量的区别是什么</h1><ul><li><p><code>let</code></p><ul><li>块作用域</li><li>没有变量提升</li><li>不能重复声明</li></ul></li><li><p><code>const</code></p><ul><li>声明常量，不能修改</li><li>必须初始化</li><li>块作用域</li><li>没有变量提升</li><li>不能重复声明</li></ul></li><li><p><code>var</code></p><ul><li>没有块的概念</li><li>可以跨块访问，但是不能跨函数访问</li><li>会进行变量提升</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;let-const-var-定义变量的区别是什么&quot;&gt;&lt;a href=&quot;#let-const-var-定义变量的区别是什么&quot; class=&quot;headerlink&quot; title=&quot;let const var 定义变量的区别是什么&quot;&gt;&lt;/a&gt;let const var </summary>
      
    
    
    
    <category term="js" scheme="https://codehhr.cn/categories/js/"/>
    
    <category term="ES6" scheme="https://codehhr.cn/categories/js/ES6/"/>
    
    
    <category term="js" scheme="https://codehhr.cn/tags/js/"/>
    
    <category term="ES6" scheme="https://codehhr.cn/tags/ES6/"/>
    
    <category term="let" scheme="https://codehhr.cn/tags/let/"/>
    
    <category term="var" scheme="https://codehhr.cn/tags/var/"/>
    
    <category term="const" scheme="https://codehhr.cn/tags/const/"/>
    
    <category term="jsvascript" scheme="https://codehhr.cn/tags/jsvascript/"/>
    
  </entry>
  
  <entry>
    <title>ES7 中的 Async/await</title>
    <link href="https://codehhr.cn/2021/06/25/js/es7-async-await/"/>
    <id>https://codehhr.cn/2021/06/25/js/es7-async-await/</id>
    <published>2021-06-25T12:34:37.000Z</published>
    <updated>2021-07-08T11:59:07.594Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Async-await"><a href="#Async-await" class="headerlink" title="Async/await"></a>Async/await</h1><h2 id="为什么要有-Async-await"><a href="#为什么要有-Async-await" class="headerlink" title="为什么要有 Async/await ?"></a>为什么要有 Async/await ?</h2><p><code>Promise</code> 虽然跳出了异步嵌套的怪圈 , 解决了回调地狱的问题 , 用链式表达更加清晰 , 但是我们也发现如果有大量的异步请求的时候 , 流程复杂的情况下 , 会发现充满了屏幕的 <code>then</code> , 看起来非常吃力 , 而 <code>ES7</code> 的 <code>Async/Await</code> 的出现就是为了解决这种复杂的情况</p><h2 id="Async-await-的基本使用"><a href="#Async-await-的基本使用" class="headerlink" title="Async/await 的基本使用"></a>Async/await 的基本使用</h2><p><code>async</code> 用于申明一个 <code>function</code> 是异步的 , 返回一个 <code>promise</code> 对象 , 而 <code>await</code> 可以认为是 <code>async wait</code> 的简写 , 等待一个异步方法执行完成 , <code>async</code> 必须声明的是一个 <code>function</code> , <code>await</code> 必须在声明的函数内部使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// async 用于声明一个 function 是异步的 , 返回一个 Promise 对象</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;我是 async 声明的异步函数&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;我是 async 声明的异步函数的返回值&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">demo();</span><br><span class="line"><span class="built_in">console</span>.log(demo());</span><br><span class="line">demo().then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印结果:</span></span><br><span class="line"><span class="comment">//  Promise &#123;&lt;fulfilled&gt;: &quot;我是 async 声明的异步函数的返回值&quot;&#125;</span></span><br><span class="line"><span class="comment">//  我是 async 声明的异步函数的返回值</span></span><br><span class="line"><span class="comment">//  我是 async 声明的异步函数 ( 调用了三次,打印了三遍 )</span></span><br></pre></td></tr></table></figure><p><code>await</code> 可以认为是 <code>async wait</code> 的简写 , <code>await</code> 必须在声明的函数内部使用 , 不能单独使用<br><code>await</code> 等待的虽然是 <code>Promise</code> 对象 , 但不必写 <code>.then()</code> , 直接可以得到返回值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">demo2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="built_in">Promise</span>.resolve(<span class="number">123</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;</span><br><span class="line">demo2();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Async-await&quot;&gt;&lt;a href=&quot;#Async-await&quot; class=&quot;headerlink&quot; title=&quot;Async/await&quot;&gt;&lt;/a&gt;Async/await&lt;/h1&gt;&lt;h2 id=&quot;为什么要有-Async-await&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="js" scheme="https://codehhr.cn/categories/js/"/>
    
    <category term="ES7" scheme="https://codehhr.cn/categories/js/ES7/"/>
    
    
    <category term="js" scheme="https://codehhr.cn/tags/js/"/>
    
    <category term="javascript" scheme="https://codehhr.cn/tags/javascript/"/>
    
    <category term="ES6" scheme="https://codehhr.cn/tags/ES6/"/>
    
    <category term="async" scheme="https://codehhr.cn/tags/async/"/>
    
    <category term="await" scheme="https://codehhr.cn/tags/await/"/>
    
  </entry>
  
  <entry>
    <title>ES6 新增用法 ( 六 )</title>
    <link href="https://codehhr.cn/2021/06/25/js/es6-day06/"/>
    <id>https://codehhr.cn/2021/06/25/js/es6-day06/</id>
    <published>2021-06-25T11:17:42.000Z</published>
    <updated>2021-06-28T10:45:47.006Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类基本用法"><a href="#类基本用法" class="headerlink" title="类基本用法"></a>类基本用法</h1><h2 id="类的属性和方法"><a href="#类的属性和方法" class="headerlink" title="类的属性和方法"></a>类的属性和方法</h2><p>声明一个类的写法 :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个叫  Animal 的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="comment">// constructor 构造函数</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">color</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.color = color;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到类里面 ( 花括号 <code>&#123;&#125;</code> 里面 ) 有一个叫 <code>constructor</code> 方法 , 它就是构造方法 , 构造方法里面的 <code>this</code> , 指向的是该类实例化后的对象 , 这就是实现了一个类的声明 , 如果你没有编写 <code>constructor</code> 方法 , 执行的时候也会被加上一个默认的空的 <code>constructor</code> 方法 , constructor 方法是必须的 , 也是唯一的 , 一个类体不能含有多个 constructor 构造方法</p><h2 id="类的实例化对象"><a href="#类的实例化对象" class="headerlink" title="类的实例化对象"></a>类的实例化对象</h2><p>给类添加属性和方法 , 把类名后面的括号 <code>&#123;&#125;</code> 里面的内容称之为类体 , 我们会在类体内来编写类的属性和方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 构造方法</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 属性</span></span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 自定义方法 getName()</span></span><br><span class="line">  <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类的自定义方法"><a href="#类的自定义方法" class="headerlink" title="类的自定义方法"></a>类的自定义方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 构造方法</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 属性</span></span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 自定义方法 getName()</span></span><br><span class="line">  <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`我想念 <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个 Animal 实例对象 dog</span></span><br><span class="line"><span class="keyword">let</span> dog = <span class="keyword">new</span> Animal(<span class="string">&quot;村口消失的大黄&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(dog.name); <span class="comment">// 村口消失的大黄</span></span><br><span class="line"><span class="built_in">console</span>.log(dog.getName()); <span class="comment">// 我想念 村口消失的大黄</span></span><br></pre></td></tr></table></figure><h2 id="类的静态方法"><a href="#类的静态方法" class="headerlink" title="类的静态方法"></a>类的静态方法</h2><p>如果在一个方法前 , 加上 <code>static</code> 关键字 , 就表示该方法<strong>不会被实例继承</strong> , 而是直接通过类来调用 , 这就称为 “静态方法” , 类的静态方法可以被类直接调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">hello</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Father.hello());</span><br></pre></td></tr></table></figure><h2 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h2><p><code>ES6</code> 使用 <code>extends</code> 关键字来实现子类继承父类<br><code>super</code> , 它相当于是父类中的 <code>this</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类 Animal</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类 Dog</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 构造方法</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name, color</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(name);</span><br><span class="line">    <span class="built_in">this</span>.color = color;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>可以用 <code>super</code> 来引用父类 , 访问父类的方法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 构造方法</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 属性</span></span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 父类自定义方法</span></span><br><span class="line">  <span class="function"><span class="title">hello</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello ~&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类 Dog</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 构造方法</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name, color</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(name);</span><br><span class="line">    <span class="built_in">this</span>.color = color;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 子类的实例方法</span></span><br><span class="line">  <span class="function"><span class="title">getSomething</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.hello();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建 dog 实例对象</span></span><br><span class="line"><span class="keyword">let</span> dog = <span class="keyword">new</span> Dog(<span class="string">&quot;dog&quot;</span>, <span class="string">&quot;orange&quot;</span>);</span><br><span class="line"><span class="comment">// 调用子类方法</span></span><br><span class="line"><span class="built_in">console</span>.log(dog.getSomething());</span><br></pre></td></tr></table></figure><p>在父类中 , 我们定义了 <code>say</code> 方法 , 想要在子类中调用父类的 <code>say</code> 方法的话 , 我们使用 <code>super.say()</code> 即可实现</p><p><strong>使用 <code>super</code> 有几个要注意的事项 :</strong></p><ol><li>子类必须在 <code>constructor</code> 方法中调用 <code>super</code> 方法</li><li>调用 <code>super()</code> , 才可以使用 <code>this</code> , 否则报错</li></ol><h1 id="Module-模块"><a href="#Module-模块" class="headerlink" title="Module 模块"></a>Module 模块</h1><h2 id="模块化的初衷"><a href="#模块化的初衷" class="headerlink" title="模块化的初衷"></a>模块化的初衷</h2><p>高内聚,低耦合</p><p>目前还没有浏览器支持 <code>ES6</code> 的 <code>module</code> 模块<br>但是可以解决 :</p><ol><li>vscode 安装 live sever</li><li><code>&lt;script type=&quot;module&quot;&gt;</code> 将 <code>script</code> 标签中的 <code>type</code> 的类型换成 <code>module</code> , 告诉浏览器我们要使用 <code>es6</code> 的模块化了</li></ol><h2 id="导出-Export"><a href="#导出-Export" class="headerlink" title="导出 Export"></a>导出 Export</h2><p>导出 <code>Export</code> : 作为一个模块 , 它可以选择性地给其他模块暴露 ( 提供 ) 自己的属性和方法 , 供其他模块使用</p><h2 id="导入-Import"><a href="#导入-Import" class="headerlink" title="导入 Import"></a>导入 Import</h2><p>导入 <code>Import</code> : 作为一个模块 , 可以根据需要 , 引入其他模块的提供的属性或者方法 , 供自己模块使用</p><h2 id="实现-导入-Import-和-导出-Export"><a href="#实现-导入-Import-和-导出-Export" class="headerlink" title="实现 导入 Import 和 导出 Export"></a>实现 导入 Import 和 导出 Export</h2><p>假设 <code>moduleB</code> 模块代码 :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// moduleB.js</span></span><br><span class="line"><span class="comment">// 导出变量 name</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;前端君&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; name &#125;;</span><br></pre></td></tr></table></figure><p>假设 <code>moduleA</code> 模块代码 :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// moduleA.js</span></span><br><span class="line"><span class="comment">// 导入 moduleB 的属性 name</span></span><br><span class="line"><span class="keyword">import</span> &#123; name &#125; <span class="keyword">from</span> <span class="string">&quot;./moduleB.js&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// 前端君</span></span><br></pre></td></tr></table></figure><h2 id="批量-导入-和-导出"><a href="#批量-导入-和-导出" class="headerlink" title="批量 导入 和 导出"></a>批量 导入 和 导出</h2><p>模块 B 批量导出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// moduleB.js</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;前端君&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Hello ~ 前端君&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123; name, age, hello &#125;;</span><br></pre></td></tr></table></figure><p>模块 A 批量导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// moduleA.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; name, age, hello &#125; <span class="keyword">from</span> <span class="string">&quot;./moduleB.js&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// 前端君</span></span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">// 20</span></span><br><span class="line">hello(); <span class="comment">// Hello ~ 前端君</span></span><br></pre></td></tr></table></figure><h2 id="重命名导出的变量"><a href="#重命名导出的变量" class="headerlink" title="重命名导出的变量"></a>重命名导出的变量</h2><p>想给导入的变量换一个名字的话 , 可以这样做 :<br>使用关键字 <code>as</code> , 可以实现给变量重命名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// moduleA.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; name <span class="keyword">as</span> newName &#125; <span class="keyword">from</span> <span class="string">&quot;./moduleB.js&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(newName); <span class="comment">// 前端君</span></span><br></pre></td></tr></table></figure><h2 id="整体导入"><a href="#整体导入" class="headerlink" title="整体导入"></a>整体导入</h2><p>可以使用星号 <code>*</code> 实现整体导入 :<br>使用星号符 <code>*</code> 将模块 <code>B</code> 提供的所有属性和方法整体导入赋值给变量 <code>obj</code> , 我们可以用点运算符 <code>.</code> 来获取它的属性和方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// moduleB.js</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;前端君&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Hello ~ 前端君&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123; name, age, hello &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// moduleA.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> obj <span class="keyword">from</span> <span class="string">&quot;./moduleB.js&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.name); <span class="comment">// 前端君</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.age); <span class="comment">// 20</span></span><br><span class="line">obj.hello(); <span class="comment">// Hello ~ 前端君</span></span><br></pre></td></tr></table></figure><h2 id="默认导出"><a href="#默认导出" class="headerlink" title="默认导出"></a>默认导出</h2><p>默认导出 , 每个模块支持导出一个没有名字的变量 , 使用关键语句 <code>export default</code> 来实现 :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// moduleB.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;I&#x27;m a default function.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导入这个模块的时候 , 可以为这个匿名函数取任意的名字 , 我们试一下导入上面那个匿名函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// moduleA.js</span></span><br><span class="line"><span class="keyword">import</span> defaultFunction <span class="keyword">from</span> <span class="string">&quot;./moduleB.js&quot;</span>;</span><br><span class="line">defaultFunction(); <span class="comment">// I&#x27;m a default function.</span></span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h3 id="声明的变量-对外都是只读的"><a href="#声明的变量-对外都是只读的" class="headerlink" title="声明的变量 , 对外都是只读的"></a>声明的变量 , 对外都是只读的</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// moduleB.js</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;前端君&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; name &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// moduleA.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; name &#125; <span class="keyword">from</span> <span class="string">&quot;./moduleB.js&quot;</span>;</span><br><span class="line">name = <span class="string">&quot;tom&quot;</span>; <span class="comment">// 报错: name is read-only</span></span><br></pre></td></tr></table></figure><p>但是 , 如果模块 <code>B</code> 导出的是对象类型的值 , 就可修改 , 实质上是地址不可修改 , 可修改的是地址指向的内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// moduleB.js</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">40</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> &#123; person &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// moduleA.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; person &#125; <span class="keyword">from</span> <span class="string">&quot;./moduleB.js&quot;</span>;</span><br><span class="line">person.name = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// 李四</span></span><br></pre></td></tr></table></figure><h3 id="导入不存在的变量会报错"><a href="#导入不存在的变量会报错" class="headerlink" title="导入不存在的变量会报错"></a>导入不存在的变量会报错</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// moduleB.js</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;前端君&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; name &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// moduleA.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; height &#125; <span class="keyword">from</span> <span class="string">&quot;./moduleB.js&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(height); <span class="comment">// 报错: does not provide an export named &#x27;height&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;类基本用法&quot;&gt;&lt;a href=&quot;#类基本用法&quot; class=&quot;headerlink&quot; title=&quot;类基本用法&quot;&gt;&lt;/a&gt;类基本用法&lt;/h1&gt;&lt;h2 id=&quot;类的属性和方法&quot;&gt;&lt;a href=&quot;#类的属性和方法&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="js" scheme="https://codehhr.cn/categories/js/"/>
    
    <category term="ES6" scheme="https://codehhr.cn/categories/js/ES6/"/>
    
    
    <category term="js" scheme="https://codehhr.cn/tags/js/"/>
    
    <category term="javascript" scheme="https://codehhr.cn/tags/javascript/"/>
    
    <category term="ES6" scheme="https://codehhr.cn/tags/ES6/"/>
    
    <category term="class" scheme="https://codehhr.cn/tags/class/"/>
    
    <category term="export" scheme="https://codehhr.cn/tags/export/"/>
    
    <category term="import" scheme="https://codehhr.cn/tags/import/"/>
    
    <category term="module" scheme="https://codehhr.cn/tags/module/"/>
    
    <category term="extends" scheme="https://codehhr.cn/tags/extends/"/>
    
  </entry>
  
  <entry>
    <title>ES6 新增用法 ( 五 )</title>
    <link href="https://codehhr.cn/2021/06/25/js/es6-day05/"/>
    <id>https://codehhr.cn/2021/06/25/js/es6-day05/</id>
    <published>2021-06-25T09:02:58.000Z</published>
    <updated>2021-06-25T12:32:04.948Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES6-的-Promise-对象"><a href="#ES6-的-Promise-对象" class="headerlink" title="ES6 的 Promise 对象"></a>ES6 的 Promise 对象</h1><h2 id="Promise-设计初衷"><a href="#Promise-设计初衷" class="headerlink" title="Promise 设计初衷"></a>Promise 设计初衷</h2><p>如果存在多个请求操作层层依赖的话 , 那么以上的嵌套就有可能不止三层那么少了 , 加上每一层还会有复杂的业务逻辑处理 , 代码可读性也越来越差 , 不直观 , 调试起来也不方便。如果多人开发的时候没有足够的沟通协商 , 大家的代码风格不一致的话 , 更是雪上加霜 , 给后面的维护带来极大的不便 , 既然使用这种回调函数层层嵌套( 又称 : 回调地狱 ) 的形式存在缺点 , <code>ES6</code> 想了办法治它 , 所以就有了 Promise 的出现了</p><h2 id="Promise-基本用法"><a href="#Promise-基本用法" class="headerlink" title="Promise 基本用法"></a>Promise 基本用法</h2><p><code>Promise</code> 对象是全局对象 , 你也可以理解为一个类 , 创建 <code>Promise</code> 实例的时候 , 要有那个 <code>new</code> 关键字。参数是一个匿名函数 , 其中有两个参数 : <code>resolve</code> ( 解决 ) 和 <code>reject</code> ( 拒绝 ) , 两个函数均为方法 , <code>resolve</code> 方法用于处理异步操作成功后业务 ; <code>reject</code> 方法用于操作异步操作失败后的业务</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Promise-的三种状态"><a href="#Promise-的三种状态" class="headerlink" title="Promise 的三种状态"></a>Promise 的三种状态</h2><p><code>Promise</code> 对象有三种状态 :</p><ol><li><code>pending</code> : 刚刚创建一个 Promise 实例的时候 , 表示初始状态 ;</li><li><code>fulfilled</code> : resolve 方法调用的时候 , 表示操作成功 ;</li><li><code>rejected</code> : reject 方法调用的时候 , 表示操作失败 ;<br>状态只能从 初始化 -&gt; 成功 或者 初始化 -&gt; 失败 , 不能逆向转换 , 也不能在成功 <code>fulfilled</code> 和失败 <code>rejected</code> 之间转换</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 实例化后状态 : pending</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&quot;操作成功&quot;</span>) &#123;</span><br><span class="line">    resolve(<span class="string">&quot;resolved&quot;</span>); <span class="comment">// resolve 方法调用 , 状态为 : fulfilled</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject(<span class="string">&quot;rejected&quot;</span>); <span class="comment">// reject 方法调用 , 状态为 : rejected</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Then"><a href="#Then" class="headerlink" title="Then( )"></a>Then( )</h2><p><code>then()</code> 方法 : 用于绑定处理操作后的处理程序<br>参数是两个函数 , 第一个用于处理操作成功后的业务 , 第二个用于处理操作异常后的业务</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">promise.then(</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 成功后处理的程序</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 失败后处理的程序</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="Catch"><a href="#Catch" class="headerlink" title="Catch( )"></a>Catch( )</h2><p>对于操作异常的程序 , <code>Promise</code> 专门提供了一个实例方法来处理 : <code>catch()</code> 方法<br><code>catch</code> 只接受一个参数 , 用于处理操作异常后的业务</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">promise.catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 失败后处理的程序</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>建议将 <code>then</code> 方法用于处理操作成功 , <code>catch</code> 方法用于处理操作异常 , 也就是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">promise</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 操作成功的处理程序</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 操作失败的处理程序</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>之所以能够使用链式调用 , 是因为 <code>then</code> 方法和 <code>catch</code> 方法调用后 , 都会返回 <code>promise</code> 对象</p><p><strong>案例 1</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用 new 关键字创建一个 Promise 实例</span></span><br><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 假设 condition 的值为 true</span></span><br><span class="line">  <span class="keyword">let</span> condition = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    <span class="comment">// 调用操作成功方法</span></span><br><span class="line">    resolve(<span class="string">&quot;操作成功&quot;</span>); <span class="comment">// 状态 : pending -&gt; fulfilled</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 调用操作异常方法</span></span><br><span class="line">    reject(<span class="string">&quot;操作异常&quot;</span>); <span class="comment">//状态 : pending -&gt; rejected</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//用then处理操作成功，catch处理操作异常</span></span><br><span class="line">promise</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 操作成功的处理程序</span></span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 操作失败的处理程序</span></span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制台输出 : 操作成功</span></span><br></pre></td></tr></table></figure><p><strong>案例 2 链式调用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="comment">// 调用操作成功方法</span></span><br><span class="line">    resolve(<span class="string">&quot;操作成功&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 调用操作异常方法</span></span><br><span class="line">    reject(<span class="string">&quot;操作异常&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用 then 处理操作成功 , catch 处理操作异常</span></span><br><span class="line">promise.then(requestA).then(requestB).then(requestC).catch(requestError);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestA</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;请求A成功&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;请求B，下一个就是你了&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestB</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;上一步的结果：&quot;</span> + res);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;请求B成功&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;请求C，下一个就是你了&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestC</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;上一步的结果：&quot;</span> + res);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;请求C成功&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestError</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;请求失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印结果:</span></span><br><span class="line"><span class="comment">//  请求A成功</span></span><br><span class="line"><span class="comment">//  上一步的结果：请求B，下一个就是你了</span></span><br><span class="line"><span class="comment">//  请求B成功</span></span><br><span class="line"><span class="comment">//  上一步的结果：请求C，下一个就是你了</span></span><br><span class="line"><span class="comment">//  请求C成功</span></span><br></pre></td></tr></table></figure><h2 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all( )"></a>Promise.all( )</h2><p><code>Promise.all()</code> 方法 : 接受一个数组作为参数 , 数组的元素是 <code>Promise</code> 实例对象 , 当参数中的实例对象的状态都为 <code>fulfilled</code> 时 , <code>Promise.all()</code> 才会有返回</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建实例 promise1</span></span><br><span class="line"><span class="keyword">let</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    resolve(<span class="string">&quot;实例1操作成功&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">5000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建实例 promise2</span></span><br><span class="line"><span class="keyword">let</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    resolve(<span class="string">&quot;实例2操作成功&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([promise1, promise2]).then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 打印结果:</span></span><br><span class="line"><span class="comment">// 5秒后打印 : [&quot;实例1操作成功&quot;, &quot;实例2操作成功&quot;]</span></span><br></pre></td></tr></table></figure><p>这个方法有什么用呢 ? 一般这样的场景 : 我们执行某个操作 , 这个操作需要得到需要多个接口请求回来的数据来支持 , 但是这些接口请求之前互不依赖 , 不需要层层嵌套 , 这种情况下就适合使用 <code>Promise.all()</code> 方法 , 因为它会得到所有接口都请求成功了 , 才会进行操作</p><h2 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race( )"></a>Promise.race( )</h2><p><code>Promise.race()</code> 方法 : 它的参数要求跟 <code>Promise.all()</code> 方法一样 , 不同的是 , 它参数中的 <code>promise</code> 实例 , 只要有一个状态发生变化 ( 不管是成功 <code>fulfilled</code> 还是异常 <code>rejected</code> ) , 它就会有返回 , 其他实例中再发生变化 , 它也不管了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化实例 promise1</span></span><br><span class="line"><span class="keyword">let</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    resolve(<span class="string">&quot;实例1操作成功&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">4000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化实例 promise2</span></span><br><span class="line"><span class="keyword">let</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    reject(<span class="string">&quot;实例2操作失败&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.race([promise2, promise1])</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">// 打印结果:</span></span><br><span class="line"><span class="comment">// 两秒后打印 : 实例2操作失败</span></span><br></pre></td></tr></table></figure><h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ES6-的-Promise-对象&quot;&gt;&lt;a href=&quot;#ES6-的-Promise-对象&quot; class=&quot;headerlink&quot; title=&quot;ES6 的 Promise 对象&quot;&gt;&lt;/a&gt;ES6 的 Promise 对象&lt;/h1&gt;&lt;h2 id=&quot;Promise-设</summary>
      
    
    
    
    <category term="js" scheme="https://codehhr.cn/categories/js/"/>
    
    <category term="ES6" scheme="https://codehhr.cn/categories/js/ES6/"/>
    
    
    <category term="js" scheme="https://codehhr.cn/tags/js/"/>
    
    <category term="javascript" scheme="https://codehhr.cn/tags/javascript/"/>
    
    <category term="ES6" scheme="https://codehhr.cn/tags/ES6/"/>
    
    <category term="Promise" scheme="https://codehhr.cn/tags/Promise/"/>
    
    <category term="then" scheme="https://codehhr.cn/tags/then/"/>
    
    <category term="catch" scheme="https://codehhr.cn/tags/catch/"/>
    
    <category term="resolve" scheme="https://codehhr.cn/tags/resolve/"/>
    
    <category term="reject" scheme="https://codehhr.cn/tags/reject/"/>
    
  </entry>
  
  <entry>
    <title>ES6 新增用法 ( 四 )</title>
    <link href="https://codehhr.cn/2021/06/24/js/es6-day04/"/>
    <id>https://codehhr.cn/2021/06/24/js/es6-day04/</id>
    <published>2021-06-24T13:06:25.000Z</published>
    <updated>2021-06-25T09:06:29.066Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Iterator-遍历器"><a href="#Iterator-遍历器" class="headerlink" title="Iterator 遍历器"></a>Iterator 遍历器</h1><h2 id="for…of-为什么不遍历-object-对象"><a href="#for…of-为什么不遍历-object-对象" class="headerlink" title="for…of 为什么不遍历 object 对象"></a>for…of 为什么不遍历 object 对象</h2><p>要想能够被 <code>for...of</code> 正常遍历的 , 都需要实现一个遍历器 <code>Iterator</code> , 而数组 , <code>Set</code> 和 <code>Map</code> 结构 , 早就内置好了遍历器 <code>Iterator</code> ( 又叫迭代器 ) , 它们的原型中都有一个 <code>Symbol.iterator</code> 方法 : 而 <code>Object</code> 对象并没有实现这个接口 , 使得它无法被 <code>for...of</code> 遍历</p><p>验证一下 , 它们的原型中到底是不是有个叫 <code>Symbol.iterator</code> 的方法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.prototype[<span class="built_in">Symbol</span>.iterator]); <span class="comment">//结果 : function values()&#123;...&#125;</span></span><br><span class="line"><span class="comment">//字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.prototype[<span class="built_in">Symbol</span>.iterator]); <span class="comment">//结果 : function [Symbol.iterator]()&#123;...&#125;</span></span><br><span class="line"><span class="comment">//Set结构</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Set</span>.prototype[<span class="built_in">Symbol</span>.iterator]); <span class="comment">//结果 : function values()&#123;...&#125;</span></span><br><span class="line"><span class="comment">//Map结构</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>.prototype[<span class="built_in">Symbol</span>.iterator]); <span class="comment">//结果 : function entries()&#123;...&#125;</span></span><br><span class="line"><span class="comment">//Object对象</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype[<span class="built_in">Symbol</span>.iterator]); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>唯独 <code>Object</code> 对象的原型上没有 <code>Symbol.iterator</code> , 返回了 : <code>undefined</code> , 其他的数据类型的原型上都含有一个名字叫 <code>Symbol.iterator</code> 的方法</p><p><strong>注意</strong> : <code>Symbol.iterator</code> 是 <code>Symbol</code> 对象的 <code>iterator</code> 属性 , 是一个特殊的 <code>Symbol</code> 值 , 因此 , 当它作为 <code>prototype</code> 对象属性名的时候 , 获取它的时候需要使用 <code>[]</code> 的形式: <code>prototype[Symbol.iterator]</code> , 不能使用点形式获取 : prototype.Symbol.iterator<br>也就说 , 只要一个数据结构拥有一个叫 <code>[Symbol.iterator]()</code> 方法的数据结构 , 就可以被 <code>for...of</code> 遍历</p><h2 id="Iterator-原理"><a href="#Iterator-原理" class="headerlink" title="Iterator 原理"></a>Iterator 原理</h2><p>当可遍历对象被 <code>for...of</code> 遍历的时候 , <code>[Symbol.iterator]()</code> 就会被调用 , 返回一个 <code>iterator</code> 对象 , <code>iterator</code> 对象里有一个很重要的方法 : <code>next()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> iterator = arr[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"><span class="built_in">console</span>.log(iterator); <span class="comment">// Array Iterator &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()); <span class="comment">// &#123;value: &quot;a&quot;, done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()); <span class="comment">// &#123;value: &quot;b&quot;, done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()); <span class="comment">// &#123;value: &quot;c&quot;, done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()); <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><p>第 1 次调用 <code>next()</code> 方法 : 返回数组的第 1 个元素 : “a” , 以及 <code>done</code> 的值为 <code>fasle</code> , 表示循环没有结束 , 继续遍历<br>第 2 次调用 <code>next()</code> 方法 : 返回数组的第 2 个元素 : “b” , 以及 <code>done</code> 的值还是为 <code>fasle</code> , 表示循环没有结束 , 继续遍历<br>第 3 次调用 <code>next()</code> 方法 : 返回数组的第 3 个元素 : “c” , 以及 <code>done</code> 的值依然为 <code>fasle</code> , 表示循环没有结束 , 继续遍历<br>第 4 次调用 <code>next()</code> 方法 : 返回的 value 值为 undefined , 以及 <code>done</code> 的值变成了 <code>true</code> , 表示遍历结束</p><p><code>for...of</code> 的原理就是 : 先调用可遍历对象的 <code>[Symbol.iterator]()</code> 方法 , 得到一个 <code>iterator</code> 遍历器对象 , 然后就在遍历器上不断调用 <code>next()</code> 方法 , 直到 <code>done</code> 的值为 <code>true</code> 的时候 , 就表示遍历完成结束了</p><h2 id="自定义-Iterator-遍历器"><a href="#自定义-Iterator-遍历器" class="headerlink" title="自定义 Iterator 遍历器"></a>自定义 Iterator 遍历器</h2><p>给一个 <code>Object</code> 对象加一个 <code>[Symbol.iterator]()</code> 方法 , 看看它是不是就能被 <code>for...of</code> 遍历了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义 [Symbol.iterator] 迭代器</span></span><br><span class="line">obj[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获取到对象的每个 key 值返回一个数组</span></span><br><span class="line">  <span class="keyword">let</span> keys = <span class="built_in">Object</span>.keys(obj);</span><br><span class="line">  <span class="comment">// 获取到 key 值 ( 对象 ) 的长度</span></span><br><span class="line">  <span class="keyword">let</span> length = keys.length;</span><br><span class="line">  <span class="comment">// 定义循环变量</span></span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 返回对象:每次迭代会自动调用返回对象里面的 next() 方法</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">next</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 返回值有 value 和 done</span></span><br><span class="line">      <span class="comment">// value 能自定义</span></span><br><span class="line">      <span class="comment">// done为 true 时跳出循环</span></span><br><span class="line">      <span class="keyword">return</span> index &lt; length</span><br><span class="line">        ? &#123;</span><br><span class="line">            <span class="attr">value</span>: &#123; <span class="attr">k</span>: keys[index], <span class="attr">v</span>: obj[keys[index++]] &#125;,</span><br><span class="line">            <span class="attr">done</span>: <span class="literal">false</span>,</span><br><span class="line">          &#125;</span><br><span class="line">        : &#123;</span><br><span class="line">            <span class="attr">done</span>: <span class="literal">true</span>,</span><br><span class="line">          &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>现在用 for…of 试一下能不能遍历此对象</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> &#123; k, v &#125; <span class="keyword">of</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(k, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印结果:</span></span><br><span class="line"><span class="comment">//  name 张三</span></span><br><span class="line"><span class="comment">//  age 20</span></span><br></pre></td></tr></table></figure><p>我们定义了一个 <code>Object</code> 对象 , 同时给它添加了 <code>[Symbol.iterator]()</code> 方法 , 并在 <code>[Symbol.iterator]()</code> 方法返回的对象里实现了 <code>next()</code>方法 , <code>next()</code> 方法返回的对象包含了 <code>value</code> 属性和 <code>done</code> 属性</p><p>也就是说可以通过添加 <code>[Symbol.iterator]()</code> 方法 , 把一个不可遍历的 <code>Object</code> 对象 , 变成可遍历的对象</p><h1 id="Generator-函数"><a href="#Generator-函数" class="headerlink" title="Generator 函数"></a>Generator 函数</h1><h2 id="声明-Generator-函数"><a href="#声明-Generator-函数" class="headerlink" title="声明 Generator 函数"></a>声明 Generator 函数</h2><p><code>Generator</code> 函数 , 又称生成器函数 , 是 <code>ES6</code> 的一个重要的新特性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个 hello 的 Generator 函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">hello</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">`hello <span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">`bye`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调用-Generator-函数"><a href="#调用-Generator-函数" class="headerlink" title="调用 Generator 函数"></a>调用 Generator 函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个 hello 的 Generator 函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">hello</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">`hello <span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">`bye`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 hello 函数</span></span><br><span class="line"><span class="keyword">let</span> ite = hello(<span class="string">&quot;前端君&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ite.next()); <span class="comment">// &#123;value: &quot;hello 前端君&quot;, done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(ite.next()); <span class="comment">// &#123;value: &quot;bye&quot;, done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(ite.next()); <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><p>一开始 , 调用 <code>hello(&quot;前端君&quot;)</code> , 函数执行后 , 返回了一个 : <code>[object Genrator]</code> 生成器对象 , 这里生成器的 <code>next()</code> 方法的和遍历器 <code>iterator</code> 的 <code>next()</code> 方法的返回结果很像<br>可以把 <code>Generator</code> 函数被调用后得到的生成器理解成一个遍历器 <code>iterator</code> , 用于遍历函数内部的状态</p><h2 id="Generator-函数的行为"><a href="#Generator-函数的行为" class="headerlink" title="Generator 函数的行为"></a>Generator 函数的行为</h2><p><code>Generator</code> 函数被调用后并不会一直执行到最后 , 它是先回返回一个生成器对象 , 然后暂停 , 等到生成器对象的 <code>next()</code> 方法被调用后 , 函数才会继续执行 , 直到遇到关键字 <code>yield</code> 后 , 又会停止执行 , 并返回一个 <code>Object</code> 对象 , 然后继续等待 , 直到 <code>next()</code> 再一次被调用的时候 , 才会继续接着往下执行 , 直到 <code>done</code> 的值为 <code>true</code></p><h2 id="yield-语句的使用"><a href="#yield-语句的使用" class="headerlink" title="yield 语句的使用"></a>yield 语句的使用</h2><p><code>yield</code> 有点像传统函数的 <code>return</code> 的作用 , 但不同的是普通函数只能 <code>return</code> 一次 , 但是 <code>Generator</code> 函数可以有很多个 <code>yield</code> , 而 <code>return</code> 代表的是终止执行 , <code>yield</code> 代表的是暂停执行 , 后续通过调用生成器的 <code>next()</code> 方法 , 可以恢复执行</p><h2 id="next-方法接收参数"><a href="#next-方法接收参数" class="headerlink" title="next 方法接收参数"></a>next 方法接收参数</h2><p><code>next()</code> 方法还可以接受一个参数 , 它的参数会作为上一个 <code>yield</code> 的返回值</p><p><strong>案例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> params = <span class="keyword">yield</span> <span class="number">2</span>; <span class="comment">// params =  3</span></span><br><span class="line">  <span class="keyword">let</span> params1 = <span class="keyword">yield</span> <span class="number">3</span>; <span class="comment">// params1= 1</span></span><br><span class="line">  <span class="keyword">let</span> params2 = <span class="keyword">yield</span> params1 + <span class="number">6</span>; <span class="comment">// params2 = 7</span></span><br><span class="line">  <span class="keyword">let</span> params3 = <span class="keyword">yield</span> <span class="number">7</span>; <span class="comment">// params3 = 4</span></span><br><span class="line">  <span class="keyword">return</span> params2 * params + params3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> lt = gen();</span><br><span class="line"><span class="built_in">console</span>.log(lt.next()); <span class="comment">// &#123; value: 2, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(lt.next(<span class="number">3</span>)); <span class="comment">// &#123; value: 3, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(lt.next(lt.next(<span class="number">1</span>).value)); <span class="comment">// &#123; value: 7, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(lt.next(<span class="number">4</span>)); <span class="comment">// &#123; value: 25, done: true &#125;</span></span><br></pre></td></tr></table></figure><h2 id="关键字-yield"><a href="#关键字-yield" class="headerlink" title="关键字 yield*"></a>关键字 yield*</h2><p>在一个 <code>Generator</code> 函数里面 , 如果我们想调用另一个 <code>Generator</code> 函数 , 就需要用到的关键字是 : yield*</p><p><strong>案例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明 Generator 函数 : gen1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&quot;gen1 start&quot;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&quot;gen1 end&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 声明 Generator 函数 : gen2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&quot;gen2 start&quot;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&quot;gen2 end&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明 Generator 函数 : start</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">start</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&quot;start&quot;</span>;</span><br><span class="line">  <span class="keyword">yield</span>* gen1();</span><br><span class="line">  <span class="keyword">yield</span>* gen2();</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&quot;end&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 start 函数</span></span><br><span class="line"><span class="keyword">var</span> ite = start(); <span class="comment">// 创建一个生成器</span></span><br><span class="line">ite.next(); <span class="comment">// &#123;value: &quot;start&quot;, done: false&#125;</span></span><br><span class="line">ite.next(); <span class="comment">// &#123;value: &quot;gen1 start&quot;, done: false&#125;</span></span><br><span class="line">ite.next(); <span class="comment">// &#123;value: &quot;gen1 end&quot;, done: false&#125;</span></span><br><span class="line">ite.next(); <span class="comment">// &#123;value: &quot;gen2 start&quot;, done: false&#125;</span></span><br><span class="line">ite.next(); <span class="comment">// &#123;value: &quot;gen2 end&quot;, done: false&#125;</span></span><br><span class="line">ite.next(); <span class="comment">// &#123;value: &quot;end&quot;, done: false&#125;</span></span><br><span class="line">ite.next(); <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Generator-函数的用途"><a href="#Generator-函数的用途" class="headerlink" title="Generator 函数的用途"></a>Generator 函数的用途</h2><p>是 <code>ES6</code> 的一个很重要的新特性 , 它可以控制函数的内部状态 , 依次遍历每个状态 ; 可以根据需要 , 轻松地让函数暂停执行或者继续执行 , 根据这个特点 , 我们可以利用 <code>Generator</code> 函数来实现异步操作的效果</p><h1 id="Set-和-WeakSet-用法"><a href="#Set-和-WeakSet-用法" class="headerlink" title="Set 和 WeakSet 用法"></a>Set 和 WeakSet 用法</h1><h2 id="什么是-Set"><a href="#什么是-Set" class="headerlink" title="什么是 Set"></a>什么是 Set</h2><p><code>Set</code> 是 <code>ES6</code> 给开发者带来的一种新的数据结构 , 你可以理解为值的集合 , 我们平时见到的数组 <code>Array</code> 也是一种数据结构 , 但是 <code>Set</code> 跟其他数据结构不同的地方就在于 : 它的值不会有重复项</p><h2 id="Set-的基本用法"><a href="#Set-的基本用法" class="headerlink" title="Set 的基本用法"></a>Set 的基本用法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set1 = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"><span class="built_in">console</span>.log(set1); <span class="comment">// Set(0) &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> set2 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(set2); <span class="comment">// Set(3) &#123;1, 2, 3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> set3 = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">set3.add(<span class="number">4</span>);</span><br><span class="line">set3.add(<span class="number">5</span>);</span><br><span class="line">set3.add(<span class="number">6</span>);</span><br><span class="line"><span class="built_in">console</span>.log(set3); <span class="comment">// Set(3) &#123;4, 5, 6&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Set-成员值唯一"><a href="#Set-成员值唯一" class="headerlink" title="Set 成员值唯一"></a>Set 成员值唯一</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">set.add(<span class="number">1</span>);</span><br><span class="line">set.add(<span class="number">1</span>);</span><br><span class="line">set.add(<span class="number">2</span>);</span><br><span class="line">set.add(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(set); <span class="comment">// Set(2) &#123;1, 2&#125;</span></span><br></pre></td></tr></table></figure><h2 id="size-属性"><a href="#size-属性" class="headerlink" title="size 属性"></a>size 属性</h2><p><code>size</code> 属性 : 获取成员的个数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(set); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><h2 id="delete"><a href="#delete" class="headerlink" title="delete( )"></a>delete( )</h2><p><code>delete()</code> 方法 : 用户删除 <code>Set</code> 结构中的指定值 , 删除成功返回 : <code>true</code> , 删除失败返回 : <code>fasle</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(set); <span class="comment">// Set(4) &#123;5, 6, 7, 8&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(set.delete(<span class="number">8</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(set.delete(<span class="number">8</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(set); <span class="comment">// Set(3) &#123;5, 6, 7&#125;</span></span><br></pre></td></tr></table></figure><h2 id="clear"><a href="#clear" class="headerlink" title="clear( )"></a>clear( )</h2><p><code>clear()</code> 方法 : 清除所有成员 , 一个不留</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(set); <span class="comment">// Set(4) &#123;5, 6, 7, 8&#125;</span></span><br><span class="line">set.clear();</span><br><span class="line"><span class="built_in">console</span>.log(set); <span class="comment">// Set(0) &#123;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="has"><a href="#has" class="headerlink" title="has( )"></a>has( )</h2><p><code>has()</code> 方法 : 判断 <code>set</code> 结构中是否含有指定的值 , 如果有 , 返回 <code>true</code> , 如果没有 , 返回 <code>fasle</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(set.has(<span class="number">1</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(set.has(<span class="number">6</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="entries"><a href="#entries" class="headerlink" title="entries( )"></a>entries( )</h2><p><code>entries()</code> 方法 : 返回一个键值对的遍历器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(set.entries()); <span class="comment">// SetIterator &#123;&quot;a&quot; =&gt; &quot;a&quot;, &quot;b&quot; =&gt; &quot;b&quot;, &quot;c&quot; =&gt; &quot;c&quot;&#125;</span></span><br></pre></td></tr></table></figure><p>注意得到的结果 , 成员值 <code>a</code> 对应的键值对是 <code>[&quot;a&quot;,&quot;a&quot;]</code> , 也就是说 : <code>Set</code> 结构是键名和键值是同一个值</p><h2 id="keys-和-values"><a href="#keys-和-values" class="headerlink" title="keys( ) 和 values( )"></a>keys( ) 和 values( )</h2><p><code>keys()</code> 方法 : 返回键名的遍历器<br><code>values()</code> 方法 : 返回键值的遍历器</p><h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach( )"></a>forEach( )</h2><p>使用方式跟数组的 <code>forEach</code> 一样 , 当然 , 得到的 <code>value</code> 是 <code>key</code> 的值是一样的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>]);</span><br><span class="line"><span class="comment">// 使用回调函数遍历每个成员</span></span><br><span class="line">set.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value, key</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value, key);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 打印结果</span></span><br><span class="line"><span class="comment">// a a</span></span><br><span class="line"><span class="comment">// b b</span></span><br><span class="line"><span class="comment">// c c</span></span><br></pre></td></tr></table></figure><h2 id="set-用途之一"><a href="#set-用途之一" class="headerlink" title="set 用途之一"></a>set 用途之一</h2><p><strong>数组去重</strong> , 顺便我们把它封装成一个函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组去重</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deduplication</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(deduplication(arr));</span><br></pre></td></tr></table></figure><h2 id="Weakset-结构"><a href="#Weakset-结构" class="headerlink" title="Weakset 结构"></a>Weakset 结构</h2><p><code>WeakSet</code> 结构同样不会存储重复的值 , 不同的是 , 它的成员必须是对象类型的值 , 否则就会报错</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ws = <span class="keyword">new</span> <span class="built_in">WeakSet</span>([&#123; <span class="attr">age</span>: <span class="number">18</span> &#125;]);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误示范</span></span><br><span class="line"><span class="keyword">let</span> ws = <span class="keyword">new</span> <span class="built_in">WeakSet</span>([<span class="number">1</span>, <span class="number">2</span>]);</span><br></pre></td></tr></table></figure><p>实际上 , 任何可遍历的对象 , 都可以作为 <code>WeakSet</code> 的初始化参数 , 比如 : <strong>数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">2</span>];</span><br><span class="line"><span class="comment">// 初始化一个 WeakSet 对象,参数是 数组 类型</span></span><br><span class="line"><span class="keyword">let</span> ws = <span class="keyword">new</span> <span class="built_in">WeakSet</span>([arr1, arr2]); <span class="comment">//结果 : WeakSet &#123;Object &#123;age: 18&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>同样 , <code>WeakSet</code> 结构也提供了 <code>add()</code> 方法 , <code>delete()</code> 方法 , <code>has()</code> 方法给开发者使用 , 作用与用法跟 <code>Set</code> 结构完全一致</p><p>另一个不同点是 : <code>WeakSet</code> 结构不可遍历 , 因为它的成员都是对象的弱引用 , 随时被回收机制回收 , 成员消失 , 所以 WeakSet 结构不会有 <code>keys()</code> , <code>values()</code> , <code>entries()</code> , <code>forEach()</code> 等方法和 <code>size</code> 属性</p><h1 id="Map-和-WeakMap"><a href="#Map-和-WeakMap" class="headerlink" title="Map 和 WeakMap"></a>Map 和 WeakMap</h1><h2 id="什么是-Map"><a href="#什么是-Map" class="headerlink" title="什么是 Map"></a>什么是 Map</h2><p><code>ES6</code> 提供了 <code>Map</code> 结构给我们使用 , 它跟 <code>Object</code> 对象很像 , 但是不同的是 , 它的 <code>key</code> 键名的类型不再局限于字符串类型了 , 它可以是各种类型的值 ; 可以说 , 它比 <code>Object</code> 对象更加灵活了 , 当然 , 也更加复杂了。</p><h2 id="Map-的基本用法"><a href="#Map-的基本用法" class="headerlink" title="Map 的基本用法"></a>Map 的基本用法</h2><p>跟 <code>Set</code> 类似</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map1 = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="built_in">console</span>.log(map1); <span class="comment">// Map(0) &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> map2 = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;前端君&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;gender&quot;</span>, <span class="number">1</span>],</span><br><span class="line">]);</span><br><span class="line"><span class="built_in">console</span>.log(map2); <span class="comment">// Map(2) &#123;&quot;name&quot; =&gt; &quot;前端君&quot;, &quot;gender&quot; =&gt; 1&#125;</span></span><br></pre></td></tr></table></figure><p><code>Map()</code> 方法里面的参数 , 首先它是一个数组 , 而里面的内容也是由多个数组组成 , <code>&quot;name&quot;</code> : <code>&quot;前端君&quot;</code> 作为一个键值对 , 将它们装在一个数组里面 , <code>[&quot;name&quot;,&quot;前端君&quot;]</code> , 另外一组键值对也一样 : <code>[&quot;gender&quot;,1]</code> 这就是初始化一个 <code>Map</code> 结构实例的基本写法</p><h2 id="set"><a href="#set" class="headerlink" title="set( )"></a>set( )</h2><p><code>set()</code> 方法作用 : 给实例设置一对键值对 , 返回 <code>map</code> 实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="comment">// 添加一个 string 类型的键名</span></span><br><span class="line">map.set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;前端君&quot;</span>);</span><br><span class="line"><span class="comment">// 添加一个数字类型的键名</span></span><br><span class="line">map.set(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(map); <span class="comment">// Map(2) &#123;&quot;name&quot; =&gt; &quot;前端君&quot;, 1 =&gt; 2&#125;</span></span><br></pre></td></tr></table></figure><p><code>Map</code> 结构可以存储非字符串类型的键名 , 当然还可以设置更多其它类型的键名 , 比如更过分点的 :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组类型的键名</span></span><br><span class="line">map.set([<span class="number">1</span>], <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 对象类型的键名</span></span><br><span class="line">map.set(&#123; <span class="attr">name</span>: <span class="string">&quot;Zhangsan&quot;</span> &#125;, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 布尔类型的键名</span></span><br><span class="line">map.set(<span class="literal">true</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// Symbol 类型的键名</span></span><br><span class="line">map.set(<span class="built_in">Symbol</span>(<span class="string">&quot;name&quot;</span>), <span class="number">2</span>);</span><br><span class="line"><span class="comment">// null 为键名</span></span><br><span class="line">map.set(<span class="literal">null</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// undefined 为键名</span></span><br><span class="line">map.set(<span class="literal">undefined</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>使用 <code>set</code> 方法的时候有一点需要注意 , 如果你设置一个已经存在的键名 , 那么后面的键值会覆盖前面的键值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;前端君&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(map); <span class="comment">// 结果 : Map(1) &#123;&quot;name&quot; =&gt; &quot;前端君&quot;&#125;</span></span><br><span class="line"><span class="comment">// 再次设置 name 的值</span></span><br><span class="line">map.set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;隔壁老王&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(map); <span class="comment">// 结果 : Map(1) &#123;&quot;name&quot; =&gt; &quot;隔壁老王&quot;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="get"><a href="#get" class="headerlink" title="get( )"></a>get( )</h2><p><code>get()</code> 方法作用 : 获取指定键名的键值 , 返回键值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;前端君&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;age&quot;</span>, <span class="number">20</span>],</span><br><span class="line">]);</span><br><span class="line"><span class="built_in">console</span>.log(map.get(<span class="string">&quot;name&quot;</span>)); <span class="comment">// 前端君</span></span><br><span class="line"><span class="built_in">console</span>.log(map.get(<span class="string">&quot;age&quot;</span>)); <span class="comment">// 20</span></span><br><span class="line"><span class="built_in">console</span>.log(map.get(<span class="string">&quot;gender&quot;</span>)); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h2 id="delete-1"><a href="#delete-1" class="headerlink" title="delete( )"></a>delete( )</h2><p><code>delete()</code> 方法作用 : 删除指定的键值对 , 删除成功返回 : <code>true</code> , 否则返回 : <code>false</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;前端君&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(map); <span class="comment">// Map(1) &#123;&quot;name&quot; =&gt; &quot;前端君&quot;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(map.delete(<span class="string">&quot;name&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(map.delete(<span class="string">&quot;name&quot;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="clear-1"><a href="#clear-1" class="headerlink" title="clear( )"></a>clear( )</h2><p>跟 <code>Set</code> 结构一样 , <code>Map</code> 结构也提供了 <code>clear()</code> 方法 , 让你一次性删除所有键值对</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;前端君&quot;</span>);</span><br><span class="line">map.set(<span class="string">&quot;gender&quot;</span>, <span class="number">1</span>);</span><br><span class="line">map.clear();</span><br><span class="line"><span class="built_in">console</span>.log(map); <span class="comment">// Map(0) &#123;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="has-1"><a href="#has-1" class="headerlink" title="has( )"></a>has( )</h2><p><code>has()</code> 方法作用 : 判断 <code>Map</code> 实例内是否含有指定的键值对 , 有就返回 : <code>true</code> , 否则返回 : <code>false</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;前端君&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(map.has(<span class="string">&quot;name&quot;</span>)); <span class="comment">// 结果 : true</span></span><br><span class="line"><span class="built_in">console</span>.log(map.has(<span class="string">&quot;age&quot;</span>)); <span class="comment">// 结果 : false</span></span><br></pre></td></tr></table></figure><h2 id="entries-1"><a href="#entries-1" class="headerlink" title="entries()"></a>entries()</h2><p><code>entries()</code> 方法作用 : 返回实例的键值对遍历器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;前端君&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;age&quot;</span>, <span class="number">25</span>],</span><br><span class="line">]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map.entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key + <span class="string">&quot;  &quot;</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印结果</span></span><br><span class="line"><span class="comment">//  name  前端君</span></span><br><span class="line"><span class="comment">//  age  25</span></span><br></pre></td></tr></table></figure><h2 id="keys-和-values-1"><a href="#keys-和-values-1" class="headerlink" title="keys( ) 和 values( )"></a>keys( ) 和 values( )</h2><p><code>keys()</code> 方法 : 返回实例所有键名的遍历器<br><code>values()</code> 方法 : 返回实例所有键值的遍历器</p><h2 id="forEach-1"><a href="#forEach-1" class="headerlink" title="forEach( )"></a>forEach( )</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;前端君&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;age&quot;</span>, <span class="number">25</span>],</span><br><span class="line">]);</span><br><span class="line">map.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value, key</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key + <span class="string">&quot; &quot;</span> + value);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 打印结果</span></span><br><span class="line"><span class="comment">//  name 前端君</span></span><br><span class="line"><span class="comment">//  age 25</span></span><br></pre></td></tr></table></figure><h2 id="size-属性-1"><a href="#size-属性-1" class="headerlink" title="size 属性"></a>size 属性</h2><p>获取实例的成员数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">map.set(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(map.size); <span class="comment">// 结果: 2</span></span><br></pre></td></tr></table></figure><h2 id="什么是-WeakMap"><a href="#什么是-WeakMap" class="headerlink" title="什么是 WeakMap"></a>什么是 WeakMap</h2><p><code>WeakMap</code> 结构和 <code>Map</code> 结构很类似 , 不同点在于 <code>WeakMap</code> 结构的键名只支持引用类型的数据 , 比如 : 数组 , 对象 , 函数</p><h2 id="WeakMap-的基本用法"><a href="#WeakMap-的基本用法" class="headerlink" title="WeakMap 的基本用法"></a>WeakMap 的基本用法</h2><p><code>WeakMap</code> 结构的使用方式和 <code>Map</code> 结构一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> wm = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br></pre></td></tr></table></figure><p>两者都是使用 <code>new</code> 来创建实例 , 如果添加键值对的话 , 我们同样是使用 <code>set</code> 方法 , 不过键名的类型必须要求是引用类型的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> wm = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"><span class="comment">// 数组类型的键名</span></span><br><span class="line">wm.set([<span class="number">1</span>], <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 对象类型的键名</span></span><br><span class="line">wm.set(&#123; <span class="attr">name</span>: <span class="string">&quot;Zhangsan&quot;</span> &#125;, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 函数类型的键名</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">wm.set(fn, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(wm); <span class="comment">// WeakMap &#123;ƒ =&gt; 2, &#123;…&#125; =&gt; 2, Array(1) =&gt; 2&#125;</span></span><br></pre></td></tr></table></figure><p>从打印结果可以看出 , 以上类型的键名都可以成功添加到 <code>WeakMap</code> 实例中</p><h2 id="WeakMap-与-Map-的区别"><a href="#WeakMap-与-Map-的区别" class="headerlink" title="WeakMap 与 Map 的区别"></a>WeakMap 与 Map 的区别</h2><p>如果是普通的值类型则不允许 , 比如 : <code>String</code> , <code>Number</code> , <code>null</code> , <code>undefined</code> , <code>boolean</code> , 而 <code>Map</code> 结构是允许的 , 这就是两者的不同之处 , 谨记</p><p>跟 <code>Map</code> 一样 , <code>WeakMap</code> 也拥有 <code>get</code> , <code>has</code> , <code>delete</code> 方法 , 用法和用途都一样 , 不同地方在于 , <code>WeakMap</code> 不支持 <code>clear</code> 方法 , 不支持遍历 , 也就没有了 <code>keys</code> , <code>values</code> , <code>entries</code> , <code>forEach</code> 这 4 个方法 , 也没有属性 <code>size</code></p><p>理由跟 <code>WeakSet</code> 结构一样 : 键名中的引用类型是弱引用 , 你永远不知道这个引用对象什么时候会被垃圾回收机制回收了 , 如果这个引用类型的值被垃圾机制回收了 , <code>WeakMap</code> 实例中的对应键值对也会消失。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Iterator-遍历器&quot;&gt;&lt;a href=&quot;#Iterator-遍历器&quot; class=&quot;headerlink&quot; title=&quot;Iterator 遍历器&quot;&gt;&lt;/a&gt;Iterator 遍历器&lt;/h1&gt;&lt;h2 id=&quot;for…of-为什么不遍历-object-对象&quot;&gt;</summary>
      
    
    
    
    <category term="js" scheme="https://codehhr.cn/categories/js/"/>
    
    <category term="ES6" scheme="https://codehhr.cn/categories/js/ES6/"/>
    
    
    <category term="js" scheme="https://codehhr.cn/tags/js/"/>
    
    <category term="javascript" scheme="https://codehhr.cn/tags/javascript/"/>
    
    <category term="ES6" scheme="https://codehhr.cn/tags/ES6/"/>
    
    <category term="数组去重" scheme="https://codehhr.cn/tags/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/"/>
    
  </entry>
  
  <entry>
    <title>ES6 新增用法 ( 三 )</title>
    <link href="https://codehhr.cn/2021/06/23/js/es6-day03/"/>
    <id>https://codehhr.cn/2021/06/23/js/es6-day03/</id>
    <published>2021-06-23T13:57:46.000Z</published>
    <updated>2021-06-24T13:17:31.942Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES6-中数值的用法"><a href="#ES6-中数值的用法" class="headerlink" title="ES6 中数值的用法"></a>ES6 中数值的用法</h1><h2 id="isNaN"><a href="#isNaN" class="headerlink" title="isNaN( )"></a>isNaN( )</h2><p><code>isNaN</code> 函数 : 用于判断传入的是否是非数值<br><strong>注意</strong> : 是判断非数值 , 而不是判断数值 , <code>isNaN</code> 的全称是： is not a number</p><p><strong>传统写法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="number">2.5</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="string">&quot;2.5&quot;</span>)); <span class="comment">// false,会隐式类型转化为 Number 类型</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="string">&quot;abc&quot;</span>)); <span class="comment">// true,转换为 Number 后是一个非数值 (NaN)</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">NaN</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>isNaN</code> 是全局函数 , 本身就是属于 <code>window</code> 对象下的一个方法 , 在 <code>ES6</code> 的标准中 , <code>isNaN</code> 方法被移植到了 <code>Number</code> 对象上 , 也就是原本属于全局对象 <code>window</code> 下的函数 , 现在属于 <code>Number</code> 对象上了</p><p><strong>ES6 用法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="number">2.5</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="string">&quot;abc&quot;</span>)); <span class="comment">// false,不做类型转换,是字符串,直接返回 false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="string">&quot;2.5&quot;</span>)); <span class="comment">// false,也不会隐式类型转换,即还是字符串,返回 false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="literal">NaN</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="Number-isFinite"><a href="#Number-isFinite" class="headerlink" title="Number.isFinite( )"></a>Number.isFinite( )</h2><p><code>Number.isFinite</code> 函数 : 用来检查一个数值是否非无穷 ( 有穷的 , 有限的 )</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isFinite(<span class="number">10</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isFinite(<span class="string">&quot;10&quot;</span>)); <span class="comment">// false,字符串也会返回 false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isFinite(<span class="literal">Infinity</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="Number-parseInt"><a href="#Number-parseInt" class="headerlink" title="Number.parseInt( )"></a>Number.parseInt( )</h2><p><code>parseInt</code> 函数 : 解析一个字符串 , 返回一个整数. <code>parseInt</code> 函数同样是从 <code>window</code> 对象下移植到 <code>Number</code> 对象下 , 但是它的作用没有任何变化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseInt(<span class="number">2.3</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseInt(<span class="number">2.7</span>)); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h2 id="Number-isInteger"><a href="#Number-isInteger" class="headerlink" title="Number.isInteger( )"></a>Number.isInteger( )</h2><p><code>Number.isInteger</code> 函数 : 用来判断是否是整数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="number">1</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="number">1.0</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="number">1.1</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="string">&quot;1.0&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="string">&quot;1.a&quot;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="Math-trunc"><a href="#Math-trunc" class="headerlink" title="Math.trunc( )"></a>Math.trunc( )</h2><p><code>Math.trunc</code> 函数 : 用于去除一个数的小数部分 , 返回整数部分。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.trunc(<span class="number">2.1</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.trunc(<span class="number">2.8</span>)); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h2 id="Math-sign"><a href="#Math-sign" class="headerlink" title="Math.sign( )"></a>Math.sign( )</h2><p><code>Math.sign</code> 函数 : 用来判断一个数到底是正数 , 负数 , 还是零<br>参数如果是正数 , 结果返回 <code>1</code> ; 如果是负数 , 结果返回 <code>-1</code> ; 如果是 0 , 结果返回 <code>0</code> ; 如果是一个非数值类型的参数 , 结果返回 <code>NaN</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.sign(<span class="number">2</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.sign(<span class="number">0</span>)); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.sign(-<span class="number">20</span>)); <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.sign(<span class="string">&quot;-20&quot;</span>)); <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.sign(<span class="string">&quot;asd&quot;</span>)); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><h1 id="ES6-中对象的使用"><a href="#ES6-中对象的使用" class="headerlink" title="ES6 中对象的使用"></a>ES6 中对象的使用</h1><h2 id="对象的写法"><a href="#对象的写法" class="headerlink" title="对象的写法"></a>对象的写法</h2><p><strong>传统写法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统方式</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="comment">// name: name,</span></span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="comment">// age: age,</span></span><br><span class="line">  <span class="attr">say</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>ES6 写法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> person2 = &#123;</span><br><span class="line">  name,</span><br><span class="line">  age,</span><br><span class="line">  <span class="function"><span class="title">say</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Shit bro ~&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="ES6-中属性名的更新"><a href="#ES6-中属性名的更新" class="headerlink" title="ES6 中属性名的更新"></a>ES6 中属性名的更新</h2><p>用字面量定义一个对象的时候 ,可以用表达式作为对象的属性名或者方法名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> h = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> w = <span class="string">&quot;world&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> f = <span class="string">&quot;first&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> l = <span class="string">&quot;name&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> person3 = &#123;</span><br><span class="line">  [f + l]: <span class="string">&quot;FirstName&quot;</span>,</span><br><span class="line">  [h + w]() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(person3.firstname); <span class="comment">// FirstName</span></span><br><span class="line">person3.helloworld(); <span class="comment">// Hello World</span></span><br></pre></td></tr></table></figure><h2 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is( )"></a>Object.is( )</h2><p><code>Object.is</code> 函数的作用 : 比较两个值是否严格相等 , 或者说全等 , 即 <code>===</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ===</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;12&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">12</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str == num); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str === num); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(str, num)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign( )"></a>Object.assign( )</h2><p><code>Object.assign</code> 函数作用 : 将新对象的属性赋值到原对象上 , 后面的属性值会覆盖前面的属性值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> before = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> after1 = &#123;</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> after2 = &#123;</span><br><span class="line">  <span class="attr">c</span>: <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> after3 = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">22</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">33</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="number">44</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.assign(before, after1, after2, after3);</span><br><span class="line"><span class="built_in">console</span>.log(before); <span class="comment">// &#123;a: 22, b: 33, c: 44&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Object-getPrototypeOf"><a href="#Object-getPrototypeOf" class="headerlink" title="Object.getPrototypeOf( )"></a>Object.getPrototypeOf( )</h2><p><code>Object.getPrototypeOf</code> 函数作用 : 获取一个对象的 <code>prototype</code> 属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在 prototype 上添加方法</span></span><br><span class="line">Person.prototype.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Awesome man&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 实例一个新对象</span></span><br><span class="line"><span class="keyword">let</span> tom = <span class="keyword">new</span> Person();</span><br><span class="line">tom.say(); <span class="comment">// 成功打印 Awesome man , 添加成功!;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(tom)); <span class="comment">// 打印 prototype 里的内容</span></span><br></pre></td></tr></table></figure><h2 id="Object-setPrototypeOf"><a href="#Object-setPrototypeOf" class="headerlink" title="Object.setPrototypeOf( )"></a>Object.setPrototypeOf( )</h2><p><code>Object.setPrototypeOf</code> 函数作用 : 设置一个对象的 <code>prototype</code> 属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.setPrototypeOf(tom, &#123;</span><br><span class="line">  <span class="function"><span class="title">hello</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">tom.hello(); <span class="comment">// Hello</span></span><br></pre></td></tr></table></figure><h1 id="ES6-中函数的使用"><a href="#ES6-中函数的使用" class="headerlink" title="ES6 中函数的使用"></a>ES6 中函数的使用</h1><h2 id="参数的默认值"><a href="#参数的默认值" class="headerlink" title="参数的默认值"></a>参数的默认值</h2><p><strong>传统方式</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  name = name || <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">  age = age || <span class="number">20</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ES6 写法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">name = <span class="string">&quot;张三&quot;</span>, age = <span class="number">20</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果函数有多个参数 , 但只有部分需要指定默认值 , 另一部分不需要的话 , 那么 , 设定默认值的参数一定要放在最后</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误示范</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">age = <span class="number">20</span>, name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name, age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 正确写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">name, age = <span class="number">20</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name, age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外 , 只有当传入的参数为 <code>undefined</code> , 才会触发默认值赋值。否则 , 哪怕你传的参数值为 <code>0</code> , <code>false</code> , <code>null</code> 都不会触发默认值赋值 , 这就完美的解决了传统实现方式的弊端</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params">age = <span class="number">20</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(age);</span><br><span class="line">&#125;</span><br><span class="line">getAge(); <span class="comment">// 20</span></span><br><span class="line">getAge(<span class="literal">undefined</span>); <span class="comment">// 20</span></span><br><span class="line">getAge(<span class="number">0</span>); <span class="comment">// 0</span></span><br><span class="line">getAge(<span class="literal">null</span>); <span class="comment">// null</span></span><br></pre></td></tr></table></figure><p>还有一个要注意的地方 , 函数的参数是默认声明的 , 声明过的变量 , 就不能用 <code>let</code> 或者 <code>const</code> 关键字再次声明 , 否则会报错</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> age = <span class="number">20</span>;</span><br><span class="line">  <span class="comment">// 错误 :不能再次声明</span></span><br><span class="line">  <span class="comment">// Uncaught SyntaxError: Identifier &#x27;age&#x27; has already been declared</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="rest-函数"><a href="#rest-函数" class="headerlink" title="rest 函数"></a>rest 函数</h2><p><strong>案例</strong></p><p><code>rest</code> 参数 , 它代表的意思是 : 在实参中 , 除了第一个参数以外 , 剩余的参数都会被 <code>...rest</code> 获取到 , 当然 <code>...rest</code> 是形参 , 也可以是别的名字 , 比如 <code>...value</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">result, ...rest</span>) </span>&#123;</span><br><span class="line">  rest.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    result += value;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum(result, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br></pre></td></tr></table></figure><p><strong><code>...rest</code> 必须放到参数最后</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误示范</span></span><br><span class="line"><span class="comment">// Uncaught SyntaxError: Rest parameter must be last formal parameter</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">...rest,a,b,c</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h2><p>扩展运算符 <code>...</code> 的作用 : 它可以将一个数组转成一个对应的参数数列表</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum(...arr));</span><br></pre></td></tr></table></figure><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumA</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="comment">// 如果函数题单是返回一个东西 , return 也可以省略</span></span><br><span class="line"><span class="keyword">let</span> sumB = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sumC = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> c = a + b;</span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统写法</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">  sum += v;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].forEach(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">  sum += v;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="ES6-新增数据类型-symbol-数据类型"><a href="#ES6-新增数据类型-symbol-数据类型" class="headerlink" title="ES6 新增数据类型 symbol 数据类型"></a>ES6 新增数据类型 symbol 数据类型</h1><p><strong>回顾</strong><br><code>JavaScript</code> 有 6 种数据类型 , 分别是 :<br><code>String</code> 字符串类型;<br><code>Number</code> 数字类型;<br><code>Object</code> 对象类型;<br><code>Boolean</code> 布尔值类型;<br><code>Undefined</code><br><code>Null</code></p><p>而 <code>ES6</code> 给我们带来一种全新的数据类型 : <code>Symbol</code> 每一种全新的事物的诞生都是为了解决某种问题 , <code>Symbol</code> 的初衷 : 解决对象的属性名冲突 , <code>Symbol()</code> , <strong>它代表着一个独一无二的值</strong> , 虽然我们看不到它长什么样子 , 但基本上 , 它有点类似字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sm = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="built_in">console</span>.log(sm); <span class="comment">// Symbol()</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> sm); <span class="comment">// symbol</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sm1 = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> sm2 = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="built_in">console</span>.log(sm1); <span class="comment">// Symbol()</span></span><br><span class="line"><span class="built_in">console</span>.log(sm2); <span class="comment">// Symbol()</span></span><br><span class="line"><span class="built_in">console</span>.log(sm1 == sm2); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(sm1 === sm2); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sm3 = <span class="built_in">Symbol</span>(<span class="string">&quot;sm3&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> sm4 = <span class="built_in">Symbol</span>(<span class="string">&quot;sm4&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sm3); <span class="comment">// Symbol(sm3)</span></span><br><span class="line"><span class="built_in">console</span>.log(sm4); <span class="comment">// Symbol(sm4)</span></span><br></pre></td></tr></table></figure><p><code>Symbo()</code> 函数接受参数 , 用于对实例值的描述<br><code>symbol</code> 永远都是独一无二的值 , 谨记</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sm5 = <span class="built_in">Symbol</span>(<span class="string">&quot;sm&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> sm6 = <span class="built_in">Symbol</span>(<span class="string">&quot;sm&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sm5 == sm6); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(sm5 === sm6); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>下面 , 我们用两种方式获取 <code>name</code> 的值<br>第一种用中括号的形式 <code>[name]</code> 能正确获取到<br>第二种用点运算符的形式 , 获取失败<br>原因是 : 当 <code>symbol</code> 值作为对象的属性名的时候 , 不能用点运算符获取对应的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  [name]: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(person[name]); <span class="comment">// 张三</span></span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>因为用点运算符的话 , 会导致 <code>javascript</code> 把后面的属性名为理解为一个字符串类型 , 而不是 <code>symbol</code> 类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line">person.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// 张三</span></span><br><span class="line"><span class="built_in">console</span>.log(person[<span class="string">&quot;name&quot;</span>]); <span class="comment">// 张三</span></span><br><span class="line"><span class="built_in">console</span>.log(person[name]); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h2 id="属性名的遍历"><a href="#属性名的遍历" class="headerlink" title="属性名的遍历"></a>属性名的遍历</h2><p>当 <code>symbol</code> 类型的值作为属性名的时候 , 该属性是不会出现在 <code>for...in</code> 和 <code>for...of</code> 中的<br>也不会被 <code>Object.keys()</code> 获取到</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 属性名的遍历</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  [name]: <span class="string">&quot;张三&quot;</span>, <span class="comment">// Symbol 类型</span></span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>, <span class="comment">// String 类型</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(person); <span class="comment">// [&quot;age&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> person) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 结果: [age];</span></span><br></pre></td></tr></table></figure><h2 id="Object-getOwnPropertySymbols"><a href="#Object-getOwnPropertySymbols" class="headerlink" title="Object.getOwnPropertySymbols( )"></a>Object.getOwnPropertySymbols( )</h2><p><code>Object.getOwnPropertySymbols()</code> 方法 , 它会找到 <code>symbol</code> 类型的属性并且返回一个数组 , 数组的成员就是 <code>symbol</code> 类型的属性值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="built_in">Symbol</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> age = <span class="built_in">Symbol</span>(<span class="string">&quot;age&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  [name]: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  [age]: <span class="number">22</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&quot;man&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertySymbols(person);</span><br><span class="line"><span class="comment">// 结果: [Symbol(name),Symbol[age]]</span></span><br></pre></td></tr></table></figure><h2 id="Reflect-ownKeys"><a href="#Reflect-ownKeys" class="headerlink" title="Reflect.ownKeys( )"></a>Reflect.ownKeys( )</h2><p>由于获取字符串类型的属性和获取 <code>symbol</code> 类型的属性要分开两种不同的方式来获取 , 难免有有时候会很不方便<br>我们可以用 <code>Reflect.ownKeys()</code> 方法一次性获取所有类型的属性 , 不管它是字符串类型还是 <code>symbol</code> 类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Reflect</span>.ownKeys(person));</span><br></pre></td></tr></table></figure><h2 id="Symbol-for"><a href="#Symbol-for" class="headerlink" title="Symbol.for( )"></a>Symbol.for( )</h2><p><code>Symbol.for()</code> 函数作用 : 根据参数名 , 去<strong>全局环境</strong>中搜索是否有以该 <code>symbol.for()</code> 参数为名的 <code>symbol</code> 值<br>有就返回它 , 没有就以该参数名来创建一个新的 <code>symbol</code> 值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n1 = <span class="built_in">Symbol</span>.for(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> n2 = <span class="built_in">Symbol</span>.for(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(n1 === n2); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="Symbol-keyFor"><a href="#Symbol-keyFor" class="headerlink" title="Symbol.keyFor( )"></a>Symbol.keyFor( )</h2><p><code>Symbol.keyFor()</code> 函数作用 : 返回一个以被登记在全局环境中的 <code>symbol</code> 值的 <code>key</code> , 没有就返回 <code>undefined</code><br>注意这句话的一个关键词 : <strong>“被登记在全局环境中”</strong><br>也就是说这个 <code>symbol</code> 值是被 <code>Symbol.for()</code> 创建的 , 不是被 <code>Symbol()</code> 创建的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n1 = <span class="built_in">Symbol</span>(<span class="string">&quot;name&quot;</span>); <span class="comment">// 此时 n1 是创建在 Symbol 类型下的变量,并非全局</span></span><br><span class="line"><span class="keyword">let</span> n2 = <span class="built_in">Symbol</span>.for(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(n1 === n2); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n1 = <span class="built_in">Symbol</span>.for(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>.keyFor(n1)); <span class="comment">// name</span></span><br></pre></td></tr></table></figure><h1 id="Proxy-的实现"><a href="#Proxy-的实现" class="headerlink" title="Proxy 的实现"></a>Proxy 的实现</h1><h2 id="proxy-的实现"><a href="#proxy-的实现" class="headerlink" title="proxy 的实现"></a>proxy 的实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// proxy</span></span><br><span class="line"><span class="keyword">let</span> personB = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> pro = <span class="keyword">new</span> <span class="built_in">Proxy</span>(personB, &#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params">target, property</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">target, property, value</span>)</span> &#123;</span><br><span class="line">    target[property] = value;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">ownKeys</span>(<span class="params">target</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&quot;name&quot;</span>];</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">has</span>(<span class="params">target, property</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (target[property] == <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(pro.target); <span class="comment">// &#123;name: &quot;张三&quot;, age: 20&#125;</span></span><br><span class="line">pro.name = <span class="string">&quot;王五&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(pro.target); <span class="comment">// &#123;name: &quot;王五&quot;, age: 20&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(personB)); <span class="comment">// [&quot;name&quot;, &quot;age&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(pro)); <span class="comment">// [&quot;name&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;name&quot;</span> <span class="keyword">in</span> pro); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;cname&quot;</span> <span class="keyword">in</span> pro); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="apply"><a href="#apply" class="headerlink" title="apply( )"></a>apply( )</h2><p>除了对象类型的变量可以被代理 , 函数也可以被代理<br>如果被代理的变量是一个函数 , 那么还会支持一个拦截程序 : <code>apply</code> 调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;func&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(func, &#123;</span><br><span class="line">  <span class="function"><span class="title">apply</span>(<span class="params">target, property, value</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`today is <span class="subst">$&#123;value&#125;</span>`</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(proxy(<span class="string">&quot;Saturday&quot;</span>));</span><br></pre></td></tr></table></figure><h2 id="proxy-revocable"><a href="#proxy-revocable" class="headerlink" title="proxy.revocable( )"></a>proxy.revocable( )</h2><p>如果创建了代理之后又想取消代理的话 , 我们可以用 <code>Proxy.revocable()</code>( 可废止的 , 可撤回的 ) 函数来实现<br>它会返回一个对象 , 对象中含有一个 <code>proxy</code> 属性 , 它就是 <code>Proxy</code> 的代理实例对象<br>还有一个 <code>revoke</code> 属性 , 它是一个方法 , 用于取消代理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> personC = &#123; <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> handle = &#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params">target, property</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;李四&quot;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> obj = <span class="built_in">Proxy</span>.revocable(proxy, handle);</span><br><span class="line"><span class="built_in">console</span>.log(obj.proxy.name); <span class="comment">// 李四</span></span><br><span class="line">obj.revoke();</span><br><span class="line"><span class="built_in">console</span>.log(obj.proxy.name); <span class="comment">// Uncaught TypeError: Cannot perform &#x27;get&#x27; on a proxy that has been revoked</span></span><br></pre></td></tr></table></figure><h1 id="for…of-使用"><a href="#for…of-使用" class="headerlink" title="for…of 使用"></a>for…of 使用</h1><p><strong>for…of 的优势</strong> :</p><ol><li>写法比 <code>for</code> 循环简洁很多</li><li>可以用 <code>break</code> 来终止整个循环 , 或者 <code>continute</code> 来跳出当前循环 , 继续后面的循环<br>结合 <code>keys()</code> 获取到循环的索引 , 并且是数字类型 , 而不是字符串类型</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arrA = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> arrA) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> arrA) &#123;</span><br><span class="line">  <span class="keyword">if</span> (value &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> arrA) &#123;</span><br><span class="line">  <span class="keyword">if</span> (value &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ES6-中数值的用法&quot;&gt;&lt;a href=&quot;#ES6-中数值的用法&quot; class=&quot;headerlink&quot; title=&quot;ES6 中数值的用法&quot;&gt;&lt;/a&gt;ES6 中数值的用法&lt;/h1&gt;&lt;h2 id=&quot;isNaN&quot;&gt;&lt;a href=&quot;#isNaN&quot; class=&quot;he</summary>
      
    
    
    
    <category term="js" scheme="https://codehhr.cn/categories/js/"/>
    
    <category term="ES6" scheme="https://codehhr.cn/categories/js/ES6/"/>
    
    
    <category term="js" scheme="https://codehhr.cn/tags/js/"/>
    
    <category term="javascript" scheme="https://codehhr.cn/tags/javascript/"/>
    
    <category term="ES6" scheme="https://codehhr.cn/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>ES6 新增用法 ( 二 )</title>
    <link href="https://codehhr.cn/2021/06/20/js/es6-day02/"/>
    <id>https://codehhr.cn/2021/06/20/js/es6-day02/</id>
    <published>2021-06-20T07:02:37.000Z</published>
    <updated>2021-06-25T07:37:51.188Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="解构赋值-1"><a href="#解构赋值-1" class="headerlink" title="解构赋值"></a>解构赋值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h3 id="不完全解构"><a href="#不完全解构" class="headerlink" title="不完全解构"></a>不完全解构</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, [b, [c, [d, [e, [f]]]]]] = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, [<span class="number">5</span>, [<span class="number">6</span>]]]]]];</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(d); <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(e); <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(f); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h3 id="可以赋默认值"><a href="#可以赋默认值" class="headerlink" title="可以赋默认值"></a>可以赋默认值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b = <span class="number">3</span>] = [<span class="number">1</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="解构赋值-2"><a href="#解构赋值-2" class="headerlink" title="解构赋值"></a>解构赋值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; a, b, c &#125; = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">c</span>: <span class="number">2</span>, <span class="attr">b</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="不完全解构-1"><a href="#不完全解构-1" class="headerlink" title="不完全解构"></a>不完全解构</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; a &#125; = &#123; <span class="attr">b</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h3 id="嵌套-1"><a href="#嵌套-1" class="headerlink" title="嵌套"></a>嵌套</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;</span><br><span class="line">  <span class="attr">a</span>: &#123;</span><br><span class="line">    <span class="attr">b</span>: &#123; c &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125; = &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">1</span> &#125; &#125; &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// a 与 b 只是为了样式一样</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; a, b = <span class="number">1</span> &#125; = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="解构赋值-3"><a href="#解构赋值-3" class="headerlink" title="解构赋值"></a>解构赋值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c, d, e, f] = <span class="string">&quot;pretty&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// p</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// r</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// e</span></span><br><span class="line"><span class="built_in">console</span>.log(d); <span class="comment">// t</span></span><br><span class="line"><span class="built_in">console</span>.log(e); <span class="comment">// t</span></span><br><span class="line"><span class="built_in">console</span>.log(f); <span class="comment">// y</span></span><br></pre></td></tr></table></figure><h1 id="结构赋值的用途"><a href="#结构赋值的用途" class="headerlink" title="结构赋值的用途"></a>结构赋值的用途</h1><h2 id="变量交换"><a href="#变量交换" class="headerlink" title="变量交换"></a>变量交换</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">3</span>;</span><br><span class="line">[a, b] = [b, a];</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h2 id="返回多个值"><a href="#返回多个值" class="headerlink" title="返回多个值"></a>返回多个值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">12</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123; name, age &#125; = demo();</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// 张三</span></span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">// 12</span></span><br></pre></td></tr></table></figure><h2 id="定义函数参数"><a href="#定义函数参数" class="headerlink" title="定义函数参数"></a>定义函数参数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo1</span>(<span class="params">&#123; a, b, c &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 李四</span></span><br><span class="line">  <span class="built_in">console</span>.log(b); <span class="comment">// 22</span></span><br><span class="line">  <span class="built_in">console</span>.log(c); <span class="comment">// 175</span></span><br><span class="line">&#125;</span><br><span class="line">demo1(&#123; <span class="attr">a</span>: <span class="string">&quot;李四&quot;</span>, <span class="attr">b</span>: <span class="number">22</span>, <span class="attr">c</span>: <span class="number">175</span> &#125;);</span><br></pre></td></tr></table></figure><h2 id="函数参数的默认值"><a href="#函数参数的默认值" class="headerlink" title="函数参数的默认值"></a>函数参数的默认值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">&#123; name = <span class="string">&quot;张三&quot;</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;</span><br><span class="line">fn1(&#123; <span class="attr">name</span>: <span class="string">&quot;李四&quot;</span> &#125;); <span class="comment">// 李四</span></span><br><span class="line">fn1(&#123;&#125;); <span class="comment">// 张三</span></span><br></pre></td></tr></table></figure><h1 id="ES6-中字符串的用法"><a href="#ES6-中字符串的用法" class="headerlink" title="ES6 中字符串的用法"></a>ES6 中字符串的用法</h1><h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><p><strong><code>$&#123;&#125;</code></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">22</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">  <span class="attr">hobby</span>: <span class="string">&quot;钓鱼&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`我的名字是<span class="subst">$&#123;Person.name&#125;</span>,今年<span class="subst">$&#123;Person.age&#125;</span>岁了,性别<span class="subst">$&#123;Person.sex&#125;</span>,爱好<span class="subst">$&#123;Person.hobby&#125;</span>`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">// 我的名字是张三,今年22岁了,性别男,爱好钓鱼</span></span><br></pre></td></tr></table></figure><h2 id="repeat"><a href="#repeat" class="headerlink" title="repeat( )"></a>repeat( )</h2><p><code>repeat()</code> 函数 : 将目标字符串重复 <code>N</code> 次 , 返回一个新的字符串 , 不影响原字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str1 = <span class="string">&quot;嘿&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> str2 = str1.repeat(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str2); <span class="comment">// 嘿嘿</span></span><br></pre></td></tr></table></figure><h2 id="includes"><a href="#includes" class="headerlink" title="includes( )"></a>includes( )</h2><p><code>includes()</code> 函数 : 判断字符串中是否含有指定的子字符串 , 返回 <code>true</code> 表示含有, <code>false</code> 表示未含有。第二个参数选填 , 表示开始搜索的位置 (下标从 <code>0</code> 开始)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;codehhr&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">&quot;c&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">&quot;code&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">&quot;h&quot;</span>, <span class="number">5</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">&quot;h&quot;</span>, <span class="number">6</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="startsWith"><a href="#startsWith" class="headerlink" title="startsWith( )"></a>startsWith( )</h2><p>判断指定的子字符串是否出现在目标字符串的开头位置 , 第二个参数选填，表示开始搜索的位置 (从下标 <code>0</code> 开始)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;codehhr&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.startsWith(<span class="string">&quot;c&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.startsWith(<span class="string">&quot;code&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.startsWith(<span class="string">&quot;c&quot;</span>, <span class="number">0</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.startsWith(<span class="string">&quot;c&quot;</span>, <span class="number">1</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="endsWith"><a href="#endsWith" class="headerlink" title="endsWith( )"></a>endsWith( )</h2><p>判断子字符串是否出现在目标字符串的尾部位置 , 第二个参数选填 , 表示从头开始截取的长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;codehhr&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.endsWith(<span class="string">&quot;r&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.endsWith(<span class="string">&quot;hr&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.endsWith(<span class="string">&quot;hr&quot;</span>, <span class="number">6</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(str.endsWith(<span class="string">&quot;hr&quot;</span>, <span class="number">7</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="String-raw"><a href="#String-raw" class="headerlink" title="String.raw"></a>String.raw</h2><p>返回未加工的字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 后面跟模板字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.raw<span class="string">`hello\nworld`</span>); <span class="comment">// hello\nworld</span></span><br></pre></td></tr></table></figure><h1 id="ES6-中数组的用法"><a href="#ES6-中数组的用法" class="headerlink" title="ES6 中数组的用法"></a>ES6 中数组的用法</h1><h2 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of( )"></a>Array.of( )</h2><p>将一组值 , 转换成数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newArr = <span class="built_in">Array</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">// [1,2,3,4,5]</span></span><br></pre></td></tr></table></figure><h2 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from( )"></a>Array.from( )</h2><p>将类似数组的对象或者可遍历的对象转换成真正的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(str)); <span class="comment">// [&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;]</span></span><br></pre></td></tr></table></figure><h2 id="find"><a href="#find" class="headerlink" title="find( )"></a>find( )</h2><p>找出数组中符合条件的第一个元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>];</span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  arr.find(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">7</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure><h2 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex( )"></a>findIndex( )</h2><p>返回符合条件的第一个数组成员的位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>];</span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  arr.findIndex(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">7</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">); <span class="comment">// 7</span></span><br></pre></td></tr></table></figure><h2 id="fill"><a href="#fill" class="headerlink" title="fill( )"></a>fill( )</h2><p>用指定的值 , 填充到数组 , 会更改原数组<br>多个参数时 , 第一个为要填充的内容 , 第二个为起始位置 (下标从 <code>0</code> 开始) , 第三个参数为结束位置 ( 结束位置不填充 )</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr.fill(<span class="number">6</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [6, 6, 6, 6, 6]</span></span><br><span class="line">arr.fill(<span class="number">6</span>, <span class="number">0</span>, <span class="number">2</span>); <span class="comment">// [6, 6, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h2 id="entries"><a href="#entries" class="headerlink" title="entries( )"></a>entries( )</h2><p>对数组的键值对进行遍历 , 返回一个遍历器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [index, value] <span class="keyword">of</span> [<span class="string">&quot;html&quot;</span>, <span class="string">&quot;css&quot;</span>, <span class="string">&quot;js&quot;</span>].entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0 &quot;html&quot;</span></span><br><span class="line"><span class="comment">// 1 &quot;css&quot;</span></span><br><span class="line"><span class="comment">// 2 &quot;js&quot;</span></span><br></pre></td></tr></table></figure><h2 id="keys"><a href="#keys" class="headerlink" title="keys( )"></a>keys( )</h2><p>对数组的索引键进行遍历 , 返回一个遍历器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">of</span> [<span class="number">1</span>, <span class="number">2</span>].keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h2 id="values"><a href="#values" class="headerlink" title="values"></a>values</h2><p>对数组的元素进行遍历 , 返回一个遍历器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> [<span class="number">1</span>, <span class="number">2</span>].values()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;解构赋值&quot;&gt;&lt;a href=&quot;#解构赋值&quot; class=&quot;headerlink&quot; title=&quot;解构赋值&quot;&gt;&lt;/a&gt;解构赋值&lt;/h1&gt;&lt;h2 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h</summary>
      
    
    
    
    <category term="js" scheme="https://codehhr.cn/categories/js/"/>
    
    <category term="ES6" scheme="https://codehhr.cn/categories/js/ES6/"/>
    
    
    <category term="js" scheme="https://codehhr.cn/tags/js/"/>
    
    <category term="javascript" scheme="https://codehhr.cn/tags/javascript/"/>
    
    <category term="ES6" scheme="https://codehhr.cn/tags/ES6/"/>
    
    <category term="解构赋值" scheme="https://codehhr.cn/tags/%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/"/>
    
  </entry>
  
  <entry>
    <title>ES6 新增用法 ( 一 )</title>
    <link href="https://codehhr.cn/2021/06/19/js/es6-day01/"/>
    <id>https://codehhr.cn/2021/06/19/js/es6-day01/</id>
    <published>2021-06-19T11:06:39.000Z</published>
    <updated>2021-06-29T06:22:12.258Z</updated>
    
    <content type="html"><![CDATA[<h1 id="let-关键字"><a href="#let-关键字" class="headerlink" title="let 关键字"></a>let 关键字</h1><h2 id="let-是块级别作用域"><a href="#let-是块级别作用域" class="headerlink" title="let 是块级别作用域"></a>let 是块级别作用域</h2><p>任何一对花括号 ( <strong>这玩意 : { }</strong> ) 中的语句都属于一个块 , 在花括号里面用 <code>let</code> 定义的所有变量在花括号外都是不可见的 , 我们称之为块级作用域</p><p><strong>案例 :</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 var 声明</span></span><br><span class="line"><span class="keyword">var</span> list = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  list[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历完后 i 已变成 10</span></span><br><span class="line">list[<span class="number">1</span>](); <span class="comment">// 10</span></span><br><span class="line">list[<span class="number">2</span>](); <span class="comment">// 10</span></span><br><span class="line">list[<span class="number">3</span>](); <span class="comment">// 10</span></span><br><span class="line">list[<span class="number">4</span>](); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 let 声明</span></span><br><span class="line"><span class="keyword">var</span> list = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  list[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">list[<span class="number">1</span>](); <span class="comment">// 1</span></span><br><span class="line">list[<span class="number">2</span>](); <span class="comment">// 2</span></span><br><span class="line">list[<span class="number">3</span>](); <span class="comment">// 3</span></span><br><span class="line">list[<span class="number">4</span>](); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h2 id="let-不会变量提升"><a href="#let-不会变量提升" class="headerlink" title="let 不会变量提升"></a>let 不会变量提升</h2><p><strong>案例 :</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 var 声明</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// undefined</span></span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 结果是 undefined , 因为 var 使变量提升,相当于 a 定义了,但未赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 let 声明</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 报错 : a 未定义</span></span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 结果报错 : a 未定义</span></span><br><span class="line"><span class="comment">// 用let关键字来定义a；这样a在代码块内就不会提升了。</span></span><br><span class="line"><span class="comment">// 那为什么又报错了呢，因为用let声明的变量，在其块级作用域内是封闭的，是不会受到外面的全局变量a影响的，</span></span><br><span class="line"><span class="comment">// 并且要先声明再使用，所以a的值即不是1（因为不受外面的影响）</span></span><br><span class="line"><span class="comment">// 也不是undefined（因为先声明后使用）</span></span><br><span class="line"><span class="comment">// 更不是2，未声明定义就使用，只有报错啦</span></span><br></pre></td></tr></table></figure><h2 id="同一个块级作用域内不允许重复声明同一个变量"><a href="#同一个块级作用域内不允许重复声明同一个变量" class="headerlink" title="同一个块级作用域内不允许重复声明同一个变量"></a>同一个块级作用域内不允许重复声明同一个变量</h2><p><strong>错误示范 :</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误示范 1</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 错误示范 2</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h2 id="函数内不能用-let-重新声明函数的参数"><a href="#函数内不能用-let-重新声明函数的参数" class="headerlink" title="函数内不能用 let 重新声明函数的参数"></a>函数内不能用 let 重新声明函数的参数</h2><p><strong>错误示范 :</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">world</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> world = <span class="string">&quot;hello tom&quot;</span>; <span class="comment">// 报错 : 用 let 重新声明 world 参数</span></span><br><span class="line">  <span class="built_in">console</span>.log(world);</span><br><span class="line">&#125;</span><br><span class="line">hello(<span class="string">&quot;hello world&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="const-关键字"><a href="#const-关键字" class="headerlink" title="const 关键字"></a>const 关键字</h1><p><code>const</code> 是 <code>constant</code> ( 常量 ) 的缩写 , <code>const</code> 和 <code>let</code> 一样 , 也是用来声明变量的 , 但是 <code>const</code> 是专门用于声明一个常量的 , 常量的值是不可改变的</p><p><strong>const 的特点</strong></p><h2 id="声明的常量不可修改"><a href="#声明的常量不可修改" class="headerlink" title="声明的常量不可修改"></a>声明的常量不可修改</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">person = <span class="string">&quot;李四&quot;</span>; <span class="comment">// 报错,不能修改常量</span></span><br></pre></td></tr></table></figure><p><strong>如果用 <code>const</code> 声明的是复杂数据类型的变量,只是变量的指针不可修改,指针指向的堆中的内容可以修改</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面两种情况就可以 , 也不会报错</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">666</span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;tom&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">&#125;;</span><br><span class="line">obj.name = <span class="string">&quot;jerry&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="只在块级作用域起作用-这点与-let-关键字一样"><a href="#只在块级作用域起作用-这点与-let-关键字一样" class="headerlink" title="只在块级作用域起作用,这点与 let 关键字一样"></a>只在块级作用域起作用,这点与 let 关键字一样</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> person = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(person); <span class="comment">// 错误,在代码快 &#123;&#125; 之外, person 失效</span></span><br></pre></td></tr></table></figure><h2 id="不存在变量提升-必须先声明后使用-这点也跟-let-关键字一样"><a href="#不存在变量提升-必须先声明后使用-这点也跟-let-关键字一样" class="headerlink" title="不存在变量提升,必须先声明后使用,这点也跟 let 关键字一样"></a>不存在变量提升,必须先声明后使用,这点也跟 let 关键字一样</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(person); <span class="comment">// 错误,使用前未声明</span></span><br><span class="line">  <span class="keyword">const</span> person = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="不可重复声明同一个变量-这点跟-let-也一样"><a href="#不可重复声明同一个变量-这点跟-let-也一样" class="headerlink" title="不可重复声明同一个变量,这点跟 let 也一样"></a>不可重复声明同一个变量,这点跟 let 也一样</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> person = <span class="string">&quot;李四&quot;</span>; <span class="comment">// 错误,声明一个已存在的变量 person</span></span><br></pre></td></tr></table></figure><h2 id="声明后必须要赋值"><a href="#声明后必须要赋值" class="headerlink" title="声明后必须要赋值"></a>声明后必须要赋值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person; <span class="comment">// 错误,声明后没有赋值</span></span><br></pre></td></tr></table></figure><h1 id="快速让浏览器兼容-ES6-的方法"><a href="#快速让浏览器兼容-ES6-的方法" class="headerlink" title="快速让浏览器兼容 ES6 的方法"></a>快速让浏览器兼容 ES6 的方法</h1><h2 id="安装-node"><a href="#安装-node" class="headerlink" title="安装 node"></a>安装 node</h2><blockquote><h2 id="官网-https-nodejs-org"><a href="#官网-https-nodejs-org" class="headerlink" title="官网 https://nodejs.org/"></a>官网 <a href="https://nodejs.org/">https://nodejs.org/</a></h2><h2 id="中文网-http-nodejs-cn"><a href="#中文网-http-nodejs-cn" class="headerlink" title="中文网 http://nodejs.cn/"></a>中文网 <a href="http://nodejs.cn/">http://nodejs.cn/</a></h2></blockquote><p><strong>检测 <code>node</code> 是否安装成功,可查看版本号</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><h2 id="安装-babel"><a href="#安装-babel" class="headerlink" title="安装 babel"></a>安装 babel</h2><p><strong>后面的 @5 是版本号,可以不写</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-core@5</span><br></pre></td></tr></table></figure><p>安装 <code>babel</code> 成功后 , 当前目录下的 <code>/node_modules/babel-core</code> 里有 <code>babel</code> 的浏览器版本 <code>browser.js</code> ( 未压缩版 ) 和 <code>browser.min.js</code> ( 压缩版 )</p><h2 id="使用-babel"><a href="#使用-babel" class="headerlink" title="使用 babel"></a>使用 babel</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;brower.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> name = <span class="string">&quot;张三&quot;</span>; <span class="comment">// 测试 : 使用 ES6 新增关键字 const 来声明变量</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(name);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个时候 IE9 能正常运行 <code>ES6</code> 新特性了 , 也就是 <code>babel</code> 转换起作用了，把 <code>const</code> 转换成 IE9 能执行的代码了</p><h1 id="The-End"><a href="#The-End" class="headerlink" title="The_End"></a>The_End</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;let-关键字&quot;&gt;&lt;a href=&quot;#let-关键字&quot; class=&quot;headerlink&quot; title=&quot;let 关键字&quot;&gt;&lt;/a&gt;let 关键字&lt;/h1&gt;&lt;h2 id=&quot;let-是块级别作用域&quot;&gt;&lt;a href=&quot;#let-是块级别作用域&quot; class=&quot;he</summary>
      
    
    
    
    <category term="js" scheme="https://codehhr.cn/categories/js/"/>
    
    <category term="ES6" scheme="https://codehhr.cn/categories/js/ES6/"/>
    
    
    <category term="js" scheme="https://codehhr.cn/tags/js/"/>
    
    <category term="javascript" scheme="https://codehhr.cn/tags/javascript/"/>
    
    <category term="ES6" scheme="https://codehhr.cn/tags/ES6/"/>
    
    <category term="let" scheme="https://codehhr.cn/tags/let/"/>
    
    <category term="var" scheme="https://codehhr.cn/tags/var/"/>
    
    <category term="const" scheme="https://codehhr.cn/tags/const/"/>
    
    <category term="babel" scheme="https://codehhr.cn/tags/babel/"/>
    
    <category term="兼容" scheme="https://codehhr.cn/tags/%E5%85%BC%E5%AE%B9/"/>
    
  </entry>
  
</feed>
